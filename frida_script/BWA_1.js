
var resolver = new ApiResolver('objc');

function onEnterFunc(args, argNum, infoArray){
    // infoArray = [ argNum, args[1], args[2], ... , args[argNum + 1], args[0], retval, funcname ]
    infoArray[0] = argNum;

    /*try {
        tmp = new ObjC.Object(args[0]);
        infoArray[argNum + 2] = tmp.toString();
    } catch(error){
        try { 
            infoArray[argNum + 2] = strFilter(Memory.readCString(args[0], 128).toString());
        } catch(err) {
            infoArray[argNum + 2] = args[0].toString();
        }
    }*/

    for(var i=1; i<argNum+2; ++i) {
        infoArray[i] = 'arg';
        /*try {
            tmp = new ObjC.Object(args[i]);
            infoArray[i] = tmp.toString();
        } catch(error){
            try { 
                infoArray[i] = strFilter(Memory.readCString(args[i], 128).toString());
            } catch(err) {
                infoArray[i] = args[i].toString();
            }
        }*/
    }

    return;
}

function onLeaveFunc(retval, argNum, infoArray){

    infoArray[argNum + 3] = 'retval';
    /*try {
        tmp = new ObjC.Object(retval);
        infoArray[argNum + 3] = tmp.toString();
    } catch(error){
        try { 
            infoArray[argNum + 3] = strFilter(Memory.readCString(retval, 128).toString());
        } catch(err) {
            infoArray[argNum + 3] = retval.toString();
        }
    }*/

    return;
}

function strFilter(str) {
    for(var i=0; i<str.length; ++i){
        if(str.charCodeAt(i) >= 32 && str.charCodeAt(i) <= 127)
            { }
        else
            return str.substring(0, i);
    }
    return str;
}

function hookObjC(FuncName, ArgNum){
    resolver.enumerateMatches(FuncName, {
        onMatch: function (match) {
                    // infoArray = [ argNum, args[1], args[2], ... , args[argNum + 1], args[0], retval, funcname ]
                    var infoArray = new Array(ArgNum + 4);
                    infoArray[ArgNum + 4] = match.name;
                    //send(match.name);

                    Interceptor.attach(match.address, {
                    onEnter: function(args){
                        //send(match.name);
                        onEnterFunc(args, ArgNum, infoArray);
                    },
                    onLeave: function(retval){
                        onLeaveFunc(retval, ArgNum, infoArray);
                        send(infoArray);
                    }
                    })
                },
        onComplete: function () {
                }
    }); 
}

setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField accessoryResignFirstResponder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField plainText]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField changeKeyBoardType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField dicToProperty:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField textRectForBounds:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField editingRectForBounds:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField observeValueForKeyPath:ofObject:change:context:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField placeHolderInsets]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField forbidSecurityKeyboard]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField confirmBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField bText]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField bHolder]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField bRadius]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField bBorderRadius]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField waringBorder]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField numberPad]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField textFieldMenuVisible]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField numberPadType]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletHttpRequest requestWithURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletHttpRequest requestStarted]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletHttpRequest requestFinished]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletHttpRequest failWithError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter figurePrintSwitchChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter verPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter beginRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter handleUserInfoResult:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter leaveWallet:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter closeFingerprintIsExist]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter handleCloseFingerprintResult:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter openFingerPrignt]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter openFingerprintPayWithVerfy]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter openFingerprintPay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter handleOpenFingerprintResult:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter BDWalletBindSuccessed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter BDWalletResetPasswordSuccessed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassPresenter openPassFree]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassPresenter fetchUserInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassPresenter toExternalVerPassword:mobile:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassPresenter checkSMS:password:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassPresenter savePassFreeSettingsWithPassword:code:mobile:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassPresenter verificationComplete:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassPresenter normalizeAccount:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassPresenter threePassVer:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassPresenter leaveWallet:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassPresenter freePasswordSwitchChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassPresenter smsVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayComplianceAntiMoneyLaundering after_pay_identity]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayComplianceAntiMoneyLaundering auth_msg]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletAddressBookUtil formatedPhone:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAddressBookUtil didPeopleInfoWithController:withSelectingPerson:property:identifier:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAddressBookUtil addressBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAddressBookUtil hasRequestPression]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransCancelRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransCancelRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransCancelRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransCancelRequest sendInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletBScanCLogic sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletBScanCLogic allocWithZone:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic queryBScanCResult:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic cancelQueryBScanC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic openBScanC:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic cancelOpenBScanC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic createBScanC:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic cancelCreateBScanC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic pushBScanCPayResult:lastCode:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic cancelPushBScanCPayResult]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic closeBScanC:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic cancelCloseBScanC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic pushQueryRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic closeRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic createBScanCRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic openRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic queryRequest]", 0)}, 0);
setTimeout(function(){hookObjC("+[TrackerConfigFileAdapter sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[TrackerConfigFileAdapter detechVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[TrackerConfigFileAdapter currentConfigFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[TrackerConfigFileAdapter bundleConfigContent]", 0)}, 0);
setTimeout(function(){hookObjC("-[TrackerConfigFileAdapter tryToUpdateConfigWithFinishedBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TrackerConfigFileAdapter startDownloadConfigFile:withFinishedBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetMobileRechargePromotionRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetMobileRechargePromotionRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetMobileRechargePromotionRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetMobileRechargePromotionRequest promotion_img_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetMobileRechargePromotionRequest promotion_txt]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetMobileRechargePromotionRequest promotion_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetMobileRechargePromotionRequest promotion_detail_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest request_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest card_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest card_no_bind]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest source_flag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest first_sp_id_tpl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest sp_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest sp_uno]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest trans_need_to_pay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest seller_user_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest total_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest balance_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest need_calc_balance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest sub_bank_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest easypay_channel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest order_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest easypay_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest session_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest couponDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest session_content]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest activity_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest coupon_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest pure_sign]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest backEndServiceTypeMark]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPublicUtil applyConstraintByStringsAndOption:strArray:viewsDic:autoAdapter:option:]", 5)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealnameVerifySMSRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealnameVerifySMSRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealnameVerifySMSRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealnameVerifySMSRequest phone_vcode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetTransferToAccountInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetTransferToAccountInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetTransferToAccountInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest source_flag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest first_sp_id_tpl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest sp_uno]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest trans_need_to_pay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest seller_user_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest total_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest score_trans_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest score_pay_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest balance_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest need_calc_balance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest pay_quota_balance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest easypay_channel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest need_calc_umoney]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest umoney_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest card_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest pay_bank_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest couponDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRootListItemObj ID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRootListItemObj s_icon]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRootListItemObj l_icon]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRootListItemObj hot_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRootListItemObj hot_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRootListItemObj hot_image]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCOfflineTokenRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCOfflineTokenRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCOfflineTokenRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCOfflineTokenRequest offlineToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCOfflineTokenRequest mobilePwd]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealnameCheckPasswordRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealnameCheckPasswordRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealnameCheckPasswordRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealnameCheckPasswordRequest true_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealnameCheckPasswordRequest certificate_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealnameCheckPasswordRequest mobile_pwd]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealnameCheckPasswordRequest confirm_mobile_pwd]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferResultRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferResultRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferResultRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferResultRequest order_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToBankUserNameCheckRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToBankUserNameCheckRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToBankUserNameCheckRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToBankUserNameCheckRequest payee_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToBankUserNameCheckRequest payee_bank_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToBankUserNameCheckRequest payee_bank_num]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToBankUserNameCheckRequest id_tpl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToBankUserNameCheckRequest payer_bank_num]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSSKeychainQuery save:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSSKeychainQuery deleteItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSSKeychainQuery fetchAll:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSSKeychainQuery fetch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSSKeychainQuery passwordObject]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSSKeychainQuery errorWithCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSSKeychainQuery passwordData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSSKeychainQuery accessGroup]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSSKeychainQuery synchronizationMode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPointsRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPointsRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPointsRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferDeleteRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferDeleteRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferDeleteRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferDeleteRequest id_tpl]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletRealNameAuthManager allocWithZone:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager doPrePasshWithRootVC:params:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager doRNAuthWithRootVC:authGrade:params:block:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager enterAuthLogic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager enterRealNameAuthWhenRealFailed]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager realNameFailedWithError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager enterRealNameVerifyPassword:currentVC:withisSendSMS:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager realNameCheckPass:withBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager enterCertificateCheck:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager shouldFinishAfterStep1WithErrorCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager shouldFinishAfterStep2]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager shouldFinishAfterStep3]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager shouldEnterStep2]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager shouldEnterStep3]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager shouldEnterResultPage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager tryToEnterStep2]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager tryToEnterStep3]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager enterCardInfoCheck:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager enterManualAuditWithCurrentVC:sender:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager enterRealResultWithCurrentVC:sender:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager paserUserModelWithContent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager cancelLeaveRealNameAuth:isExitNav:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager successedLeaveRealNameAuth:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager confirmBankCardFinished]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager authApplyFinished]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager idScanSuccessComplete:withOpposite:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager cleanPayMainManagerData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager cleanRealNameData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager handleSkipFromStep:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager authInParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager rootVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager currentVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager curAuthUserModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager realNameBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager idScan]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager nciicAuthErrorCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFPCloseOtpRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFPCloseOtpRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFPCloseOtpRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletTrackerNewEvent makeWithPageStartByPageName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletTrackerNewEvent makeWithPageBackByPageName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletTrackerNewEvent makeWithPageEndByPageName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletTrackerNewEvent makeWithPagePushByPageName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletTrackerNewEvent makeWithDic:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewEvent uploadContent]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewEvent addEventValue:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewEvent addEventValue:withIndex:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewEvent addEventValues:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewEvent eventKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewEvent eventValues]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewEvent eventLinkedWay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewEvent increId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewEvent abType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMobileRechargePayResultRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMobileRechargePayResultRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMobileRechargePayResultRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMobileRechargePayResultRequest chargeType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMobileRechargePayResultRequest orderNo]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWConnectApplication shareApplication]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWConnectApplication urlSchemePrefix]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWConnectApplication valueForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWConnectApplication dictionaryWithAllValues]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWConnectApplication urlScheme]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWConnectApplication sdkVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWConnectApplication appId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWConnectApplication urlSchemePrifix]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPrePassInfo modelCustomTransformFromDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPrePassInfo needStep]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPrePassInfo process_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPrePassInfo need_step]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPrePassInfo ret_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPrePassInfo last_step]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPrePassInfo step_cfg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPrePassInfo title_item_cfg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPrePassInfo def_skip_tips]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPrePassInfo not_ex_skip_tips]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerContext findContextValueByKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerContext clearKeyAndValues]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerContext internalDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransAccountCancelRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransAccountCancelRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransAccountCancelRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransAccountCancelRequest sendInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBootLoader startForSafePayOnly]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_QueryBScanCRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_QueryBScanCRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_QueryBScanCRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletBalanceManager allocWithZone:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletBalanceManager sharedBalanceManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceManager requestWithdrawDataWithCompletion:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceManager cancleWithdrawDataRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceManager requestStartWithdrawWithAmount:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceManager cancleStartWithdrawRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceManager requestRechargeQuotaWithAmount:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceManager cancleBalanceQuotaRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceManager requestRechargePromptWithCompletion:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceManager withdrawApplyQueryReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceManager startWithDrawRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceManager rechargeQuotaRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBSCPayBScanCRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBSCPayBScanCRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBSCPayBScanCRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBSCPayBScanCRequest payInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBSCPayBScanCRequest trans_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 becomeFirstResponder]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 removeTextFiled]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 resetTitleLength:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 resetTitleOringY:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 resetTitleOriginX:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 changeTextFieldToSecurityTextField]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 textField:shouldChangeCharactersInRange:replacementString:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 textFieldDidBeginEditing:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 textFieldDidEndEditing:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 textFieldShouldClear:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 needHideKeyBoard]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 clearTextField]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 focusTextField]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 textFieldShouldReturn:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 resultText]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 addTextFieldChangeNotification]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 removeTextFieldChangeNotification]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 textFieldChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 observeValueForKeyPath:ofObject:change:context:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 didChange:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 cardNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 bankUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 clearBankInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 detailTextField]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 titleText]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 detailText]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 detailAttributeText]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 menuVisible]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayMobilePasswordCheckRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayMobilePasswordCheckRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayMobilePasswordCheckRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayMobilePasswordCheckRequest passwordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPrivacyServiceImpl privacyOpenKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPrivacyServiceImpl resetShowMark:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPrivacyServiceImpl clearPrivacySecurity]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPrivacyServiceImpl resetPrivacySecurity:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPrivacyServiceImpl fetchLoginID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPrivacyServiceImpl privacyService]", 0)}, 0);
setTimeout(function(){hookObjC("+[AileenLogger logContent:toFileName:]", 2)}, 0);
setTimeout(function(){hookObjC("+[LXNetKit sendAsynchronousSessionUrl:HTTPMethod:param:complate:field:]", 5)}, 0);
setTimeout(function(){hookObjC("+[LXNetKit sendAsynchronousUrlString:HTTPMethod:param:complate:field:]", 5)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletUserInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletUserInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletUserInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletUserInfoRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletUserInfoRequest orderInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletUserInfoRequest pay_type_default]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderListSendInfo order_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderListSendInfo through_data]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSecurityKeyboardConfig numberPadFrame]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSecurityKeyboardConfig numberPadBackgroundImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSecurityKeyboardConfig accessoryFrame]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSecurityKeyboardConfig accessoryLogoFrameWithAccessoryFrame:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSecurityKeyboardConfig accessoryIconFirstImge]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSecurityKeyboardConfig accessoryIconSecondImge]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSecurityKeyboardConfig accessoryTitleFrameWithAccessoryFrame:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSecurityKeyboardConfig accessoryArrFrameWithAccessoryFrame:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSecurityKeyboardConfig accessoryArrImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSecurityKeyboardConfig accessoryTitleName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBindResult activity_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBindResult retMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBindResult card_no]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWallet_BScanCManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCManager halfVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCManager sdkRootController]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletLivenessUtil shareInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletLivenessUtil accessLivenessWithParams:rootVC:finishBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletLivenessUtil statLivingResultSuccess]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletLivenessUtil statLivingResultFailWithCode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletGetIPAddress BDWallet_IPAdressFromDomain:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletGetIPAddress BDWallet_GetIPAddresses]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletGetIPAddress BDWallet_GetIPAddressWithPreferedTypes:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletGetIPAddress BDWallet_GetIPAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletGetIPAddress BDWallet_GetIPAddressv4]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletGetIPAddress whatismyipdotcom:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletGetIPAddress localWiFiIPAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAccountInfo balance_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAccountInfo freeze_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAccountInfo virtual_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAccountInfo can_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAccountInfo available_withdraw_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAccountInfo recv_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAccountInfo recv_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAccountInfo score_num]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAccountInfo can_cash]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAccountInfo return_cash_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAccountInfo return_cash_content]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_AudioRecordManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_AudioRecordManager checkMicrophoneAuthorityInRecording]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_AudioRecordManager startRecording:successBlock:failedBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_AudioRecordManager stopRecording]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_AudioRecordManager callbackPCMAudioData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_AudioRecordManager audioData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_AudioRecordManager audioQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_AudioRecordManager audioPCMData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_AudioRecordManager curRecordID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletVcodeResultInfo resultCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletVcodeResultInfo resultDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletVcodeResultInfo retMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletOpenBScanCSendInfo mobilePwd]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCheckCardInfoResult cardInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCheckCardInfoResult sms_length]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCheckCardInfoResult sms_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCheckCardInfoResult send_sms_phone]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCheckCardInfoResult orgAoumtItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCheckCardInfoResult errContent]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCheckCardInfoResult retMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCheckCardInfoResult riskControl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPureSignAuthorizeInfo pure_sign]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPureSignAuthorizeInfo source_flag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPureSignAuthorizeInfo sp_logo_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPureSignAuthorizeInfo sp_company_title]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPureSignAuthorizeInfo authorize_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPureSignAuthorizeInfo detail_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPureSignAuthorizeInfo agreement_info]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletCustomServiceManager allocWithZone:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletCustomServiceManager customServiceManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCustomServiceManager saveCustomServiceInfo:csType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCustomServiceManager removeCustomServiceItemForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCustomServiceManager csDict]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetReAuthUserInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetReAuthUserInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetReAuthUserInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayConfigPayMethodInfo modelContainerPropertyGenericClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigPayMethodInfo paymethod_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigPayMethodInfo sorted_list]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigPayMethodInfoDetail pay_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigPayMethodInfoDetail account_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigPayMethodInfoDetail card_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigPayMethodInfoDetail bank_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassCreditMap select_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassInfoDetail has_mobile_pwd]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassInfoDetail passfree_flag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassInfoDetail passfree_button_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassInfoDetail need_check_sms]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassInfoDetail passfree_credit_map]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBalanceRechargePromptRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBalanceRechargePromptRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBalanceRechargePromptRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderDelRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderDelRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderDelRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderDelRequest order_id_unique]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDFPCreateOtpRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDFPCreateOtpRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDFPCreateOtpRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDFPCreateOtpRequest mobile_pwd]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCollectionRecvListResult modelContainerPropertyGenericClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionRecvListResult total_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferBankQueryResult hot_bank]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletScanBarcodeWhiteListRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletScanBarcodeWhiteListRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletScanBarcodeWhiteListRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletNetworkClient shareNetworkClient]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletNetworkClient cancelRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletNetworkClient cancelUniqueRequest:isParamUnique:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletNetworkClient cancelAllRequests]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletNetworkClient requestHashKey:isParamUnique:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletNetworkClient addRecord:isParamUnique:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletNetworkClient removeRecord:isParamUnique:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletNetworkClient clientRecord]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletNetworkClient requestQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletWithdrawInfo pay_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletWithdrawInfo estimated_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletWithdrawInfo cash_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletWithdrawInfo redirect_business_succpage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetPassfreeRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetPassfreeRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetPassfreeRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetPassfreeRequest sendInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPassfreeRiskControlRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPassfreeRiskControlRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPassfreeRiskControlRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPassfreeRiskControlRequest passfree_status]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPassfreeRiskControlRequest passfree_credit]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameAuthApplyRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameAuthApplyRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameAuthApplyRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameAuthApplyRequest expireDateText]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_WalletModuleManager hasModeuleClass:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetTransferToAccountInfoResult payee_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetTransferToAccountInfoResult user_quota]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetTransferToAccountInfoResult quota_info_array]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetTransferToAccountInfoResult noticeItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferHeader itemPressed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferHeader headerType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferHeader interbank_offline_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferHeader interbank_offline_tips]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayMobilePasswordVerifyRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayMobilePasswordVerifyRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayMobilePasswordVerifyRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayMobilePasswordVerifyRequest passwordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetPassfreeSendInfo mobile_pwd]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetPassfreeSendInfo pwd_seed]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetPassfreeSendInfo passfree_status]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetPassfreeSendInfo passfree_credit]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetPassfreeSendInfo sms_vcode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFPStatusInfo fingerprintStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckPCPasswordRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckPCPasswordRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckPCPasswordRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckPCPasswordRequest passwordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCSendSMSRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCSendSMSRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCSendSMSRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCSendSMSRequest sendInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWConstAppearance sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWConstAppearance separateWeight]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayVerifiedSMSRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayVerifiedSMSRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayVerifiedSMSRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayVerifiedSMSRequest vcodeInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayVerifiedSMSRequest backEndServiceTypeMark]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayVerifiedSMSRequest backEndRequestTypeMark]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWSDKAppearance statusBarStyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWSDKAppearance oldStatusBarStyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWSDKAppearance bdWalletNavBackNormalImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWSDKAppearance bdWalletNavBackHighlightImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWSDKAppearance bdWalletNavBgImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWSDKAppearance bdWalletNavGobackTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWSDKAppearance bdWalletNavBacktitleEdgeInset]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWSDKAppearance bdWalletNavBackimageEdgeInset]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWSDKAppearance negativeSpace]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionGetQRCodeRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionGetQRCodeRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionGetQRCodeRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionGetQRCodeRequest recv_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionGetQRCodeRequest recv_remark]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager loadUploadUrlFromSettings]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager addEvent:needSyncToFile:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager addEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager bdussFromAPP]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager refreshEvents]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager headerDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager currentSyncContentByEvents:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager currentUploadContentByEvents:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager syncMemeDataToFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager syncFileDataToMem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager triggerUploadDataByEvents:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager generatAutoIncrentId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager uploadUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager eventsArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager trackerQueue]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletEncrypt encrypt:key:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletEncrypt decrypt:key:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletEncrypt safePayGetPW]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletEncrypt safePayEncrypt:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletEncrypt safePayDecrypt:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletEncrypt safePayLocalDecrypt:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletEncrypt safePayLocalEncrypt:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletEncrypt safePayMD5:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletEncrypt safePaySeed]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletEncrypt safepayCapitalString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayResetPasswordBySMSRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayResetPasswordBySMSRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayResetPasswordBySMSRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayResetPasswordBySMSRequest passwordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetTransferInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetTransferInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetTransferInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletMobileRechargeManager sharedMobileRechargeManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMobileRechargeManager fetchPromotionInfo:complete:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMobileRechargeManager fetchChargeInfo:complete:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMobileRechargeManager fetchCommonChargeInfo:complete:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMobileRechargeManager fetchMobileNoOfAccount:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMobileRechargeManager cancelMobileRechargeRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMobileRechargeManager promotionReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMobileRechargeManager commonRechargeReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCAuthInfo need_verify]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCAuthInfo display_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCPayResult pay_detail_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCPayResult discount_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCPayResult discount_prefix]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCPayResult order_prefix]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCPayResult total_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCPayResult coupon_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCPayResult coupon_find_prompt]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCPayResult cash_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCPayResult paytype_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCTransInfo sp_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCTransInfo order_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCTransInfo total_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCTransInfo pay_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCTransInfo discount_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCTransInfo goods_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCTransInfo score_tip]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCTransInfo paytype_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCTransInfo pay_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCResult trans_status]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCResult trans_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCResult trans_err_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCResult auth_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCResult pay_result]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCResult retCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCResult retMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSendSMSRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSendSMSRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSendSMSRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSendSMSRequest card_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSendSMSRequest phone_number]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSubmitTransferOrderResult jump_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSubmitTransferOrderResult cashdesk_return]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerContextConfig validContextConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerContextConfig className]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerContextConfig selectorName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerContextConfig contextKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerContextConfig contextDefaultValue]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWTNetClient shareClient]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTNetClient cancelRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager activeComplete:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager bindCard:requestType:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager createCheckCardInfoRequestElements:cardInfo:orderInfo:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager checkCardInfo:payInfo:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager cancelCheckCardInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager cancelGetCardInfoRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager cancelBankListRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager buildGetCardInfoRequest:payInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager requestGetParamsString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager checkFindPasswordVerificationCode:withBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager queryCardBinByCardNO:cardInfoRequestType:withBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager sendSMS:token:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager cancelSendSMS]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager createBankExtraSmsRequest:payInfoDic:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager sendSMSByBankExtra:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager sendSMSByODP:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager cancelsendSMSByODP]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager transferSendSMS:withNum:withToken:block:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager queryBandCardArrayForFindPwdWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager realnameSendSmswithRequest:withBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager cancelRealnameSendSms]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager realnameVerifySmsWithRequest:withBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager cancelRealNameVerifySms]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager cardSignWithRequest:withBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager cancelCardSignRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager cancelFindPwdBankListRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager frontSelectPayMethodRequest:withBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager passFreeRequest:withBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager fetchDirectUserInfo:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager checkCardInfoReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager bankListReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager cardSignRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager findPwdBankListReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest request_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest card_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest card_no_bind]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest session_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest front_bank_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest true_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest certificate_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest certificate_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest verify_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest valid_date]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest sms_vcode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest session_content]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest sp_voice_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest verify_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultRiskControlGuidance prompt_head]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultRiskControlGuidance prompt_body]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletTrackerUtil calculateDpi]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSoftToken bdWalletLoadFromSecureString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSoftToken destroyTempMemory]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSoftToken generateOTPForCounter:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSoftToken bdWalletGetCurrentCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSoftToken bdWalletGetSerialNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSoftToken padding:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSoftToken BytesToInt:::]", 3)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletSafePayLogic sharedLogic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayLogic bankCardManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayLogic passwordManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayLogic payManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayLogic orderManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCBaseRequest encodeURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletStartWithdrawlRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletStartWithdrawlRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletTradeOderDetailsResult modelContainerPropertyGenericClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOderDetailsResult trans_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPasswordManagerServiceImpl createService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPasswordManagerServiceImpl enterPasswordWithRootController:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPasswordManagerServiceImpl beginRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPasswordManagerServiceImpl leaveWallet:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPasswordManagerServiceImpl BDWalletBindSuccessed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPasswordManagerServiceImpl BDWalletResetPasswordSuccessed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPasswordManagerServiceImpl refreshData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPasswordManagerServiceImpl BDWalletSDKLoginSuccessedWithLoginType:token:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPasswordManagerServiceImpl BDWalletSDKLoginFailedWithErrorCode:errorMsg:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPasswordManagerServiceImpl passwordService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPasswordManagerServiceImpl showingLoadingController]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameImgUploadRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameImgUploadRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameImgUploadRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameImgUploadRequest typeForImageData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameImgUploadRequest front_or_back]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameImgUploadRequest dataImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletChannelQuota single_limit]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletChannelQuota day_limit]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletChannelQuota month_limit]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBSCPayInfo sp_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBSCPayInfo order_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBSCPayInfo pay_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBSCPayInfo mobile_pwd]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBSCPayInfo sms_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest card_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest true_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest certificate_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest certificate_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest card_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest valid_date]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest sp_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest order_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest total_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest balance_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest pay_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest composite_flag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest front_bank_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest verify_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest pay_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerBaseEvent uploadContent]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerBaseEvent pageId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerBaseEvent eventId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCalculatingMoneyResult userConsumptionInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest requestType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest requestUseGBK]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletRequest encodeURL:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletRequest base64forData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest sendHttpRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest handleReusltCode]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletRequest wcpEncoded]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest sendHttpSecretRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest addNonceSign:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest retMsg]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletRequest DicTOjsonString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletRequest fetchSystemInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletRequest logRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletRequest formatParameter:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest resaveSessionIDAndSessionUri]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest sessionID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest resultCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest resultDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest protocolType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest addDefaultParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest timeoutSeconds]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest preventingTampering]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSaveFeedbackRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSaveFeedbackRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSaveFeedbackRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSaveFeedbackRequest feedbackInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponDetailRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponDetailRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponDetailRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponDetailRequest couponModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponDetailRequest resultCoupon]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAuthStateRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAuthStateRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAuthStateRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAuthStateRequest needMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerConfig validEventConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerConfig className]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerConfig selectorName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerConfig eventId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerConfig eventValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerConfig readContextValues]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerConfig cancelWhenKeyNull]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerConfig readInstanceProperties]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerConfig readArguments]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerConfig hookAfter]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy updateStrategy]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy restoreConfigFromDefaults]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy useDefaultStrategy]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy parserStrategyConfig:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy updateTimers]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy timerTriggerWifiUpload:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy timerTrigger3GUpload:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy shouldUploadImmediatelyByEventKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy shouldUploadImmediatelyByCSEventKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy shouldIgnoreEventKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy tryToUpdateStrategy:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy immediatelyKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy neverReportKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy wifiTriggerMinutes]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy mobile3GTriggerMinutes]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy csImmediatelyKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy csCacheCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy csCacheSecs]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy wifiTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy mobileNetTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy basicInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_PushBSCanCPayResultRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_PushBSCanCPayResultRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_PushBSCanCPayResultRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_PushBSCanCPayResultRequest lastPaycode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFindPwdBankCardListRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFindPwdBankCardListRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFindPwdBankCardListRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFindPwdBankCardListRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletAddCardManager allocWithZone:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletAddCardManager addCardManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletAddCardManager fetchCustomServiceParams:serviceType:requestType:Complete:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletAddCardManager dataStreamAddCardReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCSendSMSResult send_sms_by_bfb]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCSendSMSResult sms_pattern]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCSendSMSResult sms_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCSendSMSResult sms_length]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPadWithEnterKey updateFrame]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassIvarInfo typeEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassMethodInfo typeEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassMethodInfo returnTypeEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassMethodInfo argumentTypeEncodings]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassPropertyInfo typeEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassPropertyInfo ivarName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassInfo _update]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWTClassInfo classInfoWithClass:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWTClassInfo classInfoWithClassName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassInfo superCls]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassInfo metaCls]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassInfo superClassInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassInfo ivarInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassInfo methodInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassInfo propertyInfos]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSSKeychain passwordForService:account:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSSKeychain passwordForService:account:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSSKeychain deletePasswordForService:account:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSSKeychain deletePasswordForService:account:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSSKeychain allAccounts]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSSKeychain accountsForService:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSSKeychain accessibilityType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetTransferInfoResult hot_bank]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetTransferInfoResult user_quota]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetTransferInfoResult quota_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetTransferInfoResult noticeItem]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCreateBScanCPay modelContainerPropertyGenericClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCreateBScanCResult bscBankArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCreateBScanCResult selectedCardNo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCreateBScanCResult pay_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCreateBScanCResult pay_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCreateBScanCResult more_card]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFocusItemObj ID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFocusItemObj imageName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFrontSelectpayMethodRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFrontSelectpayMethodRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFrontSelectpayMethodRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletMemoryCache defaultCache]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletMemoryCache cacheForOwner:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCache containsKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCache addArray:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCache addArray:forKey:dependency:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCache objectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCache removeObjectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCache cacheItemForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCache addDenpendency:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCache cacheItems]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletMyTradeCommonLogic priceDescWithBehav:goodsAmount:hsaUnit:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplyCreditCardInfo imageUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager rePayOrderInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager resetData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletRechargeEnterWithOrderInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletBSCPayMainEnterWithBigAmountItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager createCashDeskWithBSCItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager supportFingerPrintPay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletBSCPayMainEnterSuccessWithSmallAmountItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletBSCPayMainEnterWithSMSItem:CompletionBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager fixBugsBscnScreenHightlightWhenExitSDK]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletPayMainEnterWithPreOrderInfo:userResultInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletPayMainEnterWithOrderInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletPayMainEnterWithOrderInfo:isHalfPre:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletPayWithOrderInfo:isHalfPre:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager sdkRootController]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager goBackFromPasswordVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager goBackFromPayBindCardVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager goBackFromPayIntoDetailVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager cancelDoPayExternalNotice:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager cancelDoPay:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager BDWalletPayMySuccessed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager delayNotify:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager BDWalletPayMyFailed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager BDWalletPayWithdrawComplete:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager BDWalletPayMyBindCardSuccessed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager BDWalletPayMyBindCardFailed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager BDWalletPayMyResetPasswordSuccessed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager BDWalletPayMyResetPasswordFailed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager BDWalletPaySetPasswordWithPCPasswordAndPay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager BDWalletPaySetPasswordWithPCPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager leaveBDWalletPaySDKWithSDKRootController:withData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager dimissPresentVC:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager leaveBDWalletPaySDKWithSDKRootController:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager doUserInfoRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager updatePayInfoAfterUser:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager afterUserInfoRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager doRealNameAuth:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager endPayAndNotify:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager sendDoPayCancelNotificationWithPayCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager orderErrorHandle:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager confirmOrderInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager enterCardElementsUpdateCardInfoWithParams:rootVC:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager reloadBankCardItemDataByNeedCompleteInfo:bankCardItem:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager enterCardInfoUpdateVC:payPwd:needComplete:withPayItem:extendParam:withRootVC:]", 6)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager confirmPayLogic:payItem:animated:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager toPayUpdateLogicData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager payEntranceLogic:payItem:animated:isNeedPopToRoot:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager confirmEntrance:payItem:animated:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager needCompositePay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager checkHalfPasswordWithPasswordType:block:withRootVC:animated:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager checkPasswordWithPasswordType:block:withRootVC:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager nopassCardListOrAddCard:payItem:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager hasPassCardCompleteOrAddCardLogic:payItem:animated:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager addCard]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager addcardWithRootVC:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager addcardWithRootVC:lightAppParams:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager addcardInsideWithRootVC:isCheckPasswordInHalfScreen:withLightAppParams:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager checkPasswordToBankCardWithVC:isCheckPasswordInHalfScreen:withLightAppParams:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager enterPureSign:payItem:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager addCardAndPayWithMethodsOfPayItem:withRootVC:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager createCardListVC:payItem:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager createCashDesk:withRootVC:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager createCashDesk:withRootVC:animated:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager addCardPayFromVC:withPayItem:animated:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager forgotPasswordWithVC:withRootVC:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager forgotPasswordWithVC:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager activeCompleteWithVC:cardInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager completePayWithVC:withCardInfo:withPayItem:animated:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager externalSetMobilePayPasswordWithRootVC:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager externalVerPasswordWithRootVC:resetRootVC:verificationType:block:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager externalVerPasswordWithRootVC:verificationType:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager externalModifyPasswordWithRootVC:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager externalEnterPaymentResultVCWithRootVC:resultType:payDesc:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager externalEnterSMSVerificationVcodeVCWithRootVC:token:transdDi:recvCardNum:recvPhoneNumber:withBlock:]", 6)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager passFreeEnterSMSVerificationVcodeVCWithRootVC:phoneNumber:withBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager doBindCard:withBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bindUserInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager doVerifyCardElement:withBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager verfiyCardElement:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager closeCashier]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager closeCashierAndNotif:returnMsg:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager miniStartPageDopay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager createConfirmOrderInfoVC:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager paramsToUserInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager orderInfoStringToItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletPayMainEnterWithPreHalfScreenOrderInfo:userResultParams:params:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletPayMethods:extendParam:withBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager resetPayItemStatus:extend:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletRechargeRealName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletPayReorder]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager complianceAuthSuccessed]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager complianceAuthFailed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager smsGoBack]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager dealThirdPartyAuthorizationLogin:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager loginWithThirdPartyAuthorizationLoginError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager doReorder]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager fetchDirectUserInfoWithParram:Block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager statisticsNameNotMatchToConfirm]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager statisticsNameNotMatchToCancel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager leaveBDWalletPaySDKAnimate]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager orderInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bindWithoutPay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager intoType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager withdraw_sp_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager deposit_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager postInfoDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdwallet_mobilePassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager navRoot]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager payPostInfoItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager spItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager consumptionItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager openPayType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager orgAoumtItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bscNeedCallback]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager halfVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager authorizePayItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager originAppUserInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager originAppInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager currentSchemeUserInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager miscItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager forgetParentVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager externBindResultBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdwallet_isSetMobilePayPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager verifyCardElementBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager frontSelectPayblock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager hasBindedCard]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdwallet_completeCardFlag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager completeCardRecord]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager orderInfoEncode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdwallet_promotion_txt]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager externalVerPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bankListController]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdwallet_isPopPayOperateBank]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager requestType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager authorizeCashDeskVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager presentPayVCInside]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic serviceDefaultPayTypeUpdatePayItem:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic canToPayCashDeskOnceWithPayItem:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic updateCompositeTypeDataWithItem:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic updateBalanceEnoughDataWithItem:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic updateEasyDataWithItem:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic updateHasMoneyDataWithItem:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic updateBankStatus:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic updateOrderAmountInfoWithOldItem:withUser:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic checkCoupon:withComposite:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic checkCardListActivty:withCardList:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic firstAvailableCards:judgeSelectedComplete:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic enterCardElementsByCardRequestType:cardInfo:withRootVC:withMethodsOfPayItem:]", 4)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic enterCardElementsByCardRequestType:cardInfo:withRootVC:withMethodsOfPayItem:withLightAppParams:]", 5)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic enterCardListByCardRequestType:cardInfo:withRootVC:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic currentPayTypeDescWithPayItem:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic currentPayTypeDescIsNonePayType:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic currentPaySupportFingerWithPayItem:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic currentPaySupportFaceID]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic currentPaySupportFree]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic needPayMoney:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic currentPayVerType:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletMyTradeLogic sharedLogic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMyTradeLogic cancelTransAccount:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMyTradeLogic cancelTradeRequest:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMyTradeLogic recvAction:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMyTradeLogic tradeQuery:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMyTradeLogic orderDel:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMyTradeLogic orderDetail:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMyTradeLogic cancelTradeQuery]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMyTradeLogic queryRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferSendInfo recv_card_num]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferSendInfo sms_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletAddCardRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletAddCardRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletAddCardRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletAddCardRequest paramsDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletAddCardRequest requestType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplication rootController]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferSendSMSRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferSendSMSRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferSendSMSRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferSendSMSRequest recv_card_num]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo orderInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo cardInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo passwordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo postInfoDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo livenessCallbackKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo livenessCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo need_bind_card]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo passwordType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo postParamString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo first_sp_id_tpl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo sp_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo sp_uno]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo trans_need_to_pay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo seller_user_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo total_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo score_trans_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo score_pay_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo balance_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo balance_pay_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo consumptionItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo sub_bank_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo requestType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo intoType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo use_vcode_to_pay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo credit_rate]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo stage_number]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo each_repayment]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo easypay_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo pay_quota_balance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo couponID]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletRiskControlLogic shareInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRiskControlLogic statShowReAuthLiveness]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_NJKWebViewProgress startProgress]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_NJKWebViewProgress incrementProgress]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_NJKWebViewProgress completeProgress]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_NJKWebViewProgress checkIfRPCURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_NJKWebViewProgress respondsToSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_NJKWebViewProgress methodSignatureForSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_NJKWebViewProgress forwardInvocation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_NJKWebViewProgress loadingCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_NJKWebViewProgress currentURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFindPasswordCheckVcodeRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFindPasswordCheckVcodeRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFindPasswordCheckVcodeRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFindPasswordCheckVcodeRequest card_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFindPasswordCheckVcodeRequest sms_vcode]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWSchemeEngine shareEngine]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWSchemeEngine registerHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWSchemeEngine registerApp:scheme:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWSchemeEngine cacheConnectionForWaitingResponse:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWSchemeEngine application:openURL:sourceApplication:annotation:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BWSchemeEngine handleRequest:WithParameters:sourceApp:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletInterfaceRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletInterfaceRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletInterfaceRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletInterfaceRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferPayeeListRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferPayeeListRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferPayeeListRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayUnBindCardRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayUnBindCardRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayUnBindCardRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayUnBindCardRequest card_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayUnBindCardRequest phone_number]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayUnBindCardRequest mobile_pass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayDoPayRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayDoPayRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayDoPayRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayDoPayRequest requestType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayDoPayRequest payInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayDoPayRequest doPayRequestDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfoComplete true_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfoComplete certificate_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfoComplete certificate_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfoComplete valid_date]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo cardName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo card_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo cardNoBind]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo bind_flag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo needComplete]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo needCompleteDate]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo needCompleteCvv]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo needCompletePhone]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo needCompleteName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo needCompleteIdentify]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo needCompleteIdentifyType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo cardType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo channel_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo must_bank_sms]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo pay_need_sms_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo card_required_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo card_item_required]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo bankCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo bankName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo bankImageUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo bankBackgroundUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo accountBankCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo sub_bank_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo phone_number]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo identity_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo valid_date]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo trueName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo identity_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo unbund_card_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo unbund_card_enabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo vertifyCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo mobile_pass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo mobile_pass_confirm]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo needCheckVcode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo use_check_algo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo amount_before_channel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo card_algorithm_check]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo card_algorithm_check_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo protocolInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo bank_card_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo card_state]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo find_pwd_by_sms]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo unsupport_find_pwd_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo needOneCentBind]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo oneCentBindDesc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo sp_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo order_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo supportIdentityTypes]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo type_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo single_quota]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo channelQuota]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo mapItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo card_no_required]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo verify_code_required]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo certificate_code_required]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPaySetPwdWithPCPwdRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPaySetPwdWithPCPwdRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPaySetPwdWithPCPwdRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPaySetPwdWithPCPwdRequest passwordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_OpenBScanCRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_OpenBScanCRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_OpenBScanCRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_OpenBScanCRequest sendInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetChargeInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetChargeInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetChargeInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetChargeInfoRequest areaOperator]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetChargeInfoRequest priceArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetChargeInfoRequest mobile_num]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSchemeCoder encodeWithScheme:method:params:error:]", 4)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSchemeCoder decodeWithInfo:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 loadUploadUrlFromSettings]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 bdussFromAPP]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 headerDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 currentUploadContentByEvents:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 currentSyncFileContentByEvents:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 syncMemeDataToFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 syncFileDataToMem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 triggerUploadData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 triggerUploadDataByEvents:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 needUploadTrackerDataByEvents:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 generatAutoIncrentId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 uploadUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 eventsArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 trackerTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 trackerQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetAuthUserInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetAuthUserInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetAuthUserInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayResetPasswordRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayResetPasswordRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayResetPasswordRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayResetPasswordRequest passwordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletPointsMananger sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPointsMananger fetchPointsDetail:complete:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPointsMananger cancelPointRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPointsMananger cashBackReq]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSystemInfo shareSystemInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo stringInBase64FromData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo app_version]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSystemInfo macAddressMD5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo loadData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo updateCurrentNetPoint]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo detailNetPoint]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo diskCapacity]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo startNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo stopNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo networkChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo cuid_pass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo service_line]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo createUuid]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSystemInfo CUID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo FP]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo createAndUpdateFp]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo stopUpdatingLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo deviceMachine]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo locationManager:didUpdateLocations:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo locationManager:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo termType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo netPoint]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo displayName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo bundleId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo locationManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo netWork]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo reachabilityRef]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo reachabilitySerialQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo reachabilityObject]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletFPAuthenticator checkTouchIDContext]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletFPAuthenticator verify:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWalletFPAuthenticator policyDeviceOwnerUNLock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletFPAuthenticator systemEvaluatedPolicyDomainState]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerCondition propertyName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerCondition conditionValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerCondition eventId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerCondition eventIdQuery]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerCondition eventValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerCondition readConditionObjectProperties]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_CreateBScanCRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_CreateBScanCRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_CreateBScanCRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_CreateBScanCRequest sendInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletTransaferLogic sharedLogic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic cancelGetTransferInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic cancelGetTransferToAccountInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic submitTransferToBankOrder:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic submitTransferToAccountOrder:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic transferBankQuery:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic cancelTransferBankQuery]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic identifyCardInfo:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic cancelIdentifyCardInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic cancelGetPayeeList]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic cancelDeleteTransfer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic identifyCardAndNameWithPayeeName:bankCode:cardNo:payCardNo:idTpl:block:]", 6)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic cancelIdentifyCardAndName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic cancelGetPayMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic preCheckAccountWithUserName:fromHistory:idTpl:block:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic checkAccountName:account:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic requestOrderResultWithNotify:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic deleteTransferListItemWithIdTpl:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic updateTransferRecvStateWithQRCode:orderNo:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletTransaferLogic loginIdmd5]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletTransaferLogic readCacheTransferHistoryWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletTransaferLogic writeCacheTransferHistory:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletTransaferLogic mergeAndWriteTransferHistory:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic transferBankQueryReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic payeeListReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic transToAccountInfoReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic transToBankUserNameCheckRequestReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic deleteRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBalanceDetailRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBalanceDetailRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBalanceDetailRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBalanceDetailRequest balance_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBalanceDetailRequest total_count]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBalanceDetailRequest transInfoItemArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletFileCache sharedCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache cachedFileCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache cachedFilesName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache hasCachedForFileName:ext:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache readFileDataFromCacheForFileName:ext:withFinshiedBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache writeFileToCacheWithFileData:fileName:ext:withFinshiedBlock:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache renameCachedFileWithOriginFileName:originFileExt:toNewFileName:newFileExt:finshiedBlock:]", 5)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache cachePathForFileCachedName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache cachedFilePathForName:withExt:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache writingFilePathForName:withExt:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache fileNameForName:withExt:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache createPathIfNecessary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache cachePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache purgeCaches]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache clearDiskCacheIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletFileCache clearDiskCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache removeExpiredFiles]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache removeSpecifiedFileForName:ext:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache disableDiskCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache ioQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetMobileNoOfAccountRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetMobileNoOfAccountRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetMobileNoOfAccountRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPaymentResultFeedbackInfo modelContainerPropertyGenericClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPaymentResultFeedbackInfo question_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPaymentResultFeedbackInfo score_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPaymentResultFeedbackInfo entry_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPaymentResultFeedbackInfo entry_uri]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletScanBarcodeManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletScanBarcodeManager fetchScanBarcodeWhiteList:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletScanBarcodeManager fetchScanBarcodeShortUrl:WithBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletScanBarcodeManager cancelRequests]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletMemoryCacheManager shareManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCacheManager cacheForOwner:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCacheManager touchKey:inCache:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCacheManager findMetaByKey:andCache:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCacheManager removeMeta:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCacheManager didReceiveMemoryWarning:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCacheManager memoryCache:didAddKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCacheManager memoryCache:didReadKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCacheManager memoryCache:didRemoveKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCacheManager cacheMap]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCacheManager cacheMetas]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle dealDetectionResult:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle saveData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle predicateWithRegular:Result:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle containHostSpecialSymbolInUrl:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle dealShortUrl:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle dealUrl:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle dealPlainText:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle dealOrder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle dealNativeInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle dealError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle dealTransferInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle fetchScanBarcodeShortUrl:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle fetchScanBarcodeShortUrlCallback:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle scanedResult]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle shortUrlModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletWebViewDocumentVCDismissInjection flagPresentDocumentVC]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletContext sharedContext]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletContext currentApplication]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletContext startApplication:params:animated:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletContext exitApplication]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletContext findServiceByName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletContext registerService:forName:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletContext unregisterServiceForName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletContext exitAllApplication]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletContext statusBarStyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletContext applicationManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletContext serviceManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletServiceInfo lazyLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletChannelBankListRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletChannelBankListRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletChannelBankListRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletChannelBankListRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletChannelBankListRequest paramsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletChannelBankListRequest sp_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletChannelBankListRequest request_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletChannelBankListRequest backEndServiceTypeMark]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletScanBarcodeShortUrlRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletScanBarcodeShortUrlRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletScanBarcodeShortUrlRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletScanBarcodeShortUrlRequest shortUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletIdentifyIDPhotoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletIdentifyIDPhotoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletIdentifyIDPhotoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletIdentifyIDPhotoRequest imageString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTFindPasswordCheckVCodeRsp sms_token]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDPopoverCellInfo iconUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDPopoverCellInfo iconName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDPopoverCellInfo titleName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBankInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBankInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBankInfoRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBankInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBankInfoRequest cardNo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBankInfoRequest backEndServiceTypeMark]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBankInfoRequest backEndRequestTypeMark]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletDiscountInfo ID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletDiscountInfo activity_description]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletDiscountInfo seller_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletDiscountInfo final_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletDiscountInfo share_discount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewReqEvent updateContentByRequest:isStart:byConfig:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewReqEvent startPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewReqEvent endPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewReqEvent eventDur]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewReqEvent eventValueQuery]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewReqEvent requestValueQuery]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewReqEvent hashKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetPayMethodRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetPayMethodRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetPayMethodRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetPayMethodRequest requestInfoDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTRequest allParamters]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTRequest loadCommonParamters]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTRequest loadContractParamters]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTRequest httpMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTRequest stringEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTRequest responseStringEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTRequest requestBaseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTRequest responeObjectClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferIdentifyCardResponse bank_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferIdentifyCardResponse bank_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferIdentifyCardResponse big_logourl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferIdentifyCardResponse small_logourl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager startLauncherApplication]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager launcherApplication]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager applicationForName:params:createIfNotExists:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager startApplication:params:animated:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager currentApplication]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager exitApplication:animated:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager exitApplication:animated:options:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager applicationWillTerminate:animated:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager exitApplicationAtIndex:animated:options:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager exitAllApplication]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager applicationStack]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager applicationFactory]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager naviVC]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletRealNameRequstManager shareInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameRequstManager uploadImageWith:withCallBack:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameRequstManager cancelUploadImageRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameRequstManager authApplyWith:withCallBack:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameRequstManager cancelAuthApplyRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderMenu type_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderMenu type_value]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeGoodsDetail sp_icon]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeGoodsDetail sp_title]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeGoodsDetail query_goods_url_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeGoodsDetail goods_url]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletTradeProgress modelContainerPropertyGenericClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeRefundRelateOrder query_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeRefundRelateOrder query_str]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletTradeTransData modelContainerPropertyGenericClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData goods_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData goods_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData goods_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData goods_details]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData link_button]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData order_id_unique]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData order_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData order_subtype]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData order_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData pay_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData pay_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData scene_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData state_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData sp_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData sp_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData service_title]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData service_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData trans_type_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData trans_di]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData relate_order]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData recv_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData recv_bank_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData recv_card_num]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData fee_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData off_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData received_flag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData recv_mobile]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData payee_recv_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData save_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData mobile_number]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData pay_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPreDirctRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPreDirctRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPreDirctRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPreDirctRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPreDirctRequest orderInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetCardInfoResult cardInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetCardInfoResult easypay_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetCardInfoResult sms_length]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetCardInfoResult sms_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetCardInfoResult riskControl]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletAlertWindow shareInstance:title:message:confirmStr:confirmBlock:]", 5)}, 0);
setTimeout(function(){hookObjC("+[BDWalletAlertWindow shareInstance:title:message:confirmStr:cancelStr:confirmBlock:cancelBlock:]", 7)}, 0);
setTimeout(function(){hookObjC("+[BDWalletAlertWindow shareInstance:title:message:confirmStr:cancelStr:otherStr:confirmBlock:cancelBlock:otherBlock:]", 9)}, 0);
setTimeout(function(){hookObjC("+[BDWalletAlertWindow alertWindowHidden]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAlertWindow clearData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAlertWindow addAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAlertWindow addAlertAction:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAlertWindow confirmBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAlertWindow cancelBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAlertWindow otherBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAlertWindow confirmStr]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAlertWindow cancelStr]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAlertWindow otherStr]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSafePayViewManager safepay_createBorderField:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSafePayViewManager safepay_applyBorderField:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CAGradientLayer bdwt_gradientLayerWithFrame:colors:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayRequest requestType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayRequest requestUseGBK]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequestAuthAppleySMSRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequestAuthAppleySMSRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequestAuthAppleySMSRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequestAuthAppleySMSRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAuthStep modelCustomTransformFromDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWTFindPasswordCheckVcodeRequest requestBaseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTFindPasswordCheckVcodeRequest loadContractParamters]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTFindPasswordCheckVcodeRequest card_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTFindPasswordCheckVcodeRequest sms_vcode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic hasCachedKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic generateLocalCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic cachedBankArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic saveBankArray:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic clearCachedBankArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic saveOfflineToken:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic createOfflineTokenWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic cancelOfflineTokenRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo resultCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo resultDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo retMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo order_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo bank_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo payTypeDesc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo errContent]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo use_vcode_to_pay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo orgAoumtItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo payResultShowInfoItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo riskControl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo payCompliance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo cardItemRequired]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo couponList]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo pay_result_page_promot_txt]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo pure_sign]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo contract_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo sign_success_tips]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPopUtil keyWindow]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetUserOptionRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetUserOptionRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetUserOptionRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[DZWeakProxy proxyWithTarget:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DZWeakProxy forwardingTargetForSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DZWeakProxy forwardInvocation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DZWeakProxy methodSignatureForSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DZWeakProxy respondsToSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DZWeakProxy conformsToProtocol:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DZWeakProxy debugDescription]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferGetPayMethodRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferGetPayMethodRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferGetPayMethodRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferGetPayMethodRequest cardNo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletClient sendEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionGetQRCodeResult firstopen_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionGetQRCodeResult qrcode_title]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletRunServiceOnce runAllService]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletRunServiceOnce configPath]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletTradeTransInfo modelContainerPropertyGenericClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransInfo group_di]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransInfo group_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransInfo trans_data]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletTradeOrderListResult modelContainerPropertyGenericClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderListResult order_type_menu]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderListResult trans_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderListResult through_data]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSubmitTransferOrderRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSubmitTransferOrderRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSubmitTransferOrderRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSubmitTransferOrderRequest cashdeskParam]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletChannelBankListResult creditList]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletChannelBankListResult debitList]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_CommonWebViewTextInputStyle resetDefaultData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_CommonWebViewTextInputStyle paddingBottom]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSecurityCenterHomeRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSecurityCenterHomeRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSecurityCenterHomeRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSetPayOrderRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSetPayOrderRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSetPayOrderRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSetPayOrderRequest reqParamDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceRechargeQuotaRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceRechargeQuotaRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletCouponManager shareManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponManager deleteCouponWithCoupon:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponManager cancelRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponManager listRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponManager detailRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserResultInfo resultCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserResultInfo resultDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserResultInfo retMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserResultInfo userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserResultInfo orderInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserResultInfo accountInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserResultInfo miscItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserResultInfo authorizePayItem]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletUserInfoManager shareUserInfoManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager loginToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager sToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager sTokenAndBudss]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager logout:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager synFetchUserInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager fetchUserInfoWithPrams:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager fetchUserInfo:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager currentUserInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager updateCurrentUserInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager updateMemoryCacheUserInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager cancelUserInfoRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager onLoginChanaged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager firstAvailableCards:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager updateCookies]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager fetchVifyCardUserInfo:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager receiveCouponRequest:couponType:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager currentRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferRecvCountRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferRecvCountRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferRecvCountRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager sendVcode:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager pay:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager bscPay:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager sendSMS:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager cancelSendSMSRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager postForPay:payResultInfo:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager createPostForPayRepeatTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager resetPostFoPayRepeatFlag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager buildCalculatingMoneyRequest:payInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager calculatingMoney:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager cancelCaluatingMoneyRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager doWithdraw:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager saveFeedback:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager repeatTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager repeatFlag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager sendSMSRequest]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletMemoryCacheMeta metaWithKey:cache:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCreateAndUpdateFP requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCreateAndUpdateFP requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCreateAndUpdateFP requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferBankQueryRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferBankQueryRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferBankQueryRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD handleGraceTimer:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD animationFinished:finished:context:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD launchExecution]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD updateIndicators]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD layoutSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD registerForKVO]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD unregisterFromKVO]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD observableKeypaths]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD observeValueForKeyPath:ofObject:change:context:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD registerForNotifications]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD unregisterFromNotifications]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD deviceOrientationDidChange:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD animationType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD labelText]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD xOffset]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD yOffset]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD dimBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD taskInProgress]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD graceTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressIndicator updateDots:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressIndicator dotCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressIndicator dotViews]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressIndicator dotColors]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPushNotificationImpl registerPushService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPushNotificationImpl applicationDidRegisterRemoteNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPushNotificationImpl applicationDidReceiveRemoteNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPushNotificationImpl pushProviderServerURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPad layoutSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPad updateFrame]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPad addNotificationsObservers]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPad textDidBeginEditing:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPad textDidEndEditing:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPad changeText:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPad longPressGestureRecognizerAction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPad selectedRange:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPad exchangeRandWithUpdateFrame:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPad numberButtons]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPad digitType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameConfirmBankCardRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameConfirmBankCardRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameConfirmBankCardRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceWithdrawalsRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceWithdrawalsRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceWithdrawalsRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceWithdrawalsRequest payInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckResultRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckResultRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckResultRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckResultRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckResultRequest paramString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletReceiveCouponRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletReceiveCouponRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletReceiveCouponRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletReceiveCouponRequest activity_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletReceiveCouponRequest activity_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletVcodeInfo payInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletVcodeInfo bindWithoutPay]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletMobileRechargeManager sharedMobileRechargeManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMobileRechargeManager fetchMobileRechargeOrderNo:chargeType:complete:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWAspectTracker trackedClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAspectTracker selectorNames]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAspectTracker parentEntry]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWAspectIdentifier identifierWithSelector:object:options:block:error:]", 5)}, 0);
setTimeout(function(){hookObjC("-[BWAspectIdentifier invokeWithInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWAspectIdentifier blockSignature]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAspectsContainer hasAspects]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAspectsContainer addAspect:withOptions:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWAspectsContainer removeAspect:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWAspectsContainer beforeAspects]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAspectsContainer insteadAspects]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAspectsContainer afterAspects]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAspectInfo originalInvocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletLittleProgressHUD addSubLayers]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletLittleProgressHUD addTextLayer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletLittleProgressHUD addIndicatorLayer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletLittleProgressHUD indicatorLayer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferIdentifyBank requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferIdentifyBank requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferIdentifyBank requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferIdentifyBank cardInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSubmitTransferToAccountOrderRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSubmitTransferToAccountOrderRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSubmitTransferToAccountOrderRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSubmitTransferToAccountOrderRequest cashdeskParam]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToAccountPrecheckRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToAccountPrecheckRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToAccountPrecheckRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToAccountPrecheckRequest from_payeelist]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToAccountPrecheckRequest id_tpl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCryptoResult resText]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCrypto symmetricEncryptDataUsingAlgorithm:data:key:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCrypto symmetricDecryptDataUsingAlgorithm:data:key:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCrypto createCryptorUsingAlgorithm:data:key:isCrypted:]", 4)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCrypto rsaEncryptDataUsingData:publicKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCrypto rsaDecryptDataUsingData:privateKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWTKeepAliveConfig modelCustomPropertyMapper]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTKeepAliveConfig nextGetPostSpace]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTKeepAliveConfig serverTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWallet_FileManager sharedFileManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_FileManager qRFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_Barcode charToInt:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_Barcode compute:withType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_Barcode addQuietZone:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_Barcode digitToBmpRenderer:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_Barcode oneDimBarcode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_Barcode qRBarcode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_Barcode oneDimCode]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWallet_GenBarcodes genBarcode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWallet_GenBarcodes genQRCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer verifyWithAPIKey:algorithmType:andLocalLicenceFile:]", 3)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer verifyWithToken:algorithmType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer verifyWithLicenseFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer verifyWithLicenseInMainBundle]", 0)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer verifyWithLicenseInDocDir]", 0)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer verifyLicenceWithFile:]", 1)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer verifyLicense:]", 1)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer verifyIdentityItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer decryptLicenseFile:]", 1)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer decryptLicense:]", 1)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer bundleId]", 0)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer licenseLoader:didSucceedWithLicenseData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer licenseLoader:didFailedWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer apiKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer localLicencePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer algorithmType]", 0)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer licenseLoader]", 0)}, 0);
setTimeout(function(){hookObjC("+[LICPathUtils documentRootPath]", 0)}, 0);
setTimeout(function(){hookObjC("+[LICPathUtils libraryRootPath]", 0)}, 0);
setTimeout(function(){hookObjC("+[LICPathUtils licensePath]", 0)}, 0);
setTimeout(function(){hookObjC("+[LICStringUtil trimWhitespaceOfString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[LICStringUtil URLEncodedString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[LicenseLoader loadLicenseWithAPIKey:algorithmType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[LicenseLoader identyWithApiKey:algorithmType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[LicenseLoader requestDataWithItendityStruct:]", 1)}, 0);
setTimeout(function(){hookObjC("+[PathUtils filePathInModelBundle:]", 1)}, 0);
setTimeout(function(){hookObjC("+[PathUtils modelRootPath]", 0)}, 0);
setTimeout(function(){hookObjC("+[PathUtils detectModelPath]", 0)}, 0);
setTimeout(function(){hookObjC("+[PathUtils alignModelPathWithType:]", 1)}, 0);
setTimeout(function(){hookObjC("+[PathUtils alignMeanPath]", 0)}, 0);
setTimeout(function(){hookObjC("+[PathUtils parsingModel3]", 0)}, 0);
setTimeout(function(){hookObjC("+[PathUtils parsingParam3]", 0)}, 0);
setTimeout(function(){hookObjC("+[PathUtils parsingModel7]", 0)}, 0);
setTimeout(function(){hookObjC("+[PathUtils parsingParam7]", 0)}, 0);
setTimeout(function(){hookObjC("+[PathUtils licensePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[LivenessState mouthStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[LivenessState yawAngles]", 0)}, 0);
setTimeout(function(){hookObjC("-[LivenessState pitchAngles]", 0)}, 0);
setTimeout(function(){hookObjC("+[FaceSDK sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK canWork]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK checkAlignModelInitWithType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK alignFaceInImage:withMethodType:andFaceRect:andOutputFaceShape:andNumOfPoints:andScore:]", 6)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK landmarkNumberWithType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK trackFaceInImage:withMethodType:andFaceShape:andNumOfPoints:andScore:]", 5)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK headPostEstimationWithFaceShape:andImgDataRowNum:andImgColumNum:andNumOfPoints:]", 4)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK headPostEstimationWithImage:andFaceShape:andNumOfPoints:]", 3)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK livenessDetectInImage:andFaceShape:andNumOfPoints:andFlag:andOutPutState:]", 5)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK sdmAlignModelInited]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK cdnnAlignModelInited]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK outlineParsingModelInited]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK featureParsingModelInited]", 0)}, 0);
setTimeout(function(){hookObjC("+[FaceVerifier sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceVerifier canWork]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceVerifier cropFaceEnlargeRatio:]", 1)}, 0);
setTimeout(function(){hookObjC("-[FaceVerifier livenessState]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceVerifier trackedFaceInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceVerifier clearTrackedFaces]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceVerifier httpString]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceVerifier regImages]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceVerifier generateHttpStringWithAction:andUserName:andAppId:]", 3)}, 0);
setTimeout(function(){hookObjC("-[FaceVerifier prepareDataWithImage:andActionType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[FaceVerifier ptsFilePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceVerifier alignModelInited]", 0)}, 0);
setTimeout(function(){hookObjC("+[IDLImageHelper newBitmapRGBA8ContextFromImage:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils md5HexDigest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils compressGZip:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils cpuUsageArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils cpuUsageInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils totalMemoryBytes]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils freeMemoryBytes]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils totalDiskSpaceBytes]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils freeDiskSpaceBytes]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils subDate:earlierDate:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils replaceUnicode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils utf8StringEncoding:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils formatStackFrame:frameIndex:report:lp64:]", 4)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils generateLiveReportWithThread]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils phoneModel]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabConfig sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig appKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig appVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig debugEnable]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig onlyWifiUploadEnable]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig crashReportEnable]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig colloctCaughtExceptionEnable]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig catchANREnable]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig eventMonitorEnable]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig stackSymbolsEnable]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig anrToplimitTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig ANRTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig ANRMonitorInterval]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig exceptionMonitorInterval]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig buildNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig appUserName]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig allowFailureCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig CrashAttachLogDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig pagePathArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig logcatArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig eventArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig urlArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabReachability reachabilityWithHostName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabReachability reachabilityWithAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabReachability reachabilityForInternetConnection]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabReachability startNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabReachability stopNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabReachability networkStatusForFlags:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabReachability connectionRequired]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabReachability currentReachabilityStatus]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabBaseData sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData recordId]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData batteryRate]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData appKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData osVN]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData appVN]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData appVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData sdkVN]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData appName]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData buildNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData cpuInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData diskInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData memoryInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData netType]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData pkgName]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData occurrencePage]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData appCurConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData usersCustom]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData developerName]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData networkInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData otherRunAppInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData clientIp]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData systemName]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabCrashReportOperate uploadCrashWithBaseURL:URI:parameters:crashFileFullPath:]", 4)}, 0);
setTimeout(function(){hookObjC("+[CrabCrashReportOperate uploadCaughtExceptionWithURL:URI:parameters:exceptionFileFullPath:]", 4)}, 0);
setTimeout(function(){hookObjC("+[CrabCrashReportOperate uploadCaughtException:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabCrashReportOperate uploadCrash:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabCrashReportOperate addNotificationCenterObserver:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabCrashReportOperate uploadLaunchCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabQueryStringPair URLEncodedStringValueWithEncoding:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabHTTPClient clientWithBaseURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient registerHTTPOperationClass:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient unregisterHTTPOperationClass:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient defaultValueForHeader:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient clearAuthorizationHeader]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient requestWithMethod:path:parameters:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient multipartFormRequestWithMethod:path:parameters:constructingBodyWithBlock:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient HTTPRequestOperationWithRequest:success:failure:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient enqueueHTTPRequestOperation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient cancelAllHTTPOperationsWithMethod:path:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient enqueueBatchOfHTTPRequestOperationsWithRequests:progressBlock:completionBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient enqueueBatchOfHTTPRequestOperations:progressBlock:completionBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient postPath:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient putPath:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient deletePath:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient patchPath:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient stringEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient parameterEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient registeredHTTPOperationClassNames]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient defaultHeaders]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient operationQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabMultipartFormData requestByFinalizingMultipartFormData]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabMultipartFormData appendBoundary]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabMultipartFormData appendPartWithHeaders:body:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CrabMultipartFormData appendPartWithFormData:name:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CrabMultipartFormData appendPartWithFileData:name:fileName:mimeType:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CrabMultipartFormData appendPartWithFileURL:name:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CrabMultipartFormData appendString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabMultipartFormData appendData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabMultipartFormData stringEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabMultipartFormData outputStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabMultipartFormData temporaryFilePath]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabOpenUDID _setDict:forPasteboard:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CrabOpenUDID _getDictFromPasteboard:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabOpenUDID _generateFreshOpenUDID]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabOpenUDID valueWithError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPRequestOperation hasAcceptableStatusCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPRequestOperation hasAcceptableContentType]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabHTTPRequestOperation acceptableStatusCodes]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabHTTPRequestOperation addAcceptableStatusCodes:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabHTTPRequestOperation acceptableContentTypes]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabHTTPRequestOperation addAcceptableContentTypes:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabHTTPRequestOperation canProcessRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPRequestOperation connection:didReceiveResponse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPRequestOperation HTTPError]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPRequestOperation successCallbackQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPRequestOperation failureCallbackQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPRequestOperation totalContentLength]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPRequestOperation offsetContentLength]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences saveCrabDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences removeCrabDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences saveObject:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences saveBool:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences saveInteger:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences boolForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences integerForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences dictionaryForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences objectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences removeObjectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences clearLaunchCount]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences addLaunchCount]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences addFailureCount:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences removeAllFailureCount]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences removeFailureCount:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences removeCrashFileParametersForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences removeAllCrashFileParameters]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabANRMonitor sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabFileOperate createDirectoryOnDocumentWithSubDirectory:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabFileOperate productFileFullPathWithSubDirectory:fileName:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CrabFileOperate removeFile:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabFileOperate removeFileAndOtherData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabFileOperate handleCrashReportWithCrabDir:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabFileOperate handleUncaughtExceptionWithCrabDir:exception:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CrabFileOperate saveData:parameters:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CrabANRInfo sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabANRInfo anrType]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabANRInfo anrReason]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabANRInfo mainThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabANRInfo allThreads]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabANRInfo otherInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabHttpSender postData:baseUrl:path:]", 3)}, 0);
setTimeout(function(){hookObjC("+[CrabHttpSender postANRData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabHttpSender postExceptionData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabCoreNetStatus allocWithZone:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabCoreNetStatus sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabCoreNetStatus currentNetWorkStatus]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabCoreNetStatus currentNetWorkStatusString]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabCoreNetStatus telephonyNetworkInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabCoreNetStatus currentRaioAccess]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabCoreNetStatus statusWithRadioAccessTechnology]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabCoreNetStatus technology2GArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabCoreNetStatus technology3GArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabCoreNetStatus technology4GArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabCoreNetStatus coreNetworkStatusStringArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabThreadSafeArray addObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabThreadSafeArray removeObjectAtIndex:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabThreadSafeArray objectAtIndex:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabJSONRequestOperation responseJSON]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabJSONRequestOperation acceptableContentTypes]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabJSONRequestOperation canProcessRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabURLConnectionOperation networkRequestThreadEntryPoint:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabURLConnectionOperation networkRequestThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation inputStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation responseString]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation operationDidStart]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation cancelConnection]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation connection:canAuthenticateAgainstProtectionSpace:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation connection:didReceiveAuthenticationChallenge:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation connection:willSendRequest:redirectResponse:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation connection:didReceiveResponse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation connection:didReceiveData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation connectionDidFinishLoading:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation connection:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation connection:willCacheResponse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation runLoopModes]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation responseData]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation totalBytesRead]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation outputStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation backgroundTaskIdentifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation uploadProgress]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation downloadProgress]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation authenticationAgainstProtectionSpace]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation authenticationChallenge]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation cacheResponse]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation redirectResponse]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabExceptionInfo sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabExceptionInfo exceptionType]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabExceptionInfo exceptionReason]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabExceptionInfo exceptionThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabExceptionInfo allThreads]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabExceptionInfo otherInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabExceptionInfo exceptionUserInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabEventMonitor sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabCustomLog logEnable]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabCustomLog detailLogEnbale]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBoby awakeFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFilterTramp blockBarb:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSFilterTramp analyzeArum:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSFilterTramp devChroseMarg:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSFilterTramp awakeBroom:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSFilterTramp blockCante]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFilterTramp sendTramp:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSFilterTramp fetchChince]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFilterTramp pickCoco]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFilterTramp touchLindo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFilterTramp fetchEveni:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSDKLib sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSDKLib pfmSzProptBroom]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSDKLib startSDKEngineWithCUID:hostAppCUID:appKey:secret:notifyHandler:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SSDKLib StartSDKEngineWithCUID:hostAppCUID:AppKey:Secret:CompletionNotify:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SSDKLib ActionHelperWithEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSFaniBusle sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFaniBusle startCally:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSFaniBusle generateDaffi:toFile:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSFaniBusle sendLaver:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSFaniBusle requestCone]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkurBusle touchBoby]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkurBusle touchMimosa:getAmary:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSLarkurBusle generateBroom]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkurBusle prefBoby:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSLarkurBusle encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSLarkurBusle globeLoist]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLindoLarkur prefHelper]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLindoLarkur fetchJesey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLindoLarkur larkurGuern]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLindoLarkur carnaAlpha]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLindoLarkur eveniArum]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSMarg requestFever:thread:buildFilter:context:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SSMarg sendAttr:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSArumCoco listLupin]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSArumCoco awakeFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSCocoLaver sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCocoLaver prefIris:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSCocoLaver awakeGayter]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCocoLaver requestCarna]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCocoLaver buildSymhub:fetchColu:awakeMarg:defaultValue:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SSCocoLaver prefTramp]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCocoLaver listHyacinth]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCocoLaver prefQinchu]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCocoLaver checkForta]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCocoLaver organizeMarg]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSSymhubBarb sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFlingo buildQinchu]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFlingo fetchFlame]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFlingo URLSession:didReceiveChallenge:completionHandler:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SSFaniBoby touchForta]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFaniBoby flyLisus]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFaniBoby sendGadu:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSFaniBoby objectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSFaniBoby serviceName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFaniBoby jeseyBusle]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSColu devBlueth]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSColu pickCone:callback:context:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SSColu organizeFlingo:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSGaduChince reachabilityWithHostName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSGaduChince sendForta:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSGaduChince reachabilityWithAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSGaduChince reachabilityForInternetConnection]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSGaduChince reachabilityForLocalWiFi]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince devCoco]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince organizeCoco]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince organizeChince]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince listCally]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince organizeLaver]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince connectionRequired]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince beatLoist]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince prepareCorner]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince currentReachabilityStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince awakeAttrLindo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince pickCally]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince checkFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince devColuAttr:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince attrGuern]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince canteBeller]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSCone sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCone analyzeDaffi]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCone beatFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCone blockTango]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCone blockLaver]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCone pickJesey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSQinchuGayter sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSChalo sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSChalo awakeFever:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSChalo generateAlpha]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSChalo awakeTramp]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSChalo startLaver:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSChalo touchFlameFani:generateBarb:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSChalo analyzeAfroca:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSChalo touchAttr:generateBarb:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSChalo flyDaffi:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSChalo analyzeBlee]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSChalo blockColu]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSChalo flyAttr]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLaver requestGadu]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLaver awakeFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLaver tangoGuerns]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBluethBloom generateLoist]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBluethBloom beatCoco]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBluethBloom awakeFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBluethBloom barbLaver]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSGrapeGrape sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGrapeGrape touchCante]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGrapeGrape analyzeTramp:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSGrapeGrape checkBoby:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSGrapeGrape fetchChince]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGrapeGrape flyColu]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGrapeGrape analyzeMimosa:startGlobe:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSGrapeGrape touchFortaLisus:startGlobe:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSBloom organizeFani]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBloom awakeFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBloom jeseyGlobe]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSAmaryEveni sendCoco:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSAmaryEveni prefGadu]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSAmaryEveni fetchAfroca]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSAmaryEveni analyzeFever]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSAmaryEveni sendDaffi]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSAmaryEveni prepareFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSAmaryEveni devFever]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSAmaryEveni listGayter]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBarbBlueth listTramp]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBarbBlueth awakeFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBarbBlueth symhubSymhub]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBarbBlueth gayterQinchu]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSFilterFever fetchBlee:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSLupin toString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLupin blockBeller]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLupin encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSLupin gayterAttr]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSArum sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSArum listCante:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSArum organizeFlame:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSArum checkEveni]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSArum fetchIris]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSPropt pickFlingo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSPropt requestLobaw]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSPropt blockSymhub]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSPropt alphaFever]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSPropt proptQinchu]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSPropt eveniFani]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSPropt bellerAlpha]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSPropt chaloDaffi]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSPropt barbBeller]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSPropt busleCone]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSPropt resultArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSGuern sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGuern appKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGuern attrSymhub]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGuern hyacinthLupin]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGuern coneCarna]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGuern jeseyDaffi]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGuern callyBloom]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGuern amaryIris]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGuern qinchuCorner]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGuern feverSymhub]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGuern proptGadu]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGuern hostAppCUID]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSGayter listFlingo:carnaAlpha:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SSGayter startBloom:carnaAlpha:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SSGayter flyJesey:carnaAlpha:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSBlee buildQinchu]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBlee jeseyGlobe]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSMimosa sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSMimosa faniAfroca]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSMimosa flyGadu:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSMimosa fortaChalo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSCanteGayter sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCanteGayter prepareAmary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSBarb analyzeFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBarb awakeFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSColuQinchu sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSColuQinchu fetchTango]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSColuQinchu beatEveni]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSColuQinchu startFever]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLindo listBoby:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSLindo sendBoby:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSLindo buildTramp:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSLindo checkChalo:withCompletionBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSLindo generateMarg]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLindo organizePropt]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLindo blockGadu:prepareLaver:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSLindo devIris:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSLindo retryCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLindo cornerAlpha]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBluethArum generateMarg]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBluethArum buildQinchu]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBluethArum feverGrape]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSCarna sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCarna fetchAmary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCarna sendMimosa]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCarna beatFlame]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCarna fetchFilter]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCarna touchHelper]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSAmaryJesey pickConeFlame:result:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSForta listFever]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSForta organizeJesey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSForta sendGadu:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSForta objectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSLisus sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLisus blockJesey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSLisus laverMimosa]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSIris touchArum:toIndex:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSIris flyAlpha:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSEveniCarna prepareForta]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSEveniCarna requestBeller]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSEveniCarna blockFilter:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSEveniCarna analyzeChrose:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSEveniCarna generateBeller:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSEveniCarna requestCante:startCarna:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SSEveniCarna pickCante:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSEveniCarna touchCarna]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSChrose sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSChrose blockJesey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSChrose laverMimosa]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBusle analyzeBeller]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBusle awakeFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSFlameLindo touchBloom]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSFlameLindo buildBarb:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSFlameLindo touchLarkur:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSFlameLindo sendLaverTango]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFlameLindo hostName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSQinchuPropt blockJesey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSQinchuPropt laverMimosa]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSLarkur sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkur awakeFilter]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkur trampCone]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkur larkurBroom]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkur afrocaPropt]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkur barbEveni]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkur bleeCally]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkur busleColu]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkur afrocaMarg]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkur filterLobaw]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkur hyacinthGuern]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkur flingoAttr]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFlameCally toString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFlameCally blockBeller]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFlameCally listJesey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFlameCally symhubBlee]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFlameCally cornerQinchu]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLoist checkCarna:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSLoist sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSAttr sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSAttr blockBroom:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSAttr fetchChalo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSAttr analyzeLobaw:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSAttr devTangoForta]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSAttr touchLobawPropt]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychain passwordForService:account:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychain passwordForService:account:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychain passwordDataForService:account:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychain passwordDataForService:account:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychain deletePasswordForService:account:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychain deletePasswordForService:account:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychain allAccounts]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychain allAccounts:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychain accountsForService:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychain accountsForService:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychain accessibilityType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPICUIDKeychainQuery save:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPICUIDKeychainQuery deleteItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPICUIDKeychainQuery fetchAll:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPICUIDKeychainQuery fetch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPICUIDKeychainQuery passwordObject]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychainQuery errorWithCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPICUIDKeychainQuery passwordData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPICUIDKeychainQuery accessGroup]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPICUIDKeychainQuery synchronizationMode]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPICUIDKeychainQuery accessibilityType]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID createUDID]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID generateUDID]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID saveSapiIdfa:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID fetchSapiIdfa]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID keychainQueryWithService:account:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID accessGroup]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID teamIdentifier]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID safeReadIDFAString]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID xorDecryptedString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID stringWithBase64EncodedString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID dataWithBase64EncodedString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID encryptString:keyString:ivString:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID encryptData:key:iv:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID decryptData:keyString:ivString:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID decryptData:key:iv:]", 3)}, 0);
setTimeout(function(){hookObjC("+[PLCrashSignalHandler sharedHandler]", 0)}, 0);
setTimeout(function(){hookObjC("+[PLCrashSignalHandler resetHandlers]", 0)}, 0);
setTimeout(function(){hookObjC("-[PLCrashSignalHandler registerHandlerWithSignal:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PLCrashSignalHandler registerHandlerForSignal:callback:context:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[PLCrashMachExceptionServer serverThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[PLCrashMachExceptionServer exceptionPortWithMask:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[PLCrashProcessInfo currentProcessInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[PLCrashProcessInfo processID]", 0)}, 0);
setTimeout(function(){hookObjC("-[PLCrashProcessInfo processName]", 0)}, 0);
setTimeout(function(){hookObjC("-[PLCrashProcessInfo parentProcessID]", 0)}, 0);
setTimeout(function(){hookObjC("+[PLCrashHostInfo currentHostInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[PLCrashHostInfo darwinVersion]", 0)}, 0);
setTimeout(function(){hookObjC("+[PLCrashMachExceptionPort exceptionPortsForTask:mask:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[PLCrashMachExceptionPort exceptionPortsForThread:mask:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PLCrashMachExceptionPort registerForTask:previousPortSet:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PLCrashMachExceptionPort registerForThread:previousPortSet:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PLCrashMachExceptionPort server_port]", 0)}, 0);
setTimeout(function(){hookObjC("-[PLCrashMachExceptionPortSet countByEnumeratingWithState:objects:count:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PLCrashMachExceptionPortSet asyncSafeRepresentation]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeCornerLogic shouldShowBusinessCorner:isDefaultData:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeCornerLogic shouldTabShowBusinessCorner:isDefaultData:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeCornerLogic updateBusinessCornerTimestamp:key:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeCornerLogic hasBusinessCorner:isDefaultData:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeCornerLogic businessCornerTimestampWithKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeCornerLogic loginIdMd5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadPushFlagRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadPushFlagRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadPushFlagRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadPushFlagRequest requestUseGBK]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadPushFlagRequest uploadResult]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadPushFlagRequest openFlag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD handleGraceTimer:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD animationFinished:finished:context:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD launchExecution]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD updateIndicators]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD layoutSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD registerForKVO]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD unregisterFromKVO]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD observableKeypaths]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD observeValueForKeyPath:ofObject:change:context:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD registerForNotifications]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD unregisterFromNotifications]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD deviceOrientationDidChange:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD animationType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD xOffset]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD yOffset]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD dimBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD graceTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD taskInProgress]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD labelText]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_MobStat startMobStat]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_MobStat logEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_MobStat eventStart:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_MobStat eventEnd:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_MobStat pageviewStartWithName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_MobStat pageviewEndWithName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_MobStat logEvent:eventLabels:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_MobStat crashCallBack]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceItemList loadLocalData]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_WalletServiceItemList deleteAllPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceItemList resultDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceItemList retMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceItemList front_page_md5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceItemList groupList]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceItemList pop_window_md5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceItemList pop_List]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceItemList skin_md5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceItemList skinModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceItemList couponModel]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_CreditTimeStampManager updateItemTimestampAt:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_ScreenLockServiceImp sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp createPasscodeBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp verifyPasscode:isReLogin:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp updatePasscodeBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp cleanPasscodeBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp hasPasscode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp touchIDIsOpen]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp configScreenLockVC:withFlag:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp updateUserInfoToVC:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp didUpdateAvatar:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp forgetTouchIDcode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp forgetPasscode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp handleResult:withFlag:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp checkBackgroundTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp createScreenLockCreationVC:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp closePasswordWindowFromVC:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp refreshStatusBar]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp userNickName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp closeLockWindow]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp rootVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp userInfoUpdated]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp hasVerifyVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp launchedByPayRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp passcodeMgr]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp resultBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp appLaunch]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp passwordWindow]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp verifyVC]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_ScreenLockCreateConfirmVC ScreenLockCreateConfirmVCBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateConfirmVC gestureComplete:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateConfirmVC handleResult:andErrorInfo:errorText:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateConfirmVC hanldePasscodeError:andErrorInfo:errorText:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateConfirmVC activityFlag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateConfirmVC passcodeService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateConfirmVC tempPasscode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateConfirmVC userID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateConfirmVC completionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateConfirmVC statusBarstyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush uploadDeviceInfoToNetWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWAPush uploadUserLoginStateToNet:userId:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWAPush uploadPushFlagToNet:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWAPush cancelUploadPushFlagToNet]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush currentUploadPushFlagRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_PolymerPayBaseRequest requestUseGBK]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_PolymerPayBaseRequest handleReusltCode]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_WalletServiceRemindPrivacyLogic loginIdMd5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bainuoLogin:complte:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bainuoIsLogin:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bainuoAccountInfo:complte:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bainuoLogout:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bainuoGetMobile:complte:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount updateUserMobile:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bainuoFillMobile]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bindMobileSuccess:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bindMobileSuccessToUpdateUserMobile:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bindMobileCancel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bindMobileCancelDelay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bainuoGetSecretAccount:complte:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount didLogin]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount loginCancel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount didLogout]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount loginCompleteBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bindMobileBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bindMobileSuccess]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC updateCouponStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC updateUserInfoStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC updateLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC serviceCardTipAnimaiton]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC addNotification]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC successLogin:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC enterRedirectPage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC updateUserInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC updateLocalEyeHideStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC refreshInfoAfterLoadData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC didLogout]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC updatePrivateStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC createServiceViews]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC refreshSkinImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC refreshSkinFailure]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC refreshStatusBarStyle:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC homePageRequestBegin]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC notificationLocationResult:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC reverseGeocodeIfNeed]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC loadData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC dealResult:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC requestVoicePrintState]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC resetJumpFlag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC jumpItem:serviceGroup:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC jumpGroup:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC jumpItem:serviceGroup:networkCheck:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC jumpGroup:networkCheck:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC loginAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC continueInSafari:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC enterGroup:networkCheck:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC enterItem:serviceGroup:networkCheck:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC homePageItemList]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC hasSkin]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_GesturePasscodeRequest createGesturePasscodeRequest:withPasscode:andNewPasscode:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeRequest encryptGestureCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeRequest encryptConfirmGestureCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_GestureCodeCreateRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GestureCodeCreateRequest confirmedPasscode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GestureCodeUpdateRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GestureCodeUpdateRequest passcodeNew]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GestureCodeUpdateRequest passcodeNewConfirmed]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceRequest homepageItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageDeleteRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageDeleteRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageDeleteRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageDeleteRequest messageId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetPayResult err_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetPayResult err_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetPayResult payVo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetPayResult resultDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_HybridServiceImpl sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridServiceImpl startHybridService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridServiceImpl openUrl:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridServiceImpl urlEncodeString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridServiceImpl openHybridWith:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridServiceImpl bainuoComponent]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridServiceImpl privacyService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageCategoryListRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageCategoryListRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageCategoryListRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageCategoryListRequest messageCategoryList]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageCategoryListRequest remotePushUnreadCount]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_LaunchManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_LaunchManager startLaunchImageWithFinishLaunchImageBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager startLaunchImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager downloadTimerMethod:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager displayBackGroudImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager displayCustomLaunchImage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager timerMethod:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager tapGestureClicked]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager doLaunchImageRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager doLaunchImageRequestWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager updateUserDefaultsWithItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager deleteFileAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager launchImageWithTimestamp:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager launchImageExistWithTimestamp:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager finishLaunchBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager launchWindow]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager countNum]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager downloadTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest requestUseGBK]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest requestConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest DicTOjsonString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest urlEncodeString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest base64forData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest encryptLogic:value:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest buildRequstBody]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest sendHttpRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest cancelRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest apiHostHttp]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest apiHostHttps]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest requestHashKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest currentRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest resultCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest resultDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest resultMsg]", 0)}, 0);
setTimeout(function(){hookObjC("+[CAKeyframeAnimation animationWithKeyPath:fromPoint:toPoint:keyframeCount:]", 4)}, 0);
setTimeout(function(){hookObjC("+[BWA_WalletServiceGroup updateGroupIndex:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_WalletServiceGroup updateGroupNewTemplateCount:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_WalletServiceGroup removeGroupNewTemplate]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceGroup group_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceGroup group_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceGroup arrayServiceItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceGroup group_md5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceGroup pop_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceGroup group_key]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceGroup group_hight]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceGroup group_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceGroup group_link_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceGroup group_link_addr]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_ScoreInfoManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScoreInfoManager fetchScoreInfoWithAction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScoreInfoManager scoreInfoItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScoreInfoManager scoreAlert]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_WalletServiceSkinManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceSkinManager updateSkinMd5:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceSkinManager updateTabbarMd5:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceSkinManager needUpdateSkin:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceSkinManager needUpdateTabbar:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceSkinManager skinMd5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceSkinManager tabbarMd5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceSkinManager skinKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceSkinManager tabbarKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[PayVo wepUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[PayVo appUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[PayVo orderInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[PayVo channel_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager verifyPasscode:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager verifyRemotePasscode:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager updatePasscode:withNewPasscode:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager cleanPasscode:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager updatePasscodeByPaycode:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager checkUserID:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager safePrompt]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager resetRetryTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager saveUserID:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager handleServerError:flag:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager hasLocalPasscode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager remainingRetryTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager userID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager localService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager remoteAgent]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager saveAutoRedirectData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager enterRedirectPageIfNeed]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager saveAbtype:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager redirectItem]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_MessageCategoryManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageCategoryManager qureyMessageCategoryForUnreadCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageCategoryManager loginIdMd5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageCategoryManager unreadCountValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageCategoryManager refreshBadge]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageCategoryManager unreadCount]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWAPush sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush addNotification]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush didLogin]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush didLogout]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush uploadUserLoginState]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush uploadUserLoginState:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWAPush uploadPushFlag:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWAPush onMethod:response:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWAPush pushFlag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush pushFlagUploadResult]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush cachedDeviceToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush saveDeviceToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush cachedChannelId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush saveChannelId:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWAPush startWithLaunchOption:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWAPush registerDeviceToken:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWAPush handleRemoteNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWAPush handleLaunchNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWAPush uploadUserLoginState]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWAPush uploadUserLoginState:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWAPush uploadPushFlag:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWAPush logBindState]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush pushBindState]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush deviceToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush userId]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_LoginServiceImpl sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl recheckShareLoginStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl recheckPassStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl logoutPass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl updateLoginModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl loginInfoDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl clearCookies]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl uploadPortrait:mimeType:SuccessBlock:ErrorBlock:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl sapiManager:didLogOut:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl sapiManager:didLoginFail:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl sapiManager:didOauthLoginSucceed:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl sapiManager:didRegistVerified:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl sapiManager:didFillUnameSucceed:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl sapiManager:didLoginSucceed:extraInfo:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl sapiManager:silenceLoginSucceedWithOptions:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl updateLoginWindowStatus:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl closeLoginWindow]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl loginStokenWithTPL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl loginStokenWithTPL:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl privacyService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager successLoginBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager errorLoginBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager loginWithUserInfo:ExtroParams:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager loginSuccessBlock:ErrorBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager loginWithUserInfo:ExtroParams:SuccessBlock:ErrorBlock:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager updateLoginModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager loginInfoDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager fetchLoginID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager fetchLoginName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager updatePrivacy]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager loginSuccess:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager loginFailue:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager loginCancel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager logoutSuccess:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager bindMobile]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager changePassword:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager enterPassUserCenterWithRootVC:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTUserHomeManager requestHomeAllDataWithChangeSign:complete:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC refreshSkinImages:failure:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC skinPrefetcher]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC skinManger]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC skinQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC skinsInModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC refreshTitleImageAndTabImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC tabbarPrefetcher]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC tabbarManger]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC tabbarQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC checkSkinComplete:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_WalletServiceBadgeManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceBadgeManager couponBadgeType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceBadgeManager saveCouponBadgeTapStatus:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceBadgeManager badgeKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceBadgeManager badgeTapKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceBadgeManager badgeInfoKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceBadgeManager hasLoginID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceBadgeManager loginIDMd5]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_KitTouchIDServiceImp touchIDIsOpen]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_KitTouchIDServiceImp loginIdMd5]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_KitTouchID touchIDVerifyIsSupportWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_KitTouchID touchIDVerifyIsSupport]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager clearCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush processNotificationAtLaunch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWAPush processNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWAPush processNotificationItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWAPush handleNotificationMsg:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWAPush restoreAppState]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaseDataSource updateDatas:atPage:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BaseDataSource clearDatas]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaseDataSource displayInfoForData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaseDataSource infoArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaseDataSource dataArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CALayer paintInContext:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_PushUploadDeviceInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_PushUploadDeviceInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_PushUploadDeviceInfoRequest requestUseGBK]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_PushUploadDeviceInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_PushUploadDeviceInfoRequest uploadResult]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_ScreenLockCreateFirstVC ScreenLockCreateFirstVCBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateFirstVC gestureComplete:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateFirstVC activityFlag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateFirstVC passcodeService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateFirstVC userID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateFirstVC completionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateFirstVC statusBarstyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SetNickNameRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SetNickNameRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SetNickNameRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SetNickNameRequest requestUseGBK]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SetNickNameRequest nickName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_OnlineConfigRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_OnlineConfigRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_OnlineConfigRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_OnlineConfigRequest cateType]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_OnlineConfigManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_OnlineConfigManager sendRequestWithType:finishBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BWA_CreditManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_CreditManager updateCreditDataSuccessBlock:ErrorBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_CreditManager saveCreditData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_CreditManager creditData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTUserHomeAllDataRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTUserHomeAllDataRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTUserHomeAllDataRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTUserHomeAllDataRequest requestUseGBK]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTUserHomeAllDataRequest changedSign]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeCommonLogic homeModelFromString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeCommonLogic homeModelFromDict:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeCommonLogic actualValue:secret:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeCommonLogic pureValue:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeCommonLogic loginIdMd5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl _initialize]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl awakeFromNib]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl _renderPages:rect:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl rectForPageIndicator:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl _setImage:forPage:current:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl _imageForPage:current:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl imageForPage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl currentImageForPage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl _updateMeasuredIndicatorSizes]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl touchesEnded:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl numberOfPages]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl currentPage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl indicatorMargin]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl indicatorDiameter]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl verticalAlignment]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl pageIndicatorImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl currentPageIndicatorImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl hidesForSinglePage]", 0)}, 0);
setTimeout(function(){hookObjC("+[CAGradientLayer gradientLayerWithFrame:colors:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BWA_FinanceDataManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_FinanceDataManager updateFinanceDataFromRemote]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_FinanceDataManager saveFinanceData:withFileName:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_FinanceDataManager updateFinanceDataWithRequest:SuccessBlock:ErrorBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BWA_WalletServiceCardPositionManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceCardPositionManager udpatePosition:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceCardPositionManager currentPosition]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceCardPositionManager positionKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceCardPositionManager animaitonKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceCardPositionManager hasLoginID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceCardPositionManager loginIDMd5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction bainuoCompHandlerActionName:withParams:complete:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction payResultWithCode:payDesc:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction conventHybridPlatformsToBWASharePlatforms:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction updateUserMobile:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction bainuoFillMobile]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction bindMobileSuccess:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction bindMobileSuccessToUpdateUserMobile:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction bindMobileCancel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction bindMobileCancelDelay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction compHandlerActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction orderId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction bindMobileSuccess]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWTGridFactory shouldShowHeaderWithHomeDataModel:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWTGridFactory gridColumnWithHomeDataModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ReverseLocationDetail city_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ReverseLocationDetail city_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ReverseLocationDetail short_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ReverseLocationDetail city_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[CellDisplayInfo cellClass]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_AvatarHelper defaultAvatar]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_AvatarHelper cachedAvatar]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_AvatarHelper saveAvatar:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_AvatarHelper clearAvatar]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_AvatarHelper hasCachedAvatar]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_AvatarHelper imageFromURL:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_UserInfoManager shareUserInfoManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager clearUserInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager updateLoginInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager updateUserInfoSuccessBlock:ErrorBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager updateAvatarSuccessBlock:ErrorBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager uploadAvatarImage:SuccessBlock:ErrorBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager updateUserMobileSuccessBlock:ErrorBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager backToForground:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager userInfoArchivePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager saveUserInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager clearSavedUserInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_WalletServiceManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_PrivateInstance sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_PrivateInstance privateStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_PrivateInstance savePrivateStatus:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_PrivateInstance privateKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_PrivateInstance hasLoginID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_PrivateInstance loginIDMd5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_PrivateInstance needLocalState]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_MessageManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageManager deleteMessageWithMessageId:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageManager readMessageWithMessageId:block:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeAdapter canJumpWithType:link:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeAdapter gridBaseModelWithHomeModel:isSecret:isDefaultData:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeAdapter gridHeaderModelWithHomeDataModel:isSecret:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeAdapter hasNumber:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchRequest uploadResult]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchRequest testflightFlagOn]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchRequest redirectItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageListRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageListRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageListRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageListRequest messageList]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageListRequest pageCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageListRequest messageId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageListRequest refreshType]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_MapServiceImpl sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl locationServicesEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl refreshLocationWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl reverseGeocodeWithGPSLocation:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl requestWhenInUseAuthorization]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl locationManager:didChangeAuthorizationStatus:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl locationManager:didUpdateLocations:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl locationManager:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl refreshReversedLocation:andPlacemark:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl addressFromPlacemark:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl startLocationUpdating]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl stopLocationUpdating]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl createCityDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl handleAdditionalBlocks:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl duplicateRefreshLog]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl cllocationManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl lastCity]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadUserLoginStateRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadUserLoginStateRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadUserLoginStateRequest requestUseGBK]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadUserLoginStateRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadUserLoginStateRequest uploadResult]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadUserLoginStateRequest userId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadUserLoginStateRequest loginState]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_FinanceDataRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_FinanceDataRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_FinanceDataRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeLocalStorge localHomeDir]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeLocalStorge localHomeDataPath]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeLocalStorge defaultHomeData]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeLocalStorge loginIdMd5]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeLocalStorge readCacheHomeDataWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeLocalStorge writeCacheHomeData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeLocalStorge encodeString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeLocalStorge decodedString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeLocalStorge clearAllData]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_MobStat closeStat:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageReadRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageReadRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageReadRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageReadRequest messageId]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_NetworkClient shareNetworkClient]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_NetworkClient cancelRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_NetworkClient cancelAllRequests]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_NetworkClient requestHashKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_NetworkClient addRecord:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_NetworkClient removeRecord:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_NetworkClient clientRecord]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_AlertViewManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_AlertViewManager addAlert:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_AlertViewManager addActionSheet:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_AlertViewManager displayAllHiddenAlert]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_AlertViewManager displayAllHiddenActionSheet]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_AlertViewManager willPresentActionSheet:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_AlertViewManager didPresentActionSheet:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_AlertViewManager alertArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_GetPayRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_GetPayRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_GetPayRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_CreditRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_CreditRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_CreditRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_CreditRequest fingerPrint]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_CreditRequest changedSign]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo updateUserInfoFromInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo userId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo atbcKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo displayName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo userName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo nickName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo userImageUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo userHasPayPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo licai_state]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo credit_state]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo bfbreg_days]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo auth_state]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo auth_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo auth_doc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo pattern_state]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo pattern_open_doc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo pattern_doc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo pattern_safe_doc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo insurance_state]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo insurance_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo tipsMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo tipsLinkType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo tipsLinkAddr]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScoreInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScoreInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScoreInfoRequest requestUseGBK]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScoreInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("+[AVCaptureDevice requestCameraAuthorization:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AVCaptureDevice requestAlbumAuthorization:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeLocalService savePasscode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeLocalService verifyPasscode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeLocalService deletePasscode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeLocalService hasPasscode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeLocalService userID]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWALocationConverter transformFromWGSToGCJ:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWALocationConverter transformLatWithX:withY:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BWALocationConverter transformLonWithX:withY:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BWALocationConverter transformFromGCJToBaidu:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWALocationConverter transformFromBaiduToGCJ:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWALocationConverter transformFromGCJToWGS:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_FeedBack closeFeedbackWindow]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridLocation bainuoGetLocation:complte:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridLocation bainuoLocationStatus:complte:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridLocation bainuoHasLocation:complte:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridLocation locationBlock]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_BBAShareManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BBAShareManager shareWebContentByTitle:Text:Url:ImageUrl:Platforms:EventHandler:]", 6)}, 0);
setTimeout(function(){hookObjC("-[BWA_BBAShareManager handleOpenURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_BBAShareManager productID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BBAShareManager appIDForStatistics]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BBAShareManager appIDForWeixin]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BBAShareManager appKeyForSinaWeibo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BBAShareManager appIDForQQ]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("+[YeYingManager sharedYYSDK]", 0)}, 0);
setTimeout(function(){hookObjC("-[YeYingManager runMode]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDSPageNavigator sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSPageNavigator pushPage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSEntity handleDispatch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity target_wise_home]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity target_wise_list]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity target_wise_detail]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity target_wise_order_detail]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity target_wise_activity]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDSRequest tuanRequestWithTarget:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSResponse userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[MCTuanUtils imageNamed:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MCTuanUtils replaceEqualMarkToColon:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MCTuanUtils mc_currentNetworkStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[MCTControlPlugin finish:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSKeychainItemWrapper objectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSKeychainItemWrapper resetKeychainItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSKeychainItemWrapper writeToKeychain]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSKeychainItemWrapper keychainItemData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSKeychainItemWrapper genericPasswordQuery]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDSTuanEntity stringToDic:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDSTuanEntity loadWithCommonEntity:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity target_groupon_home]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity target_groupon_category]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity target_groupon_detail]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity target_groupon_order_list]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity target_groupon_voucher]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity target_groupon_order_detail]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity handleDispatch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSBaseNavPage supportedInterfaceOrientations]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSBaseNavPage shouldAutorotate]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSBaseNavPage pageCreate:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSBaseNavPage pageStart]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSBaseNavPage pageStop]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSBaseNavPage pageDestroy]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSDispatcher dispatch:result:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDSDispatcher defaultDispatcher]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSDispatcher applicationDidBecomeActive:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSDispatcher openURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSDispatcher popToVCName]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDSIntent intentWithPageName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSIntent pageName]", 0)}, 0);
