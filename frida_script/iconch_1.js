
var resolver = new ApiResolver('objc');

function onEnterFunc(args, argNum, infoArray){
    // infoArray = [ argNum, args[1], args[2], ... , args[argNum + 1], args[0], retval, funcname ]
    infoArray[0] = argNum;

    /*try {
        tmp = new ObjC.Object(args[0]);
        infoArray[argNum + 2] = tmp.toString();
    } catch(error){
        try { 
            infoArray[argNum + 2] = strFilter(Memory.readCString(args[0], 128).toString());
        } catch(err) {
            infoArray[argNum + 2] = args[0].toString();
        }
    }*/

    for(var i=1; i<argNum+2; ++i) {
        infoArray[i] = 'arg';
        /*try {
            tmp = new ObjC.Object(args[i]);
            infoArray[i] = tmp.toString();
        } catch(error){
            try { 
                infoArray[i] = strFilter(Memory.readCString(args[i], 128).toString());
            } catch(err) {
                infoArray[i] = args[i].toString();
            }
        }*/
    }

    return;
}

function onLeaveFunc(retval, argNum, infoArray){

    infoArray[argNum + 3] = 'retval';
    /*try {
        tmp = new ObjC.Object(retval);
        infoArray[argNum + 3] = tmp.toString();
    } catch(error){
        try { 
            infoArray[argNum + 3] = strFilter(Memory.readCString(retval, 128).toString());
        } catch(err) {
            infoArray[argNum + 3] = retval.toString();
        }
    }*/

    return;
}

function strFilter(str) {
    for(var i=0; i<str.length; ++i){
        if(str.charCodeAt(i) >= 32 && str.charCodeAt(i) <= 127)
            { }
        else
            return str.substring(0, i);
    }
    return str;
}

function hookObjC(FuncName, ArgNum){
    resolver.enumerateMatches(FuncName, {
        onMatch: function (match) {
                    // infoArray = [ argNum, args[1], args[2], ... , args[argNum + 1], args[0], retval, funcname ]
                    var infoArray = new Array(ArgNum + 4);
                    infoArray[ArgNum + 4] = match.name;
                    //send(match.name);

                    Interceptor.attach(match.address, {
                    onEnter: function(args){
                        //send(match.name);
                        onEnterFunc(args, ArgNum, infoArray);
                    },
                    onLeave: function(retval){
                        onLeaveFunc(retval, ArgNum, infoArray);
                        send(infoArray);
                    }
                    })
                },
        onComplete: function () {
                }
    }); 
}

setTimeout(function(){hookObjC("+[SAKBindPhoneResponse predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBindPhoneResponse itemArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLocalizerService loadTheListWithCompletionHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginOAuth2 mtUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginOAuth2 checkAccessToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginOAuth2 revokeAccessToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginOAuth2 URLRequestAuthorization]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginOAuth2 requestAccessWithAuthorizationCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginOAuth2 requestUserInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginOAuth2 requestOpenIdByAcessToken:andExpiresIn:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginOAuth2 oauthInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginOAuth2 accessToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginOAuth2 openID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginQzone oauthInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginQzone openID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginQzone accessToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginQzone checkAccessToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginQzone revokeAccessToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginQzone URLRequestAuthorization]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginQzone requestOpenIdByAcessToken:andExpiresIn:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginQzone requestUserInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginSinaWeibo ssoCallbackScheme]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginSinaWeibo oauthInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginSinaWeibo accessToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginSinaWeibo checkAccessToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginSinaWeibo revokeAccessToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginSinaWeibo URLRequestAuthorization]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginSinaWeibo requestAccessWithAuthorizationCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKLoginSinaWeibo requestUserInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKRenewPasswordResult predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKSharedAccount currentAppScheme]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKSharedAccount currentAppName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSharedAccount userName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSharedAccount nickName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSharedAccount appScheme]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSharedAccount appName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSharedAccount appDescription]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSharedAccountDAO availableAccountArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSharedAccountDAO queryDictionaryWithAccount:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSharedAccountDAO updateAccount:mobile:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKSharedAccountDAO deleteAccount:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSharedAccountDAO saveAccount:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSharedAccountDAO availableSharedAccount:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSharedAccountDAO keychainGroup]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSharedAccountDAO availableAppArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSharedAccountService availableAccountArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSharedAccountService verifiedAvailableAccountArray:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSharedAccountService signInViaToken:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKSharedAccountService accountDAO]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService historicalAccounts]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService lastAccount]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService lastMobile]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService lastCountryCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService lastCountryName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService fetchLogInTypeWithMobile:countryCode:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService fetchVerifyTypeWithRequestCode:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService fetchVerifyResponseWithRequestCode:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService signInWithAccount:password:requestCode:responseCode:finished:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService doubleVerificationLoginWithResponseCode:userTicket:requestCode:account:finished:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService signInWithToken:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService applyVerificationCodeToMobile:forceVoice:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService applyVerificationCodeToMobile:forceVoice:countryCode:finished:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService sendQueryMessageRequestWithPhoneNumber:requestCode:mobileInterCode:finished:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService sendVerifyMessageRequestWithPhoneNumber:requestCode:smsCode:finished:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService signinWithPhoneNumber:code:requestCode:responseCode:finished:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService signinWithPhoneNumber:code:requestCode:responseCode:countryCode:finished:]", 6)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService sendBindMessageWithMobile:requestCode:responseCode:ticket:confirm:finished:]", 6)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService verifyBindMessageWithMobile:requestCode:responseCode:ticket:finished:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService sendBindMessageRequestWithPhoneNumber:verifyType:requestCode:mobileInterCode:finished:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService verifyBindMessageRequestWithPhoneNumber:verifyType:requestCode:smsCode:finished:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService loginCheckWithUserTicket:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService loginWithUserTicket:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService customLogInParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSignInService cacheDAO]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSignUpService sendRegistApplyingWithPhoneNumber:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKSignUpService sendQueryMessageRequestWithPhoneNumber:requestCode:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKSignUpService sendVerifyMessageRequestWithPhoneNumber:requestCode:smsCode:finished:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAKSignUpService sendRegistRequestWithPhoneNumber:password:requestCode:responseCode:finished:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SAKSignUpService sendVerificationCodeToPhone:captcha:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKSignUpService verifyPhone:withCode:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKSignUpService registerPhone:withCode:password:finished:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAKSignUpService registerUserName:captcha:password:finished:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAKSignUpService registerModel]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKSMSResult predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSSOResponse accessToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSSOResponse openID]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKSSOWrapper shareSSOWrapper]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSSOWrapper authorize:fromController:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKSSOWrapper OAUTHLogInWithType:accessToken:openID:finished:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAKSSOWrapper handleOpenURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSSOWrapper onReq:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSSOWrapper onResp:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSSOWrapper didReceiveWeiboRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSSOWrapper didReceiveWeiboResponse:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSSOWrapper tencentDidLogin]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSSOWrapper tencentDidNotLogin:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSSOWrapper tencentDidNotNetWork]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSSOWrapper sakLogin_oauth2LoginFinished:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSSOWrapper tencentOAuth]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser needResetPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUserExInfo genderString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUserExInfo identityString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUserExInfo marriageString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUserExInfo userID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUserExInfo birthdayString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUserExInfo cityID]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKUserService sharedUserService]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService logError:withUserInfoDictionary:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService performanceRecordErrorDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService keychainServiceName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService _userWillUpdate]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService _userDidUpdate]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService updateCurrentUserWithUser:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService _clearCookie]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService _deleteCurrentUser]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService _saveCurrentUser]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService saveCurrentUser]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService userDidRegister:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService userWantLogin:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService userWantLogout]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService fetchUserInfoByToken:complete:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService updateUserInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService fetchBindedPhoneNumberByToken:complete:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService changeUserName:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService changeUserName:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService changePassword:oldPassword:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService changePassword:oldPassword:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService changePasswordWithTicket:password:oldPassword:completion:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService resetPasswordWithCode:newPassword:repeatPassword:forUsername:finished:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService resetPasswordForUser:password:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService refreshUserLevelConfigIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService bindPhoneRequireTwoStepsFinished:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService sendVerificationCodeToOldFinished:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService checkSMSStrategyStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService sendVerificationCodeToNewNumber:confirmed:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService sendVerificationCodeToNewNumber:captcha:confirmed:finished:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService verifyOldVerificationCode:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService verifyNewVerificationCode:withPhoneNumber:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService verifyMobile:withOldMobile:confirm:finished:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService bindPhoneNumber:verificationCode:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService loadUserExInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService updateUserExInfo:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService uploadUserPortrait:uploadProgress:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService requestVoiceValidationCodeWithRequestCode:orderID:validateType:complete:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService saveSharedAccountTokenWithMobile:token:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService deleteSharedAccountTokenWithMobile:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService refreshTokenPeriodically]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService bindPhoneRiskCheck:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService userLevelConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService SMSStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService userExInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUserService userModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics crashCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics resetCrashCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics checkCrashContinousInPeriod:crashCount:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics sharedAnalytics]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics enableLocationAutoUpdate:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics configReportExceptionMonitorBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics launchChannel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics sessionID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics pushID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics session:expiredID:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics baseHeader]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics observeValueForKeyPath:ofObject:change:context:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics updateCoreDataHeader]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics waitStartingWithRetryNumber:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics nextEventSequence]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics locationManager:didUpdateLocations:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics locationManager:didUpdateToLocation:fromLocation:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics locationManager:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics didChangedLocation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics startTracker]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics cleanHistoryAnalytics]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics uploadHistoryAnalytics]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics uploadAnalyticsPackage:events:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics startSAKAnalytics]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics applicationDidBecomeActive]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics applicationWillResignActive]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics applicationDidEnterBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics applicationWillEnterForeground]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics applicationWillTerminate]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics defaultLaunchChannel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics FlurryID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics crashReportingEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics lastPageTrack]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics eventSeq]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalytics backgroundTask]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics trackUserLogin:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics trackUserPush:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics trackUserRegister:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics trackUserLocation:location:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics trackMeituanPageRoot:name:content:type:]", 4)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics trackPage:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics trackWitness:content:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics trackPageRoot:name:content:type:]", 4)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics trackPushLaunchWithBase64String:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics trackCityID:name:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics trackSetting:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics trackStrategyWithDealID:strategy:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics trackCreateOrder:deal:bizType:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics trackPayOrder:deal:price:bizType:]", 4)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics trackTransactionWithOrderId:dealId:orderType:count:singlePrice:deliveryFee:]", 6)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics logNetworkState:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics logError:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics logDNSPoisioning:DNS:realDNS:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics logLaunchInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalytics logUpdateUUID:oldUUID:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsBaseHeader appType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsBaseHeader appChannel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsBaseHeader appSubChannel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsBaseHeader userID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsBaseHeader bizloginID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsBaseHeader cityID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsBaseHeader launchChannel]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalyticsCoreDataManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsCoreDataManager storeCoordinator]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsCoreDataManager saveHeader:events:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsCoreDataManager saveHeader:events:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsCoreDataManager removeHistoryAnalytics:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsCoreDataManager modelURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsCoreDataManager persistentURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsCoreDataManager headerURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalyticsEvent typeNameWithType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsEvent pushID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsEvent sessionID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsEvent userID]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalyticsHeader analyticsHeaderWithInitial]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsHeader appChannel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsHeader appSubChannel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsHeader appPlatForm]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsHeader appType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsHeader appVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsHeader cityID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsHeader deviceID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsHeader deviceModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsHeader launchChannel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsHeader macID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsHeader osVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsHeader pushID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsHeader sessionID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsHeader userID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsHeader bizloginID]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalyticsLaunchInfo cerStringWithCerType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsLaunchInfo notificationType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsLaunchInfo refreshStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsLaunchInfo pushType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsLaunchInfo cerType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsLaunchInfo deviceToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsLaunchInfo badgeNumber]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalyticsLogger defaultLogger]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsLogger fileHandle]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsLogger didReceiveLoggingRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsLogger logFilePath]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalyticsNetworkManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsNetworkManager saveHeader:events:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsNetworkManager saveHeader:launchInfo:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsNetworkManager saveContent:toURL:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalyticsNetworkManager reportServerURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKAnalyticsNetworkManager configReportExceptionMonitorBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsSession encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsSession sessionPrefix]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsSession sessionID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsSession sessionID_]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsSession resetSessionID]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKBabelTower sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBabelTower addObserver]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKBabelTower logRT:content:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKBabelTower logRT:content:options:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAKBabelTower logRT:value:content:environmentOptions:options:needDefaultOptionsKey:]", 6)}, 0);
setTimeout(function(){hookObjC("+[SAKBabelTower log:content:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKBabelTower log:content:options:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAKBabelTower log:value:content:environmentOptions:options:needDefaultOptionsKey:]", 6)}, 0);
setTimeout(function(){hookObjC("+[SAKBabelTower logLocal:content:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKBabelTower logLocal:content:options:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAKBabelTower _log:value:content:environmentOptions:options:logType:needDefaultOptionsKey:]", 7)}, 0);
setTimeout(function(){hookObjC("+[SAKBabelTower globalConfig]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKBabelTower uploadLocalLog]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBabelTower trackEnvironmentWithConfig:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBabelTower log:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBabelTower clearAllLogs]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBabelTower uploadLocalLog]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBabelTower shouldReport:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBabelTower allowPickupLocalLog]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBabelTower remoteConfigService]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTConfiguration defaultToken]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKBTDebugger log:file:moudule:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAKBTDebugger log:tip:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKBTEntity kfOptionsWithDic:logType:needDefaultOptionsKey:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKBTEntity dictionryWithContent:options:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKBTEntity entityDictionaryValue]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKBTEntity entityIDWithArray:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKBTEntity supportsSecureCoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTEntity encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBTEntity entityID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTEntity logType]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKBTEnvironment sharedEnvironment]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTEnvironment deviceId]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTEnvironment osVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTEnvironment sdkVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTEnvironment appVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTEnvironment deviceProvider]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTEnvironment deviceType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTEnvironment defaultToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTEnvironment basicInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTEnvironment tokensBook]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTEnvironment envExtraInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTEnvironment tokenLock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTEnvironment envExtraInfoLock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTLogMaker logWithArray:tag:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKBTLogMaker logDictionaryWithEntity:tag:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKBTProcessor log:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBTProcessor processThreadEntry]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTProcessor processLog:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKBTProcessor handleRTLog:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKBTProcessor handleNRTLog:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKBTProcessor handleLocalLog:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKBTProcessor clearAllLogs]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTProcessor uploadNRTWithCompletion:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBTProcessor handleLocalLogWithID:availableArray:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKBTProcessor storageLocal]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTProcessor processThread]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKBTGlobalConfig objectWithDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBTGlobalConfig reportGap]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTGlobalConfig reportThreshold]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKBTRemoteDeployConfig objectWithDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBTRemoteDeployConfig globalConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTRemoteDeployConfig businessConfigItems]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKBTRemotePickConfig objectWithDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBTRemotePickConfig tagBlacklist]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTRemotePickConfig pickId]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTRemotePickConfig networkStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTRemoteConfigService fetchDeployConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTRemoteConfigService fetchPickConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTRemoteConfigService globalConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTRemoteConfigService pickConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTRemoteConfigService deployConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTSignedURLInfo putFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTDataBaseObject dictionaryValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTDataBaseObject entityData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTDataBaseObject entityID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTDataBaseObject logType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTDataBaseObject osVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTDataBaseObject sdkVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTDataBaseObject appVersion]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKBTStorage sharedStorage]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTStorage updateDatabaseIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTStorage needUpdateDatabase]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTStorage dataBasePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTStorage dataBaseVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTStorage saveEntity:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBTStorage saveEntityArr:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBTStorage enityDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTStorage currentLogCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTStorage deleteEntityWithIDs:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBTStorage deleteLRULog]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTStorage aggregationKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBTStorage tagWithAggregationKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBTStorage databaseQueue]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKBTStorageLocal sharedStorageLocal]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKBTStorageLocal allocWithZone:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBTStorageLocal localFileRealpathWithDate:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKBTStorageLocal serialization:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBTStorageLocal localFilePathWithTimestamp:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBTStorageLocal removePreviousFiles]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTStorageLocal appendContent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBTStorageLocal appendEntity:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBTThrottle enqueueLog:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBTThrottle dequeueLog]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTThrottle updateBlacklistIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTThrottle countOverTags:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBTThrottle frequentTags:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBTThrottle aggregateLogWithArr:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBTThrottle inClearLogsReportGap]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTThrottle reachNRTReportThreshold]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTThrottle logEntityArr]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTUploader uploadLog:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKBTUploader uploadLog:tag:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKBTUploader logWithArray:tag:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKBTUploader uploadData:toURL:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKBTUploader uploadLocalLog:logID:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKBTUploader handleLocalLogDescriptionKey:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKBTUploader uploadFileData:filePath:logID:requestHeader:completion:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SAKBTUploader localLogUploadQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBTUploader networkQueue]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKBTUtils dictionaryWithString:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKBTUtils bundleIdentifier]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKBTUtils appShortVersion]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKBTUtils mobileCountryAndNetworkCode]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKBTUtils currentReachabilityStatus]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKBTUtils subArr:withLength:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CIPError mtbc_errorProcess]", 0)}, 0);
setTimeout(function(){hookObjC("+[MPCWeiXinNoPasswordUnavailableInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordUnavailableInfo unavailableCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordUnavailableInfo unavailableMessage]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBCBarcodeCashier defaultBarcodeCashier]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeCashier processPaymentResultWithURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeCashier barcodeCashierPaymentProcessStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeCashier paymentDidFinish:callBackURL:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeCashier paymentDidFail:callBackURL:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeCashier paymentDidCancel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeCashier redirectToCallbackURLIfExist:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeCashier clearCashierData]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeCashier qrcodeSource]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeCashier processController]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBCBarcodeCommonConfigure shareConfigure]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeCommonConfigure bottomBrandLogoImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeCommonConfigure paymentMethodSelectedIconImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeCommonConfigure barcodeHostAppType]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeEncoder generateBarcodeImageWithCodeString:width:height:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeEncoder generateQRCodeImageWithCodeString:width:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeEncoder generateImageWithFilter:codeString:width:height:]", 4)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeEncoder resizeImage:withQuality:rate:]", 3)}, 0);
setTimeout(function(){hookObjC("+[MTBCBarcodeInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBCBarcodeInfo helpInfoURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBCBarcodeInfo bottomLogoURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBCBarcodeInfo guideBottomLogoURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBCBarcodeInfo guideImageURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeInfo helpInfoURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeInfo queryToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeInfo payCodeArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeInfo stepArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeInfo paymentMethodArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeInfo bottomTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeInfo bottomLogoURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeInfo pageActionString]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeInfo pageTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeInfo buttonText]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeInfo guideImageURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeInfo guideBottomLogoURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeInfo guideFirstLineText]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeInfo guideSecondLineText]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeInfo verifyPayPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCBarcodeInfo paymentNoticeInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBCCloseBarcodeInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCCustomStepTimer customSteps:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTBCCustomStepTimer destroyTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCCustomStepTimer stopBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCCustomStepTimer executeBlock]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBCDiscountInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCDiscountInfo buttonTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCDiscountInfo needPay]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCDiscountInfo paymentMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCDiscountInfo discountArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBCDiscountPaymentMethodInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBCDiscountPayMoneyInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBCDiscountTotalInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBCPaymentHeadNoticeInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBCPaymentHeadNoticeInfo contentURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCPaymentHeadNoticeInfo contentURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBCPaymentManagementInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCPaymentManagementInfo wxNoPasswordPayItem]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBCScanCodeResultInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBCScanCodeResultInfo callBackURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBCScanCodeResultInfo transformFromMTBCPaymentResult:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTBCScanCodeResultInfo paidByCredit]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCScanCodeResultInfo URLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCScanCodeResultInfo payType]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCScanCodeResultInfo discountInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCScanCodeResultInfo callBackURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCScanCodeResultInfo wxnpGuideInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCScanCodeResultInfo payToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCScanCodeResultInfo tradeNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCScanCodeResultInfo wxnpUnavailableInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBCVerifyPayPasswordInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBCVerifyPayPasswordInfo submitURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCVerifyPayPasswordInfo submitURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBCVerifyPayPasswordInfo pageTitle]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTSFOfflineCodeCreater ylOnlineCodeCreaterWithSeed:vd:fk:sk:tweak:t:rate:]", 7)}, 0);
setTimeout(function(){hookObjC("+[MTSFSeedInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSFSeedInfo sessionKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSFSeedInfo FPEKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSFSeedInfo bankCardID]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSFSeedInfo bankCardNO]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSFSeedInfo bankCardName]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSFSeedInfo bankLogo]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTSFSyncSeedInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSFSyncSeedInfo verifyPin]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSFSyncSeedInfo seedArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSFBarCodeOfflineParams methodID]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSFBarCodeOfflineParams bankCardID]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSFBarCodeOfflineParams eventType]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSFBarCodeOfflineParams qrcodeSource]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSFBarCodeOfflineResult methodID]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSFBarCodeOfflineResult bankCardInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSFBarCodeOfflineResult payCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace jsapi_syncBarCodeOffline:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace jsapi_signature_syncBarCodeOffline]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace syncRequestSeed:result:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace statistics:result:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace loadStorageObject]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVObject generateModelWithClass:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject nvObjectPropertyNameWithName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKError modelErrorWithCode:callstack:underlyingError:]", 3)}, 0);
setTimeout(function(){hookObjC("+[CIPError cipf_modelErrorWithCode:callstack:underlyingError:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAKCURLConnectionManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnectionManager executeHTTPRequest:plugin:uploadProgress:downloadProgress:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnectionManager DNSItemsFromRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnectionManager requestHTTPVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnectionManager handleRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnectionManager executeHttpRequest:userInfo:onFinish:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnectionOperation responseData]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKCURLHTTP2ConnectionManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLHTTP2ConnectionManager requestHTTPVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLHTTP2ConnectionManager handleRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKCurlSupportWebviewProtocol needCurlSupport]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKCurlSupportWebviewProtocol webviewCallBackQueue]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKCurlSupportWebviewProtocol canInitWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKCurlSupportWebviewProtocol canonicalRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKCurlSupportWebviewProtocol startLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCurlSupportWebviewProtocol stopLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPError mtc_isCommomError]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPError mtc_isCashierRiskError]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPError mtc_isCashierRiskPasswordError]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCPaymentMethod mtc_shouldRequestPaymentResult]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCAntiRefreshProcessor overloadMessage]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCAntiRefreshProcessor overloadDate]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTCCashier defaultCashier]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCCashier processPaymentResultWithURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCCashier cashierPaymentProcessStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCCashier paymentDidFinish:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCCashier paymentDidFail:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCCashier paymentDidCancel:cancelType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCCashier process:doOperation:customInfo:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MTCCashier redirectToCallbackURLIfExist]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCCashier clearCashierData]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCCashier currentProcessController]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCCashier callbackURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCCashier cashierRouter]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCCashier cancelRequestCashier]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCCashier paymentInfoDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTCFlashPayGuidePageInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCFlashPayGuidePageInfo totleFee]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTCFlashPayInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCFlashPayInfo guidePageInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCFlashPayInfo currentPageInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCFlashPayInfo nextPageInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCFlashPayInfo userTransferInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCFlashPayInfo externalParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTCFlashPayPageInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCFlashPayPageInfo labelArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCFlashPayPageInfo campaignID]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCFlashPayPageInfo flashPayTypeID]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCFlashPayPageInfo verifyPaymentPasswordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCFlashPayPageInfo fingerprintInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCFlashPayPageInfo verifyPaymentSMSInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCFlashPayPageInfo flashPayFailed]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentData moneyToPay]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentData discountMoney:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentData hasAvailableDiscount]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentData hasAvailablePaymentMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentData meituanWalletPaymentMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentData paymentInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentData paymentMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentDataCenter payToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentDataCenter tradeNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentDataCenter verificationSMSCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentDataCenter payPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentDataCenter paymentResult]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentDataCenter paymentData]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentDataCenter flashPayInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentDataProcessor updatePaymentDataWithFlowInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentDataProcessor paymentDataWithKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentDataProcessor updatePaymentDataWithKey:value:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentDataProcessor paymentDataCenter]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTCPaymentHeadNoticeInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTCPaymentHeadNoticeInfo contentURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentHeadNoticeInfo contentURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTCPaymentInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTCPaymentInfo subjectURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentInfo firstCanUseCashTicketMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentInfo tradeNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentInfo subjectURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentInfo expireTimestamp]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentInfo currentTimestamp]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentInfo totalFee]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentInfo phoneNumberString]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentInfo paymentMethods]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentInfo noticeInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentInfo bannerArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentInfo userTransferInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentInfo paymentSettingInfoArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTCPaymentOverloadInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentRequest tradeNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentRequest payToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentRequest callbackURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentRequest dispatcherScene]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTCPaymentResult mtc_applePayPaymentResultWithPayToken:tradeNumber:paymentData:]", 3)}, 0);
setTimeout(function(){hookObjC("+[MTCPaymentResult predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTCPaymentResult transformFromMTCPaymentResult:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentResult paidByCredit]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentResult URLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentResult payType]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentResult wxnpGuideInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentResult promotionInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentResult overloadInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentResult verifyPaymentPasswordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTCPaymentSettingInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTCPaymentSettingInfo linkURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentSettingInfo methodID]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentSettingInfo statusInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentSettingInfo iconInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentSettingInfo iconURLStringArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCPaymentSettingInfo linkURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCProgressControl awakeFromNib]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCProgressControl startAnimating]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCProgressControl switchToSuccessAnimating]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCProgressControl stopAnimating]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCProgressControl animationDidStop:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCProgressControl pathCircle]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCProgressControl startProgressAnimating]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCProgressControl stopProgressAnimating]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCProgressControl resetAnimations]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCProgressControl progressLayer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCProgressControl circleLayer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCProgressControl successProgressLayer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCProgressControl hidesWhenStopped]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCProgressControl timingFunction]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTCUserTransferDisplayManagement downloadImagesWithTransferInfo:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("+[MTCUserTransferInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTCUserTransferInfo logoImageURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTCUserTransferInfo backgroundImageURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCUserTransferInfo submitURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCUserTransferInfo logoImageURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCUserTransferInfo backgroundImageURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCWaveLikeLine rideTheWaves]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTCWithholdingGuideInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTCWithholdingGuideInfo agreementURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCWithholdingGuideInfo guideTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCWithholdingGuideInfo guideDescription]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCWithholdingGuideInfo agreementTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCWithholdingGuideInfo agreementName]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCWithholdingGuideInfo agreementURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCWithholdingGuideInfo submitURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCWithholdingGuideInfo payType]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashDoctorParam className]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashDoctorParam previousClassName]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashDoctorFunctionCall descriptionForObjCCall]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashDoctorFunctionCall descriptionWithParamCount:]", 1)}, 0);
setTimeout(function(){hookObjC("+[KSCrashInstReportField fieldWithIndex:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashInstReportField fieldBacking]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashInstReportField keyBacking]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashInstReportField valueBacking]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashInstallationBaseQuincyHockey allCrashDescriptionKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashInstallationBaseQuincyHockey userID]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashInstallationBaseQuincyHockey userIDKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashInstallationBaseQuincyHockey userName]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashInstallationBaseQuincyHockey userNameKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashInstallationBaseQuincyHockey contactEmail]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashInstallationBaseQuincyHockey contactEmailKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashInstallationBaseQuincyHockey crashDescription]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashInstallationBaseQuincyHockey crashDescriptionKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashInstallationBaseQuincyHockey extraDescriptionKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashInstallationBaseQuincyHockey waitUntilReachable]", 0)}, 0);
setTimeout(function(){hookObjC("+[KSCrashInstallationQuincy sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[KSCrashInstallationHockey sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashInstallationHockey appIdentifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashDeadlockMonitor watchdogPulse]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashDeadlockMonitor watchdogAnswer]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashDeadlockMonitor handleDeadlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashDeadlockMonitor runMonitor]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashDeadlockMonitor monitorThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashDeadlockMonitor awaitingResponse]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashAlertViewProcess startWithTitle:message:yesAnswer:noAnswer:reports:onCompletion:]", 6)}, 0);
setTimeout(function(){hookObjC("-[KSCrashAlertViewProcess onCompletion]", 0)}, 0);
setTimeout(function(){hookObjC("+[KSCrashReportFilterAppleFmt filterWithReportStyle:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt majorVersion:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt filterReports:onCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt CPUType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt CPUArchForMajor:minor:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt backtraceString:reportStyle:mainExecutableName:]", 3)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt toCompactUUID:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt stringFromDate:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt recrashReport:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt systemReport:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt infoReport:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt processReport:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt crashReport:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt binaryImagesReport:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt crashedThread:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt mainExecutableNameForReport:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt cpuArchForReport:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt headerStringForReport:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt binaryImagesStringForReport:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt crashedThreadCPUStateStringForReport:cpuArch:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt extraInfoStringForReport:mainExecutableName:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt errorInfoStringForReport:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt stringWithUncaughtExceptionName:reason:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt userExceptionTrace:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt threadStringForThread:mainExecutableName:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt threadListStringForReport:mainExecutableName:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt crashReportString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt recrashReportString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterAppleFmt reportStyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterPassthrough filterReports:onCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("+[KSCrashReportFilterCombine argBlockWithFilters:andKeys:]", 2)}, 0);
setTimeout(function(){hookObjC("+[KSCrashReportFilterCombine filterWithFiltersAndKeys:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterCombine filterReports:onCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("+[KSCrashReportFilterPipeline filterWithFilters:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterPipeline addFilter:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterPipeline filterReports:onCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("+[KSCrashReportFilterObjectForKey filterWithKey:allowNotFound:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterObjectForKey filterReports:onCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterObjectForKey allowNotFound]", 0)}, 0);
setTimeout(function(){hookObjC("+[KSCrashReportFilterConcatenate filterWithSeparatorFmt:keys:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterConcatenate filterReports:onCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterConcatenate separatorFmt]", 0)}, 0);
setTimeout(function(){hookObjC("+[KSCrashReportFilterSubset filterWithKeys:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterSubset filterReports:onCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterSubset keyPaths]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterDataToString filterReports:onCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterStringToData filterReports:onCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("+[KSCrashReportFilterGZipCompress filterWithCompressionLevel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterGZipCompress filterReports:onCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterGZipCompress compressionLevel]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterGZipDecompress filterReports:onCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("+[KSCrashReportFilterJSONEncode filterWithOptions:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterJSONEncode filterReports:onCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterJSONEncode encodeOptions]", 0)}, 0);
setTimeout(function(){hookObjC("+[KSCrashReportFilterJSONDecode filterWithOptions:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterJSONDecode filterReports:onCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterJSONDecode decodeOptions]", 0)}, 0);
setTimeout(function(){hookObjC("+[KSCrashFilterSets appleFmtWithUserAndSystemData:compressed:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterStringify stringifyObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportFilterStringify filterReports:onCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkConsole defaultCrashReportFilterSet]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkConsole filterReports:onCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashMailProcess startWithController:reports:filenameFmt:onCompletion:]", 4)}, 0);
setTimeout(function(){hookObjC("-[KSCrashMailProcess mailComposeController:didFinishWithResult:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[KSCrashMailProcess presentModalVC:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashMailProcess dismissModalVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashMailProcess onCompletion]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashMailProcess dummyVC]", 0)}, 0);
setTimeout(function(){hookObjC("+[KSCrashReportSinkEMail sinkWithRecipients:subject:message:filenameFmt:]", 4)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkEMail defaultCrashReportFilterSet]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkEMail defaultCrashReportFilterSetAppleFmt]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkEMail filterReports:onCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkEMail filenameFmt]", 0)}, 0);
setTimeout(function(){hookObjC("+[KSCrashReportSinkQuincy sinkWithURL:userIDKey:userNameKey:contactEmailKey:crashDescriptionKeys:]", 5)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkQuincy defaultCrashReportFilterSet]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkQuincy cdataEscaped:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkQuincy blankForNil:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkQuincy descriptionForReport:keys:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkQuincy quincyInstallUUID]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkQuincy quincyArchFromCpuType:cpuSubType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkQuincy uuidsFromReport:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkQuincy toQuincyBody:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkQuincy filterReports:bodyName:bodyContentType:bodyFilename:onCompletion:]", 5)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkQuincy filterReports:onCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkQuincy userIDKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkQuincy userNameKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkQuincy contactEmailKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkQuincy crashDescriptionKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkQuincy reachableOperation]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkQuincy waitUntilReachable]", 0)}, 0);
setTimeout(function(){hookObjC("+[KSCrashReportSinkHockey sinkWithAppIdentifier:userIDKey:userNameKey:contactEmailKey:crashDescriptionKeys:]", 5)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkHockey filterReports:onCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkHockey urlWithAppIdentifier:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkHockey appIdentifier]", 0)}, 0);
setTimeout(function(){hookObjC("+[KSCrashReportSinkStandard sinkWithURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkStandard defaultCrashReportFilterSet]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkStandard filterReports:onCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkStandard reachableOperation]", 0)}, 0);
setTimeout(function(){hookObjC("+[KSCrashReportSinkVictory sinkWithURL:userName:userEmail:]", 3)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkVictory defaultCrashReportFilterSet]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkVictory filterReports:onCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkVictory userName]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkVictory userEmail]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSCrashReportSinkVictory reachableOperation]", 0)}, 0);
setTimeout(function(){hookObjC("+[KSCString stringWithString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[KSCString stringWithCString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[KSCString stringWithData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[KSCString stringWithData:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[KSHTTPPostField data:name:contentType:filename:]", 4)}, 0);
setTimeout(function(){hookObjC("-[KSHTTPPostField contentType]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSHTTPMultipartPostBody appendData:name:contentType:filename:]", 4)}, 0);
setTimeout(function(){hookObjC("-[KSHTTPMultipartPostBody appendUTF8String:name:contentType:filename:]", 4)}, 0);
setTimeout(function(){hookObjC("-[KSHTTPMultipartPostBody toStringWithQuotesEscaped:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSHTTPMultipartPostBody contentType]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSHTTPRequestSender handleResponse:data:error:onSuccess:onFailure:onError:]", 6)}, 0);
setTimeout(function(){hookObjC("-[KSHTTPRequestSender sendRequest:onSuccess:onFailure:onError:]", 4)}, 0);
setTimeout(function(){hookObjC("+[KSReachabilityKSCrash reachabilityToHost:]", 1)}, 0);
setTimeout(function(){hookObjC("+[KSReachabilityKSCrash reachabilityToLocalNetwork]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSReachabilityKSCrash extractHostName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSReachabilityKSCrash onReachabilityFlagsChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KSReachabilityKSCrash updateFlags]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSReachabilityKSCrash onReachabilityChanged]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSReachabilityKSCrash WWANOnly]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSReachabilityKSCrash reachabilityRef]", 0)}, 0);
setTimeout(function(){hookObjC("-[KSReachabilityKSCrash notificationName]", 0)}, 0);
setTimeout(function(){hookObjC("+[KSReachableOperationKSCrash operationWithHost:allowWWAN:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SCRAppleFormatFilter backtraceString:reportStyle:mainExecutableName:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SCRApplication sharedApplication]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRApplication continuousCrashCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRApplication levelForCrashCount:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SCRApplication crashLevel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRCrashReport baseKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRCrashReport logKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRCrashReport valueKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRCrashReport encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SCRCrashReport patchVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRCrashReport crashVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRCrashReport lastPageTrack]", 0)}, 0);
setTimeout(function(){hookObjC("+[SCRCrashReporter sharedReporter]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRCrashReporter startWithAppName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SCRCrashReporter startWithAppName:onDeviceSymbolicate:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SCRCrashReporter startWithAppName:delegate:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SCRCrashReporter startWithAppName:delegate:onDeviceSymbolicate:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SCRCrashReporter startWithAppName:delegate:watchdog:onDeviceSymbolicate:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SCRCrashReporter configureAdvancedSettings]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRCrashReporter configureCurrentReport:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SCRCrashReporter configureOptionalReport:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SCRCrashReporter reportURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRCrashReporter onDeviceSymbolicate]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRCrashReporter networkOperationQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRCrashReporter currentReport]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRCrashReporter lastCrashReport]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRCrashReporter stateTracker]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRCrashReporter reportManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCREnvironment defaulTelephonyNetworkInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCREnvironment networkType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCREnvironment currentSSID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCREnvironment deviceModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCREnvironment carrierName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCREnvironment clientType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCREnvironment appVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCREnvironment appVersionWithBuild]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCREnvironment systemVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCREnvironment venderId]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCREnvironment currentTimestamp]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCREnvironment freeDiskspace]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRMetaReport filePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRMetaReport encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SCRMetaReport reallyDeleteReport]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRMetaReport retriveCrashReport]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRMetaReport fileExist]", 0)}, 0);
setTimeout(function(){hookObjC("+[SCRReportFilter defaultFilter]", 0)}, 0);
setTimeout(function(){hookObjC("+[SCRReportFilter appleFmtWithUserAndSystemData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SCRReportManager persistentBasePath]", 0)}, 0);
setTimeout(function(){hookObjC("+[SCRReportManager persistentFilenameOfMetaReports]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRReportManager persistMetaReports]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRReportManager collectCrashReports:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SCRReportManager successfulUploadedMetaCrashReport:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SCRReportManager pendingMetaReports]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRReportManager fixCrashReport:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SCRReportManager uploadPendingReports]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRReportManager metaReportsSnapshot]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRReportManager processCrashReports:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SCRReportManager softDelete]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRReportManager deleteAfterUploaded]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRReportManager metaReports]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRReportManager operationQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRReportSink defaultCrashReportFilterSet]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRReportSink filterReports:onCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SCRReportSink reportFromDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SCRStateTracker registerNotification]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRStateTracker applicationDidFinishLaunching]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRStateTracker applicationDidBecomeActive]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRStateTracker applicationWillResignActive]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRStateTracker applicationDidReceiveMemoryWarning]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRStateTracker applicationWillEnterForeground]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRStateTracker applicationDidEnterBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRStateTracker logApplicationState:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SCRStateTracker logSendAction:to:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SCRStateTracker asyncLogEvent:category:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SCRStateTracker dateFormatter]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRWatchdog startWithReportUrl:crashReport:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SCRWatchdog startWatching]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRWatchdog stopWatching]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRWatchdog crashCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRWatchdog reportLastWatchdogCrashReport]", 0)}, 0);
setTimeout(function(){hookObjC("-[SCRWatchdog lastCrashReport]", 0)}, 0);
setTimeout(function(){hookObjC("+[CIPAESSecretHelper secretByName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKError storeSecretErrorUserDescription:callstack:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPError cipf_getSecretErrorUserDescription:callstack:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPError cipf_storeSecretErrorUserDescription:callstack:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPRSAUtil signWith:length:cipherText:rsa:]", 4)}, 0);
setTimeout(function(){hookObjC("+[CIPRSAUtil rsaPublicForKey:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPRSAUtil formatPublicKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPRSAUtil decryptData:withKeyRef:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPRSAUtil addPublicKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPRSAUtil stripPublicKeyHeader:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKMD5Digest addBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKMD5Digest addData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKMD5Digest addString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSHA1Digest addBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKSHA1Digest addData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSHA1Digest addString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKDigest md5Digest]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKDigest sha1Digest]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDigest digestBytes]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDigest addBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKDigest addData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDigest addString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDigest digestString]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKCURLConnection pinPublicKeyForHost:withPinnings:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKCURLConnection pathOFCAStore]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection prepareHTTPS]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection prepareProxySetting]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection prepareRequestHTTPMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection addDNSItems:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection prepareRequestHeaders]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection prepareRequestTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection prepareResponse]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection prepareRequestProgress]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection prepareError]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection resetData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection HTTPMethodWhenRedirect:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection redirectWithURL:statusCode:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection didReceiveResponseFromCurl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection didReceiveDataFromCurl:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection didFinishLoadingFromCurl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection didFailWithErrorFromCurl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection errorString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection currentRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection originalRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection curlHTTPVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection completionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection completionQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection uploadProgressBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection downloadProgressBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection didReceiveResponse]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection didReceiveData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection didFinishLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection didFailWithError]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection needCertificateVerify]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection connectTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection realRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection responseHeaders]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection responseData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection curlRedirectMask]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection enableCurlRedirect]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection followRedirectCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection totalBytesUploaded]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection lastTotalBytesWritten]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection writeProgressState]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection lastTotalBytesRead]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection readProgressState]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection curlCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection connectionDidCompletionWithCURLCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnection connectionDidCompletionWithCURLCode:doCallBack:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKCURLConnection sendAsynchronousRequest:queue:completionBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnectionLoader createWakeupSocketPair]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnectionLoader loaderStart]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnectionLoader addConnection:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnectionLoader connectionDict]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLConnectionLoader pendingConnections]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKCURLError errorWithErrorString:failingURL:curlCode:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLResponseSerialization responseObjectForResponse:data:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLResponseSerialization validateResponse:data:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLResponseSerialization stringEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCURLResponseSerialization acceptableStatusCodes]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKCURLResult statusCode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKCURLResult HTTPVersion:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKCURLResult redirectURL:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKCURLResult effectiveURL:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKCURLResult CURLErrorWithCURLCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSystemProxySettting needHTTPProxySetting]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSystemProxySettting proxyHost]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSystemProxySettting proxyPort]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSystemProxySettting proxyType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSystemProxySettting proxyAuthenticated]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSystemProxySettting pacURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKCustomDNSProtocol shouldHandleBlock]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKCustomDNSProtocol canInitWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKCustomDNSProtocol canonicalRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKCustomDNSProtocol startLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCustomDNSProtocol goDefaultAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCustomDNSProtocol goReplaceAction:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKCustomDNSProtocol hostTransformFailForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKCustomDNSProtocol hostTransformSuccessForRequest:withIP:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKCustomDNSProtocol performOnThread:modes:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKCustomDNSProtocol onThreadPerformBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKCustomDNSProtocol connection:didReceiveData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKCustomDNSProtocol connection:didReceiveResponse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKCustomDNSProtocol connectionDidFinishLoading:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKCustomDNSProtocol connection:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKCustomDNSProtocol connection:willSendRequest:redirectResponse:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKCustomDNSProtocol stopLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCustomDNSProtocol evaluateServerTrust:forDomain:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKCustomDNSProtocol connection:willSendRequestForAuthenticationChallenge:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKCustomDNSProtocol transformRequestByCustomDNSService:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKCustomDNSProtocol realConnection]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCustomDNSProtocol originalHost]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCustomDNSProtocol clientThread]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKDNSClient sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDNSClient networkChange:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDNSClient clearCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDNSClient validateIPs:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDNSClient IPDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDNSClient notSupportedHostSet]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDNSClient serialQueue]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKDNSRequestManager requestIPForHost:completionBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKDNSService sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDNSService networkChange:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDNSService clearCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDNSService requestQueueForHost:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDNSService IPTupleFromLocalCacheForHost:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDNSService updatedIPForHost:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDNSService updatedIPFromRemoteForHost:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDNSService IPDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDNSService IPDictionaryLock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDNSService notSupportedHostSet]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDNSService notSupportedHostSetLock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDNSService hostToRequestQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDNSService hostToRequestQueueLock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDNSTuple needUpdate]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDNSTuple firstIP]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDNSTuple expirationWeak]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTDomainObject instanceWithDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MTDomainObject instanceWithPersistentObject:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainObject predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainObject validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate wasOptional]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate hadSubstring:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate wasString]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate wasNumber]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate wasDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate wasArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate wasBoolean]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate wasNull]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate wasNotNull]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate didValidateValueWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate wasOptional]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate hadSubstring:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate wasString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate wasNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate wasDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate wasArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate wasBoolean]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate wasNull]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate wasNotNull]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate didValidateValueWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate hasSubstring:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate validateValueWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate lengthIsLessThan:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate lengthIsLessOrEqualTo:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate lengthIsEqualTo:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate lengthIsNotEqualTo:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate lengthIsGreaterThanOrEqualTo:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate lengthIsGreaterThan:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate valueIsLessThan:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate valueIsLessOrEqualTo:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate valueIsEqualTo:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate valueIsNotEqualTo:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate valueIsGreaterThanOrEqualTo:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate valueIsGreaterThan:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainPredicate matchesRegularExpression:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate hasSubstring:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate validateValueWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate lengthIsLessThan:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate lengthIsLessOrEqualTo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate lengthIsEqualTo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate lengthIsNotEqualTo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate lengthIsGreaterThanOrEqualTo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate lengthIsGreaterThan:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate valueIsLessThan:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate valueIsLessOrEqualTo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate valueIsEqualTo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate valueIsNotEqualTo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate valueIsGreaterThanOrEqualTo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate valueIsGreaterThan:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate matchesRegularExpression:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate beforeMappingPredicate]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDomainPredicate afterMappingPredicate]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKPropertyTypeProvider propertyClassMapDictionaryForClass:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKPropertyTypeProvider classForProperty:ofClass:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SEHActionSheetParam buttonLabels]", 0)}, 0);
setTimeout(function(){hookObjC("-[SEHConfigParam progressBar]", 0)}, 0);
setTimeout(function(){hookObjC("-[SEHConfigResult failedConfigs]", 0)}, 0);
setTimeout(function(){hookObjC("-[SEHEventParam callbackName]", 0)}, 0);
setTimeout(function(){hookObjC("+[SEHManager shareEHManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SEHManager delayToShow:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SEHManager delayToShow:from:callbackID:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SEHManager forceToShow]", 0)}, 0);
setTimeout(function(){hookObjC("-[SEHManager resetStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[SEHManager didErrorLoadBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SEHManager forceToShowInterval]", 0)}, 0);
setTimeout(function(){hookObjC("-[SEHManager callbackID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SEHOpenResult openStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[SEHTitansNamespace jsapi_open:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SEHTitansNamespace jsapi_actionsheet:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SEHTitansNamespace jsapi_config:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SEHTitansNamespace jsapi_event:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SEHTitansNamespace jsapi_trans:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SEHTitansNamespace jsapi_transComplete:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SEHTitansNamespace jsapi_closeTrans:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SEHTitansNamespace jsapi_signature_closeTrans]", 0)}, 0);
setTimeout(function(){hookObjC("-[SEHTitansNamespace jsBridge]", 0)}, 0);
setTimeout(function(){hookObjC("+[METWifiInfo currentWifiInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[METWifiInfo fixedMacAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("-[METWifiInfo wifiMacAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[METWifiInfo wifiSSID]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKCity predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKCity cityData]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKCity createEntity]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCity cityID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCity provinceName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCity cityName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCity districtName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment _initializeAppInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment _initializeCity]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment _initializeUUID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment generateUUID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment doStartupConfigurationIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment UUID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment unionID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment pragmaOS]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment changeCity:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment cityDistrictKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment saveDistrictName:andDistrictID:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment deleteDistrict]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment districtDict]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment commonParameter]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment clientType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment telephonyNetworkInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment appInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment launchChannel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment pushToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment customPushToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment pushIDString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment UUIDObtainBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment unionIDObtainBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment currentStidObtainBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment currentMSIDObtainBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment JSPatchVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment RNPackageVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEnvironment innerUUID]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKUser predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser mergeValueForKey:fromModel:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKUser toDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser needUpgrade]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser userID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser userName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser tokenDate]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser avatarType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser avatarURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser appUser]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser verifyUnionType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser unionJumpUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser growthLevel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser realLevel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser hasSecurityQuestion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser passwordStrengthLevel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser securityLevel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser doyenUserStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser doyenPageShow]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser doyenPageTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser doyenPageUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser hasPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser hasPaymentPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser hasBindedBankCard]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKUser loginType]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKFactoryConfigurator sharedConfigurator]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKFactoryConfigurator configurationDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKFactoryConfigurator registerFactoryBlock:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKFactoryConfigurator registerFactoryBlock:forKey:priority:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKFactoryConfigurator enumerateFactoryBlockForKey:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKFetchedResultsSectionInfo numberOfObjects]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKFetchedResultsSectionInfo sectionInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKFetchedResultsSectionInfo indexTitle]", 0)}, 0);
setTimeout(function(){hookObjC("+[RavenUtils ravenClient]", 0)}, 0);
setTimeout(function(){hookObjC("+[RavenUtils startWithDSN:]", 1)}, 0);
setTimeout(function(){hookObjC("+[RavenUtils reportMessage:additionalExtra:additionalTags:method:file:line:]", 6)}, 0);
setTimeout(function(){hookObjC("+[RavenUtils reportException:additionalExtra:additionalTags:]", 3)}, 0);
setTimeout(function(){hookObjC("+[RavenUtils sendData]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKDelayRelease delayRelease:withClearBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKError errorWithDomain:code:userDescription:callstack:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAKError userDescription]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKError localizedDescription]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKError logDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKError underlyingError]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKError additionalInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKError createdDate]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKError genericErrorWithCode:callstack:unerlyingError:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAKExceptionReport sharedExceptionReport]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKExceptionReport startWithDSN:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKExceptionReport applicationDidEnterBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKExceptionReport applicationWillEnterForeground]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKExceptionReport transferDetailDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKExceptionReport reportError:withDetail:inModule:method:file:line:]", 6)}, 0);
setTimeout(function(){hookObjC("+[SAKExceptionReport reportException:withDetail:inModule:method:file:line:]", 6)}, 0);
setTimeout(function(){hookObjC("-[SAKExceptionReport backgroundTask]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKMarsLocationCalculator sakf_marsCoordinateFromGPSLocation:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKMarsLocationCalculator outOfChina:longitude:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKMarsLocationCalculator transformLatitude:y:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKMarsLocationCalculator transformLongitude:y:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKSecurityKeychainHelper appIdentifierPrefix]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKSecurityKeychainHelper availableAccessGroup]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKSecurityKeychainUtils storeUsername:andPassword:forServiceName:inKeychainGroup:updateExisting:error:]", 6)}, 0);
setTimeout(function(){hookObjC("+[SAKSecurityKeychainUtils forceStoreUsername:andPassword:forServiceName:inKeychainGroup:error:]", 5)}, 0);
setTimeout(function(){hookObjC("+[SAKSecurityKeychainUtils storeUsername:andPassword:forServiceName:attributeAccessible:inKeychainGroup:updateExisting:forceUpdating:error:]", 8)}, 0);
setTimeout(function(){hookObjC("+[SAKSecurityKeychainUtils deleteItemForUsername:andServiceName:inKeychainGroup:error:]", 4)}, 0);
setTimeout(function(){hookObjC("+[SAKSecurityKeychainUtils purgeItemsForServiceName:inKeychainGroup:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKThreadSafeMutableDictionary objectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKThreadSafeMutableDictionary keyEnumerator]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKThreadSafeMutableDictionary enumerateKeysAndObjectsWithOptions:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKThreadSafeMutableDictionary removeObjectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKThreadSafeMutableDictionary descriptionWithLocale:indent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKTimer innerTimerTick_:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKTimer fireDate]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKTimer finallyInvalidate]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKTimer userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKTimer addToRunloop:forMode:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKTimer innerTimer]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKURLComponents componentsWithURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKURLComponents queryParameterDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKURLComponents allQueryItems]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKURLComponents URL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKURLComponents queryItems]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKURLComponents sameQueryKeySupported]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKGuardCommon userIdentification]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKGuardCommon encrypt:withKey:byAlgorithm:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAKGuardCommon decrypt:withKey:byAlgorithm:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKGuardDataProcessor locationManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKGuardDataProcessor teleNetInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKGuardDataProcessor collectData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKGuardDataProcessor packData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKGuardDataProcessor startCollection]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKGuardDataProcessor locationManager:didUpdateLocations:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKGuardDataProcessor locationManager:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKGuardDataProcessor reportData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKGuardRootDetection startDetection]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKRequestSignatureProcessor attachSiuaForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKRequestSignatureProcessor signaturedRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKRequestSignatureProcessor bodyStringWithParameterString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKRequestSignatureProcessor userAgent]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKHorn sharedInstace]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHorn commonInit:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKHorn registerType:parameters:callback:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKHorn didEnterBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHorn didEnterForeground]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHorn startPoll]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHorn scheduleTimerAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHorn executePoll]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHorn startSharkPush]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHorn fetcherForType:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKHorn registerType:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKHorn registerType:parameters:callback:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAKHorn currentSDKVersion]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKHorn currentUUID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHorn configFetchers]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHorn scheduleTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHorn sharkPushService]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornConfiguration hornToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornConfiguration requestTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornContext commonInit]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornContext contextParametersDict]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornContext sdkVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornContext deviceType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornContext osVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornContext appVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornContext packageName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornContext deviceProvider]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFetcher applyLocalCacheConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFetcher clearConfigCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFetcher saveEtag:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFetcher deleteEtag]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFetcher saveConfigContent:source:completionBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFetcher applyErrorCallback]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFetcher etagInInResponse:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFetcher loadConfigForced:fromSource:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFetcher loadConfigForced:fromSource:pushLogs:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFetcher executePoll]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFetcher fetcherConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFetcherConfig resetConfigs]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFetcherConfig syncDisk]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFetcherConfig applyFetcherConfig:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFetcherConfig cacheContent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFetcherConfig clearCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFetcherConfig etagValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFetcherConfig customData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFetcherConfig cacheDuration]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFetcherConfig pollPeriod]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFetcherConfig pollDuration]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFileCache ioLock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFileCache storeFile:content:forType:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFileCache deleteFile:forType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFileCache filePathForKey:forFileType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFileCache hornFileDirForFileType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKHornFileCache cachedFileNameForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKHornLogger log:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKHornNetwork enableMock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornNetwork buildMockURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKHornNetwork serverURLWithType:parameters:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKHornNetwork reportMonitorLogs:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKHornNetwork networkQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornNetwork innerEnableMock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornSharkPushService startSinglePush]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornSharkPushService startMultiplePush]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHornSharkPushService handleMessageData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKHornSharkPushService descriptionForPushState:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKHornSharkPushService messageDataToString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKHornSharkPushService handlePushMessageBlock]", 0)}, 0);
setTimeout(function(){hookObjC("+[METBus sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[METBus busObjectForName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[METBus registerBusObjectFactoryBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[METBus callData:param:]", 2)}, 0);
setTimeout(function(){hookObjC("+[METBus asyncCallData:result:param:]", 3)}, 0);
setTimeout(function(){hookObjC("-[METBus dataBusObjectMap]", 0)}, 0);
setTimeout(function(){hookObjC("-[METBusObject doDataJob:params:]", 2)}, 0);
setTimeout(function(){hookObjC("-[METBusObject doAsyncDataJob:params:resultBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[METBusObject businessNamePrefix]", 0)}, 0);
setTimeout(function(){hookObjC("-[METBusObject bizNamePrefix]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKArray countByEnumeratingWithState:objects:count:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAKArray arrayWithObjects:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKArray objectAtIndex:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKArray addObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKArray objectAtIndexedSubscript:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKAsyncEvent eventWithActionBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKAsyncEvent start:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKAsyncEvent completeObserve:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKAsyncEvent errorObserve:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKAsyncEvent sendComplete:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKAsyncEvent sendError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKAsyncEvent completeInMainThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAsyncEvent asyncActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAsyncEvent cancelBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAsyncEvent errorBlocks]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBinding mutableMap:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBinding reverseMap:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBinding reverseFilter:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKBinding accessInstanceVariablesDirectly]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBinding commonInit:sourcePath:target:targetPath:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAKBinding targetPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBinding addMutableWithTarget:targetPath:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKBinding updateSourceForTargetValue:oldValue:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKBinding disconnectWithEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBinding clearAll]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBinding activateAutoTrigger]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBinding parentManage]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBinding bothwaySource]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBinding reverseBinding]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBinding targetEvent]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBinding observeBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBindManage addBinding:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBindManage removeBinding:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBindManage removeAllBinding]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCollectionActionEvent addObjects]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCollectionActionEvent removeObjects]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKCommand commandWithAction:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKCommand commandWithAsyncBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKCommand commandWithAsyncProtocol:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKCommand commandWithAsyncAction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKCommand execute:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKCommand canExecute]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCommand asyncAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCommand asyncActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCommand cancelBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCommand asyncProtocol]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEvent triggerCommand:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKEvent observeBlocks]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEvent sendArgs:sender:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKEvent triggerNewEvent]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEvent send:sender:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKEvent send:oldValue:sender:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKEvent addObserve:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKEvent removeObserve:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKEvent removeAllWithEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKEvent removeAllObserves]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKEventArgs argsWithValue:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKEventArgs argsWithValue:oldValue:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKEventArgs oldValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEventArgs objectForKeyedSubscript:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKPropertyEvent propertyObserveBlocks]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPropertyEvent addObserve:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKPropertyEvent addPropertyObserve:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKPropertyEvent currentValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPropertyEvent sendArgs:sender:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKPropertyEvent send:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKPropertyEvent triggerWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKPropertyEvent removePropertyObserve:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKPropertyEvent removeObserve:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKPropertyEvent removeAllPropertyObserves]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPropertyEvent removeAllObserves]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPropertyEvent autoDisconnect]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPropertyEvent disconnectWithObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKPropertyEvent observeValueForKeyPath:ofObject:change:context:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAKPropertyEvent activateAutoTrigger]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPropertyEvent destroyObserveEvent]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPropertyEvent propertyBlocks]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSectionCollection sectionChangedEvent]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSectionCollection sectionObjectsChangedEvent]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSectionCollection addSection:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSectionCollection sectionAtIndex:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSectionCollection insertSection:atIndex:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKSectionCollection removeSectionAtIndex:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSectionCollection removeSection:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSectionCollection clearAll]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSectionCollection replaceSectionAtIndex:withSection:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKSectionCollection updateObjectsCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSectionCollection indexPathForObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSectionCollection addEmptySection]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSectionCollection addSectionWithObjects:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSectionCollection addObjectsInLastSection:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSectionCollection objectAtIndexPath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSectionCollection removeObjectAtIndexPath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSectionCollection operationsBegin]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSectionCollection operationsEnd]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSectionCollection objectAtSection:atRow:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKSectionCollection enumerateObjectsBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSectionCollection objectsCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSectionCollection notifyClose]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPError mtbs_errorProcess]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBSApplyCreditCardInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBSApplyCreditCardInfo backgroundImageURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBSApplyCreditCardInfo linkURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBSApplyCreditCardInfo backgroundImageURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBSApplyCreditCardInfo linkURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBSBankCard predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBSBankCard iconURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBSBankCard watermarkURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBSBankCard bankCardID]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBSBankCard bankName]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBSBankCard tailNO]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBSBankCard cardTypeString]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBSBankCard iconURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBSBankCard watermarkURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBSBankCard cardMask]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBSBankCardBindingActivityInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBSBankCardBindingActivityInfo linkURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBSBankCardBindingActivityInfo linkURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBSBankCardListInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBSBankCardListInfo creditCardArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBSBankCardListInfo debitCardArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBSBankCardListInfo applyCreditCardArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBSBankCardManager defaultBankCardManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBSBankCardManager cleanData]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBSBankCardManager useCustomBarBackup]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBSBankCardManager bandCardBindingProcessController]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBSBindCardResultInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBSBindCardResultInfo pageMessage]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBSBindCardResultInfo bankCardBindingResult]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTBSVerifyPasswordPageTipInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBSVerifyPasswordPageTipInfo pageTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBSVerifyPasswordPageTipInfo subPageTip]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPBankListInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPBankListInfo noCredit]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPBankListInfo creditDesc]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPBankListInfo debitBankArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPBankListInfo creditBankArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPBindPayErrorGuideInfo mtp_paymentAmountForPaymentMethod:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTPBindPayErrorGuideInfo mtp_isPaymentAmountChangedForPaymentMethod:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTPBindPayErrorGuideInfo mtp_alertTitleWithPaymentMethod:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MTPBindPayErrorGuideInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPBindPayErrorGuideInfo alertInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPBindPayErrorGuideInfo transInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPBindPayErrorGuideInfo banklistPageInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPBindPayErrorGuideTransInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPBindPayErrorGuideTransInfo orderMoney]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPBindPayErrorGuideTransInfo previousOrderMoney]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPContractFooterInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPContractFooterInfo footerURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractFooterInfo footerTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractFooterInfo footerURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPContractInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPContractInfo resultURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo tradeID]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo pageTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo pageTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo realNameTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo bankName]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo totalFee]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo attachmentParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo externalParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo paymentVerifyInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo factorArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo needBindCard]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo checkBindCard]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo bindCardTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo agreementArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo submitURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo fingerprintInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo faceAuthenticationInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo noPasswordConfirmInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo noPasswordGuideInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo promotionInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo pageMessage]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo bindcardMessage]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo buttonText]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo verificationCodeCallBackMessage]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo cancelAlertInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo cardBINRecognizeFailAlertInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo verifyPaymentPasswordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo needSetPasswordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo footerInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo bankList]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo orderMoney]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo noPasswordAdjustCreditGuideInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo bindPayErrorGuideInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo updateCardFactorsAlertInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo realNameGuideInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo pageName]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo contractPageHelpInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo resultURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo canUploadCardImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo refreshPage]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo unregisteRealNameResultAlertInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo signCampaignInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo prepayInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo prepayErrorGuideInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo realNameSecurityTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfo supportBankInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPContractInfoAlertInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfoAlertInfo pageTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfoAlertInfo pageTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfoAlertInfo cancelTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractInfoAlertInfo submitURLString]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPContractPageHelpGuide predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractPageHelpGuide buttonTitle]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPContractPageHelpInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractPageHelpInfo helpText]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPContractPageHelpInfo helpGuide]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPNeedSetPasswordInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPNeedSetPasswordInfo firstPageTipInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPNeedSetPasswordInfo secondPageTipInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPNeedSetPasswordInfo cancelAlertInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPNeedSetPasswordInfo bottomTip]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPNeedSetPasswordTipInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPNeedSetPasswordTipInfo mainTitleTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPNeedSetPasswordTipInfo viceTitleTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPNeedSetPasswordTipInfo submitURLString]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPNoPasswordAdjustCreditGuideInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPNoPasswordAdjustCreditGuideInfo defaultCredit]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPNoPasswordAdjustCreditGuideInfo currentCredit]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPNoPasswordAdjustCreditGuideInfo creditArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPNoPasswordAdjustCreditGuideInfo submitURLString]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPNoPasswordConfirmInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPNoPasswordConfirmInfo checkboxTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPNoPasswordConfirmInfo buttonTitle]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPNoPasswordGuideInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPNoPasswordGuideInfo agreementURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPNoPasswordGuideInfo agreementTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPNoPasswordGuideInfo agreementName]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPNoPasswordGuideInfo agreementURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPNoPasswordGuideInfo openSuccessTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPNoPasswordGuideInfo submitURLString]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPPayment defaultPayment]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPayment redirectToCallbackURLIfExist]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPayment clearPaymentData]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPayment payment:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTPPayment paymentDidFinish:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTPPayment payment:didFinishWithInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTPPayment paymentDidCancel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTPPayment paymentDidPayed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTPPayment processorController]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPayment callbackURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPPaymentVerifyInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPaymentVerifyInfo verifyType]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPaymentVerifyInfo pageTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPaymentVerifyInfo pageTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPaymentVerifyInfo transInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPaymentVerifyInfo paymentTypeInfoArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPaymentVerifyInfo buttonTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPaymentVerifyInfo submitURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPaymentVerifyInfo banklistPageInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPaymentVerifyInfo fingerPrintInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPaymentVerifyInfo faceAuthenticationInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPaymentVerifyInfo payGuideInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPaymentVerifyInfo useNoPasswordPay]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPaymentVerifyInfo expireTimestamp]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPaymentVerifyInfo currentTimestamp]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPaymentVerifyInfo bankCardID]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPaymentVerifyInfo mtp_bankCardListStatus]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPPaymentVerifyTransInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPaymentVerifyTransInfo orderMoney]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPaymentVerifyTransInfo labelArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPPrepayAgreementInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPrepayAgreementInfo canSelect]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPrepayAgreementInfo preTips]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPrepayAgreementInfo agreementURLString]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPPrepayErrorGuideInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPrepayErrorGuideInfo alertInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPrepayErrorGuideInfo banklistPageInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPPrepayInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPrepayInfo userPolicy]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPrepayInfo prepayTitleInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPrepayInfo detailText]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPrepayInfo banklistPageInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPPrepayTitleInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPPrepayTitleInfo subTitle]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPRealNameGuideInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPRealNameGuideInfo submitURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPRealNameGuideInfo buttonTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPRealNameGuideInfo pageTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPRealNameGuideInfo pageTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPRealNameGuideInfo agreementName]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPRealNameGuideInfo agreementURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPRealNameGuideInfo canAutoSubmit]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPVerifyPayGuideInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPVerifyPayGuideInfo noPasswordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPVerifyPayGuideInfo noPasswordAdjustCreditInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPVerifyPayGuideInfo noPasswordAgreementInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPVoiceVerificationInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPVoiceVerificationInfo pageRequestURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPVoiceVerificationInfo entryText]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPVoiceVerificationInfo pageRequestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankPaymentMethod mtp_paramDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace jsapi_identityAuthenticationUnregister:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTPParamMeituanpay pay_token]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPParamMeituanpay trans_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace jsapi_callMeituanPay:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace payment:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace paymentDidFinish:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace payment:didFinishWithInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace paymentDidCancel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace paymentDidPayed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace jsapi_signature_callMeituanPay]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyBindPayData mtp_paramDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLeakObject rootObjectClassName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLeakObject className]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKLeakObject propertyName]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKMemoryLeakMonitor sharedMonitor]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKMemoryLeakMonitor leakObjectArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKMemoryLeakMonitor addLeakObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKMemoryLeakMonitor tipsWithLeakObjectArray:findRetainCycles:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKMemoryLeakMonitor turnOffMemoryLeakMonitor:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKMemoryLeakMonitor memoryLeakMonitorIsTurnedOff]", 0)}, 0);
setTimeout(function(){hookObjC("+[CIPError cip_networkErrorWithOperation:andError:callstack:]", 3)}, 0);
setTimeout(function(){hookObjC("+[CIPError cip_networkErrorWithCode:callstack:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPError cip_networkErrorWithCode:callstack:underlyingError:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CIPError cip_isNetworkError]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKError networkErrorWithOperation:andError:callstack:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAKError networkErrorWithCode:callstack:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKError networkErrorWithCode:callstack:underlyingError:]", 3)}, 0);
setTimeout(function(){hookObjC("+[MTHTTPRequestOperation operationToEncapsulateSignal:andDisposable:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTHTTPRequestOperation connection:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTHTTPRequestOperation connectionDidFinishLoading:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTHTTPRequestOperation logDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTHTTPRequestOperation encapsulatedSignal]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTHTTPRequestOperation encapsulatedDisposable]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTQueryStringPair URLEncodedStringValueWithEncoding:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKHTTPCacheProtocol clearCache]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKHTTPCacheProtocol canInitWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKHTTPCacheProtocol canonicalRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKHTTPCacheProtocol requestSaveToCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHTTPCacheProtocol requestSendToNetwork]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHTTPCacheProtocol sendCachedURLResponse:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKHTTPCacheProtocol sendNetworkRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHTTPCacheProtocol startLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHTTPCacheProtocol stopLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHTTPCacheProtocol connection:didReceiveData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKHTTPCacheProtocol connectionDidFinishLoading:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKHTTPCacheProtocol connection:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKHTTPCacheProtocol connection:didReceiveResponse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKHTTPCacheProtocol connection:willSendRequest:redirectResponse:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKHTTPCacheProtocol connection:willSendRequestForAuthenticationChallenge:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKHTTPCacheProtocol shouldCacheResponse]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager executeHTTPRequest:uploadProgress:downloadProgress:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager executeHTTPRequest:plugin:uploadProgress:downloadProgress:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager executionBlockWithUploadProgress:downloadProgress:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager executeHTTPRequest:uploadProgress:userInfo:plugin:completion:]", 5)}, 0);
setTimeout(function(){hookObjC("-[MTNetworkCallback userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKNetworkManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager supportClassifyMobileNetworkStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager logOperation:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager postURL:URLParameters:bodyParameters:hooks:userInfo:onFinish:]", 6)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager postURL:URLParameters:bodyParameters:downloadProgress:parameterEncoding:hooks:userInfo:onFinish:]", 8)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager postURL:URLParameters:bodyParameters:downloadProgress:parameterEncoding:hooks:userInfo:onFinish:timeoutInterval:]", 9)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager postURL:URLParameter:bodyParameters:uploadingFiles:uploadProgress:parameterEncoding:hooks:userInfo:onFinish:]", 9)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager putURL:URLParameters:bodyParameters:parameterEncoding:hooks:userInfo:onFinished:]", 7)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager deleteURL:URLParameters:bodyParameters:parameterEncoding:hooks:userInfo:onFinished:]", 7)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager executeHTTPRequest:uploadProgress:hooks:userInfo:onFinish:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager executeHttpRequest:hooks:userInfo:onFinish:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager executeHttpRequest:downloadProgress:hooks:userInfo:onFinish:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager callbackKeyForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager addCallback:andUserInfo:forKey:createCallback:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager removeCallbacksForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager callbacksForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager networkingReachabilityDidChangeNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager mobileNetworkingReachabilityDidChangeNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager networkStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager mobileNetworkStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager networkReachability]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager callbackInMainThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager operationQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager callBacks]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager httpWhiteList]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKNetworkManager reachAbility]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPError spa_balanceErrorProcess]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPError spa_errorProcess]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPError SPA_errorProcess]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPAAccountBalanceInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPAAccountBalanceInfo balanceDetailURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPAAccountBalanceInfo bottomURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPAAccountBalanceInfo balanceDetailURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPAAccountBalanceInfo bottomText]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPAAccountBalanceInfo bottomURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPAApplyCreditCardControl requiresConstraintBasedLayout]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPAApplyCreditCardControl updateConstraints]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPAApplyCreditCardControl dataSource]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPAApplyCreditCardInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPAApplyCreditCardInfo backgroundImageURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPAApplyCreditCardInfo linkURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPAApplyCreditCardInfo backgroundImageURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPAApplyCreditCardInfo linkURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPAAuthenticationInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPAAuthenticationInfo redSpot]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPABalanceAmountInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPABalanceBankCardInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPABalanceBankCardInfo bindCardURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABalanceBankCardInfo hasBindedCards]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABalanceBankCardInfo hasAvailableCards]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABalanceBankCardInfo bindCardURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABalanceBankCardInfo banklistPage]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPABalanceBankPaymentMethod predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABalanceBankPaymentMethod rechargeLargeAmountPrompt]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPABalanceDealBaseInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPABalanceDealBaseInfo bindCardURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPABalanceDealBaseInfo realNameURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABalanceDealBaseInfo hasBankCardList]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABalanceDealBaseInfo bindCardURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABalanceDealBaseInfo realNameURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABalanceDealBaseInfo bankListPage]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABalanceDealBaseInfo needSign]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABalanceDealBaseInfo contractTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABalanceDealBaseInfo contractURLString]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPABalanceManager defaultInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABalanceManager asyncBalanceAmount:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SPABalanceWithdrawInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPABalanceWithdrawInfo expenseIntroductionsURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABalanceWithdrawInfo withdrawRate]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABalanceWithdrawInfo totalBalance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABalanceWithdrawInfo expenseIntroductionsURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABalanceWithdrawInfo withdrawNO]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPABalanceWithdrawSMSControlInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABalanceWithdrawSMSControlInfo pageTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABalanceWithdrawSMSControlInfo pageTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABalanceWithdrawSMSControlInfo smscodeURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABalanceWithdrawSMSControlInfo submitURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPABankCard predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPABankCard iconURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPABankCard watermarkURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABankCard bankCardID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABankCard bankName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABankCard tailNO]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABankCard cardTypeString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABankCard iconURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABankCard watermarkURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABankCard cardMask]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPABankCardBindingActivityInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPABankCardBindingActivityInfo linkURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABankCardBindingActivityInfo linkURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPABankCardListInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPABankCardListInfo faqURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABankCardListInfo creditCardArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABankCardListInfo debitCardArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABankCardListInfo applyCreditCardArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABankCardListInfo faqURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPABankCardListPageInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABankCardListPageInfo wts_defaultSelectedPaymentMethod]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPABankCardManager defaultBankCardManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABankCardManager cleanData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABankCardManager useCustomBarBackup]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPABindCardResultInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABindCardResultInfo pageMessage]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPABindCardResultInfo bankCardBindingResult]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPACloseFlashPayFeedbackInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPACloseFlashPayFeedbackInfo feedbackItemArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPAFingerprintPaymentOnInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPAFingerprintPaymentOnInfo pageTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPAFingerprintPaymentOnInfo subPageTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPAFingerprintPaymentOnInfo rejectDescription]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPAFingerprintPaymentSwitchInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPAFlashPaySetupInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPAFlashPaySetupInfo needUserFeedBack]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPAFlashPaySetupInfo closeContent]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPAFlashPaySetupInfo feedbackInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPANeedSetPasswordInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPANeedSetPasswordInfo phoneNumber]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPANoPasswordManagementInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPANoPasswordManagementInfo mtNoPasswordPayInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPANoPasswordManagementInfo wxNoPasswordPayInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPANoPasswordPaymentInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPANoPasswordPaymentInfo needBindCard]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPANoPasswordPaymentInfo bindCardAlertInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPANoPasswordPaymentInfo successAlertInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPANoPasswordPaymentInfo noPasswordPayEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPANoPasswordPaymentInfo noPasswordPaymentOnInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPANoPasswordPaymentInfo noPasswordPaymentOffInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPANoPasswordPaymentInfo defaultQuota]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPANoPasswordPaymentInfo quotasArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPANoPasswordPaymentInfo agreementArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPANoPasswordPaymentInfo flashPayInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPANoPasswordPaymentOnInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPANoPasswordPaymentOnInfo headTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPANoPasswordPaymentOnInfo tailTip]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPANoPasswordSettingAlertInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPAPaymentManagementInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPAPaymentManagementInfo authenticationInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPAPaymentManagementInfo fingerPrintPayItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPAPaymentManagementInfo noPasswordPayItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPAPaymentManagementInfo wxNoPasswordPayItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPAPaymentManagementInfo needSetPasswordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPAVerifyPasswordPageTipInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPAVerifyPasswordPageTipInfo linkURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPAVerifyPasswordPageTipInfo pageTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPAVerifyPasswordPageTipInfo subPageTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPAVerifyPasswordPageTipInfo linkURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[MPCAlipay currentAppAlipayScheme]", 0)}, 0);
setTimeout(function(){hookObjC("+[MPCCandidatePaymentMethodInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCCandidatePaymentMethodInfo subTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCCandidatePaymentMethodInfo labelString]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCCandidatePaymentMethodInfo pageTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCCandidatePaymentMethodInfo allBindCardUnavailablePrompt]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCCandidatePaymentMethodInfo paymentMethodShiftInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCCandidatePaymentMethodInfo paymentMethodShiftBlackList]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCCandidatePaymentMethodInfo useNoPasswordPay]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCCandidatePaymentMethodInfo selectedSubpaymentMethod]", 0)}, 0);
setTimeout(function(){hookObjC("+[MPCPaymentChannel processPaymentResultWithURL:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MPCPaymentMethod predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCPaymentMethod spk_title]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCPaymentMethod iconInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCPaymentMethod paymentAmount]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCPaymentMethod iconURLStringArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCPaymentMethod candidatePaymentMethodInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCPaymentMethod paySystemUnavailablePrompt]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCPaymentMethod paymentUavailableDialogContent]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCPaymentMethod payNameIconInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCPaymentMethod payBackgroundIcon]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCPaymentMethod paymentMehotdExtendName]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCPaymentMethod remainMoney]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCPaymentMethod useNoPasswordPay]", 0)}, 0);
setTimeout(function(){hookObjC("+[MPCPaymentMethodShiftInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MPCQQWallet registQQWalletSDKWithAppId:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MPCQQWallet currentAppQQWalletScheme]", 0)}, 0);
setTimeout(function(){hookObjC("+[MPCQQWallet handleResultWithURL:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MPCUnionPay currentAppUnionpayScheme]", 0)}, 0);
setTimeout(function(){hookObjC("+[MPCUnionPay handlePaymentResult:completeBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("+[MPCWeixin defaultInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeixin currentAppWechatScheme]", 0)}, 0);
setTimeout(function(){hookObjC("+[MPCWeiXinNoPasswordConfigInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordConfigInfo wxNoPasswordCanOpen]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordConfigInfo wxNoPasswordPayEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordConfigInfo wxNoPasswordPaymentOnInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordConfigInfo wxNoPasswordPaymentOffInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[MPCWeiXinNoPasswordGuideInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MPCWeiXinNoPasswordGuideInfo contractURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordGuideInfo guideURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordGuideInfo noPasswordMessage]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordGuideInfo noPasswordLimit]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordGuideInfo contractPrefix]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordGuideInfo contractName]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordGuideInfo contractURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[MPCWeiXinNoPasswordPay defaultWeiXinNoPasswordPay]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordPay pollingWeixinNopasswordResult]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordPay handleWeiXinNoPasswordWithURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordPay payToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordPay tradeNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordPay guideURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordPay wxnpPlatformType]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordPay wxnpFailResult]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordPay timerSignalDisposable]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordPay wxnpOpenFinished]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordPay needPolling]", 0)}, 0);
setTimeout(function(){hookObjC("+[MPCWeiXinNoPasswordPaymentInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCWeiXinNoPasswordPaymentInfo descInfoArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[MPCWeiXinNoPasswordResult predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKAppleWalletBindCardParams primaryAccountIdentifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKAppleWalletBindCardParams cardholderName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKAppleWalletBindCardParams localizedDescription]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKAppleWalletBindCardParams primaryAccountSuffix]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKAppleWalletBindCardParams requestKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKAppleWalletBindCardParams primaryAccountNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePay successBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePay failureBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePay cancelledBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePay appleWalletBindCardParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTAPApplePay paymentRequestWithMerchantIdentifier:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MTAPApplePay applyPaySupportedNetworks]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTAPApplePay defaultInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTAPApplePay errorMessageWithCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePay summaryItemsWithPayee:amount:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePay preInterceptor:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePay requestApplePayResult]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePay clearData]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePay completionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePay payToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePay tradeNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePay payType]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePay campaignID]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePay cashticketCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePay reduceMoney]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePay applePayResultStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePay paymentError]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePay requestingApplePay]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePay waitingRequestCallBack]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePay errorCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePay errorMessage]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePay promotionInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTAPApplePayResult predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePayResult paidByCredit]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePayResult payType]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPApplePayResult promotionInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTAPAppleWalletBindCardResult predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPAppleWalletBindCardResult encryptedPassData]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPAppleWalletBindCardResult activationData]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPAppleWalletBindCardResult wrappedKeyData]", 0)}, 0);
setTimeout(function(){hookObjC("-[MPCParamWeixinNoPassword weixinGuideURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace jsapi_openWeixinNoPassword:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTAPAvailableStatusInfo availableStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPAvailableStatusInfo iPhoneSPANIDArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTAPAvailableStatusInfo iWatchSPANIDArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace jsapi_isInAppProvisioningAvailable:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace jsapi_startInAppProvisioning:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SPGAESKeyManager hasAESKeyInKeychain]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPGAESKeyManager obtainAESKeyFromKeychain]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPGAESKeyManager deleteAESKeyFromKeychain]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPGAESKeyManager saveAESKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SPGAESKeyManager generateAESKey]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPGDataStorageManager sharedStorageManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPGDataStorageManager saveString:forKey:storageLocation:shouldEncrypt:updateExisting:error:]", 6)}, 0);
setTimeout(function(){hookObjC("-[SPGDataStorageManager stringForKey:storageLocation:shouldDecrypt:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SPGDataStorageManager deleteStringForKey:storageLocation:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPGDataStorageManager saveStringAssociatedUserID:forKey:storageLocation:shouldEncrypt:updateExisting:error:]", 6)}, 0);
setTimeout(function(){hookObjC("-[SPGDataStorageManager stringAssociatedUserIDForKey:storageLocation:shouldDecrypt:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SPGDataStorageManager deleteStringAssociatedUserIDForKey:storageLocation:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPGDataStorageManager saveString:forKey:withUserID:storageLocation:shouldEncrypt:updateExisting:error:]", 7)}, 0);
setTimeout(function(){hookObjC("-[SPGDataStorageManager stringForKey:withUserID:storageLocation:shouldDecrypt:error:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SPGDataStorageManager deleteStringForKey:withUserID:storageLocation:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SPGKeychainWrapper deleteValueForKey:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SPGObjectCacheManager sharedCacheManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPGObjectCacheManager saveObject:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPGObjectCacheManager objectForKey:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPGObjectCacheManager saveObjectAssociatedUserID:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPGObjectCacheManager objectAssociatedUserIDForKey:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPGObjectCacheManager cleanCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPGObjectCacheManager cleanCacheAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPGObjectCacheManager saveObject:forKey:withUserID:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SPGObjectCacheManager objectForKey:withUserID:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SPGObjectCacheManager objectCacheManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPGObjectCacheManager rootPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPError spk_promptWithDomain:completionBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPError spk_paymentErrorWithDomain:code:level:extraInfo:localizedDescription:callstack:userInfo:]", 7)}, 0);
setTimeout(function(){hookObjC("+[CIPError spk_paymentErrorWithDomain:code:level:localizedDescription:callstack:userInfo:]", 6)}, 0);
setTimeout(function(){hookObjC("+[CIPError spk_paymentErrorWithCode:level:localizedDescription:callstack:userInfo:]", 5)}, 0);
setTimeout(function(){hookObjC("-[CIPError spk_level]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPError spk_errorExtraInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPError spk_errorCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPError spk_errorMessage]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKMonthPicker monthComponent]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKMonthPicker yearComponent]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKMonthPicker monthFormatter]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKMonthPicker yearFormatter]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKMonthPicker monthStrings]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKMonthPicker commonInit]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKMonthPicker updateConstraints]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKMonthPicker yearFromRow:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKMonthPicker rowFromYear:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKMonthPicker minimumYear]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKMonthPicker maximumYear]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKMonthPicker wrapMonths]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKMonthPicker enableColourRow]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKMonthPicker fontColour]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKMonthPicker yearFirst]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKMonthPicker verticalLine]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKPaymentCommonConfigure shareConfigure]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPaymentCommonConfigure locationString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPaymentCommonConfigure UUID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPaymentCommonConfigure cityID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPaymentCommonConfigure userID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPaymentCommonConfigure userToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPaymentCommonConfigure catAppID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPaymentCommonConfigure requestUserID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPaymentCommonConfigure requestUserToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPaymentCommonConfigure requestCityID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPaymentCommonConfigure requestUUID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPaymentCommonConfigure requestLocationString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPaymentCommonConfigure appName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPaymentCommonConfigure appChannel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPaymentCommonConfigure appVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPaymentCommonConfigure osVersion]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKPaymentUniversalLinkManager handleUniversalLinkUserActivity:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SPKABTestInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKAdInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKAdInfo imageURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKAdInfo imageURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKAdInfo haveAdNumber]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKAgreement predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKAgreement URLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKAgreement canSelect]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKAlertViewTemplateB doLayout]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKAlertViewTemplateB requiresConstraintBasedLayout]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKAlertViewTemplateB updateConstraints]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKBank predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBank bankType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBank cardType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBank payType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBank iconInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBank statusInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBank largeAmountPaymentThreshold]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBank largeAmountPaymentPrompt]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKBankCardInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankCardInfo bankCardID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankCardInfo cardDescription]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKBankCardListPageInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankCardListPageInfo pageTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankCardListPageInfo bankCardList]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankCardListPageInfo spk_defaultSelectedPaymentMethodOrNil]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankCardListPageInfo spk_defaultSelectedPaymentMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankCardListPageInfo spk_isAllBankCardInvalid]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankCardListPageInfo spk_isAllBankCardExeedThreshold]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankCardListPageInfo spk_isAllBindCardOrBalancePayInvalid]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankCardListPageInfo spk_useNewCardPaymentMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankCardListPageInfo spk_bankCardsExceptUseNewCard]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankCardListPageInfo spk_bankCardListStatus]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKBankDiscountInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankDiscountInfo campaignID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankDiscountInfo cashticketCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankDiscountInfo reduceAmount]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKBankDiscounts predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankDiscounts noBalanceDiscountInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankDiscounts useBalanceDiscountInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKBankInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKBankInfo iconURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankInfo bankName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankInfo iconURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankInfo bankLimitInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankInfo labelArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKBankLimitInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKBankLimitInfo banksLimitURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankLimitInfo currentBankLimitString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankLimitInfo banksLimitString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankLimitInfo banksLimitURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKBankPaymentMethod predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankPaymentMethod bankCardInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankPaymentMethod iconInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankPaymentMethod labelArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankPaymentMethod bankType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankPaymentMethod cardType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankPaymentMethod submitURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankPaymentMethod paytypeID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankPaymentMethod needSelected]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankPaymentMethod spk_isPaymentMethodBindPay]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankPaymentMethod spk_isPaymentMethodCardBIN]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankPaymentMethod spk_isPaymentMethodCampaignBank]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankPaymentMethod spk_isPaymentMethodBalancePay]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankPaymentMethod spk_isPaymentMethodBindPayOrBalancePay]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankPaymentMethod spk_title]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankPaymentMethod spk_statusDescription]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankPaymentMethod spk_isPaymentAmountExceedThreshold]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBankPaymentMethod spk_paytypeID]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKBanner predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKBanner imgURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKBanner linkURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBanner imgURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBanner linkURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBanner bannerID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBannerPageControl updateDots]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBannerPageControl activeImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBannerPageControl inactiveImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKBasePaymentMethod predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBasePaymentMethod spk_discountMoney]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBasePaymentMethod spk_campaignID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBasePaymentMethod spk_cashticketCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBasePaymentMethod methodID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBasePaymentMethod statusInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBasePaymentMethod canUseCashTicket]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBasePaymentMethod largeAmountPaymentThreshold]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBasePaymentMethod largeAmountPaymentPrompt]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBasePaymentMethod spk_displayStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBasePaymentMethod spk_title]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBasePaymentMethod spk_statusDescription]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKBiometricsInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBiometricsInfo pageTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBiometricsInfo pageTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBiometricsInfo pageSubTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBiometricsInfo needUseGuide]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBiometricsInfo passwordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBiometricsInfo openFingerprintGuideInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBiometricsInfo openFaceAuthenticationGuideInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBiometricsInfo submitURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBiometricsInfo buttonTitle]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKBiometricsManager availableBiometricsType]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKBiometricsManager biometricInfoDomainState]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKBiometricsManager verifyBiometricInfoWithType:successBlock:userFallbackBlock:userCancelBlock:authenticationFailedBlock:unavailableBlock:localizedReason:localizedFallbackTitle:]", 8)}, 0);
setTimeout(function(){hookObjC("+[SPKBiometricsSwitchPasswordInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBiometricsSwitchPasswordInfo pageTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBiometricsSwitchPasswordInfo verifyType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBiometricsSwitchPasswordInfo buttonTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKBiometricsSwitchPasswordInfo tipText]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKCashTicketInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKCashTicketInfo cashTicketDescription]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKCashTicketInfo ID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKCashTicketInfo expireRemindTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKComboControl updateConstraints]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKComboControl resignFirstResponder]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKComboControl availableOptionPrompts]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKComboControl didSelectedOptionIndexBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKComboControl textField]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKContractAgreement predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKContractAgreement URLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKContractAgreement titleTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKContractAgreement canSelect]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKContractFactor predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKContractFactor forbiddenExtract]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKContractFactor cardBINURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKContractFactor optionIdentifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKContractFactor availableOptions]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKContractFactor verificationCodeAPIURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKContractFactor verificationCodeSent]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKContractFactorDisplay predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKContractFactorDisplay promptString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKContractFactorDisplay fullTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKContractFactorDisplay helpInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKContractFactorDisplay bottomPromptString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKContractFactorDisplay recommendArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKContractFactorOption predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKContractFactorOption optionValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKCountDownManager didReceiveTimerEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SPKCouponItemInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKCouponItemInfo couponName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKCouponItemInfo couponAmount]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKCouponInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKCouponInfo haveRewardNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKCouponInfo detailArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKCouponInfo lookTips]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKDiscountInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKDiscountInfo haveDiscountNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKDiscountInfo originalMoney]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKDoubleAdditions compare:isGreaterThan:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SPKDoubleAdditions compare:isLessThan:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SPKDoubleAdditions compare:isEqualTo:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SPKDoubleAdditions compare:isGreaterThanOrEqualTo:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SPKDoubleAdditions compare:isLessThanOrEqualTo:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SPKErrorExtraInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKErrorExtraInfo factorKey]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKFactorHelp predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKFactorHelp imageURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKFactorHelp imageURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKFactorHelp buttonsArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKFactorHelp realNameInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKFactorRecommendInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKFactorRecommendInfo recommendValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKFactorRecommendInfo recommendTip]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKGrayscaleReleaseManager shareManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKGrayscaleReleaseManager analysisPortmInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKGrayscaleReleaseManager commonParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKGrayscaleReleaseManager portmInfoArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKIcon predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKIcon enabledIconURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKIcon disabledIconURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKIcon enabledIconURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKIcon disabledIconURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKModalRepresentation sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKModalRepresentation resetStatus]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKModalRepresentation resetStatusKeepWindow]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKModalRepresentation _keyboardWillShow:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKModalRepresentation _keyboardWillHide:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKModalRepresentation dismissKeyboard:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKModalRepresentation processedImageWithBlurAmount:excludWindow:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPKModalRepresentation closeAction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKModalRepresentation tapCloseAction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKModalRepresentation transitionInCompletion:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKModalRepresentation transitionOutCompletion:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKModalRepresentation animationDidStop:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPKModalRepresentation animateWhenDismissed]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKModalRepresentation tapOutsideToDismiss]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKModalRepresentation verticalPosition]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKModalRepresentation transitionStyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKModalRepresentation modalFrame]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKModalRepresentation modalWantFullScreenLayout]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKModalRepresentation blurAmount]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKModalRepresentation cornerRadius]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKModalRepresentation originalKeyWindow]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKModalViewHelper adaptedVerticalMargin:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SPKNoPasswordAdjustCreditInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKNoPasswordAdjustCreditInfo adjustTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKNoPasswordAdjustCreditInfo adjustCredit]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKNoPasswordAdjustCreditInfo shouldAdjustCredit]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKNoPasswordAdjustCreditInfo currentCredit]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKNoPasswordAgreementInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKNoPasswordAgreementInfo agreementURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKNoPasswordAgreementInfo agreementPrefix]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKNoPasswordAgreementInfo agreementName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKNoPasswordAgreementInfo agreementURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKNoPasswordAgreementInfo uncheckedTip]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKNoPasswordInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKNoPasswordInfo agreementURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKNoPasswordInfo withholdAgreementURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKNoPasswordInfo agreementName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKNoPasswordInfo agreementURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKNoPasswordInfo openSuccessTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKNoPasswordInfo shouldOpenNoPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKNoPasswordInfo noPasswordCredit]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKNoPasswordInfo withholdTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKNoPasswordInfo withholdAgreementName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKNoPasswordInfo withholdAgreementURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKNumberPadKeyboard frameArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKNumberPadKeyboard keyboardType]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKOpenBiometricsGuideInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKPageDurationManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPageDurationManager startPathServiceWithIdentifier:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKPageDurationManager updatePathGload]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPageDurationManager updatePathTload]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPageDurationManager updatePathTloadWithPageName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKPageDurationManager updatePathTloadWithPageName:cellCount:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPKPageDurationManager disablePathService]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPageDurationManager endPathService]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPageDurationManager startServiceWithPageName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKPageDurationManager updateGloadWithPageName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKPageDurationManager updateTloadWithPageName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKPageDurationManager disableServiceWithPageName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKPageDurationManager endServiceWithPageName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKPageDurationManager currentIdentifier]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKPageInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPageInfo hasMore]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKPaymentABTestManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPaymentABTestManager HTTPRequestUseGZip]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPaymentABTestManager HTTPRequestNotTakeCookie]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPaymentABTestManager webpCompress]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPaymentABTestManager fetchEncryptDegradeInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKPaymentBusinessConfigure shareConfigure]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPaymentBusinessConfigure clearData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPaymentBusinessConfigure transID]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKPaymentCampaign predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPaymentCampaign campaignID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPaymentCampaign discountValue]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKPaymentConfigure shareConfigure]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKPaymentManagementItemInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPaymentManagementItemInfo closeAlertTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPaymentPasswordService verifySMSCodeWithCode:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPKPaymentPasswordService verifyPaymentPassword:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPKPaymentPasswordService modifyPaymentPasswordWithOldPassword:newPassword:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SPKPaymentPasswordService resetPaymentPassword:walletType:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SPKPaymentPasswordService authVerifyPaymentPassword:paymentInfo:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SPKPaymentTypeInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKPicassoConfigManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoConfigManager appId]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKPicassoCrashProtect startProtectWith:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SPKPicassoDynamicInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoDynamicInfo jsName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoDynamicInfo jsPath]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKPicassoGAUserInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoGAUserInfo eventType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoGAUserInfo callbackURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKPicassoModuleConfigInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoModuleConfigInfo pageVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoModuleData moduleName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoModuleData modulePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoModuleData moduleData]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKPicassoModuleInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoModuleInfo moduleName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoModuleInfo modulePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoModuleInfo moduleData]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKPicassoModuleVCInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoModuleVCInfo logicModuleArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKPicassoNativeMapping sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoNativeMapping picassoBundleDict]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoNativeMapping nativeClassDict]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKPicassoNavigationInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoNavigationInfo titleIconUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoNavigationInfo statusBarStyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoNavigationInfo statusBarImgUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoNavigationInfo backgroundImgUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoNavigationInfo backIconUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoUtil fetchPicassoJSContentDictWith:andCacheFirst:andFinished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoUtil catLogReport:andError:andJsName:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoUtil catReportStartWithCommand:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKPicassoUtil catReportEndWithCommand:andCode:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SPKPicassoUtil emptyRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SPKPicassoUtil URLEncode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SPKPortmInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKProcessConfigurator registerProcessBlock:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SPKProcessConfigurator processBlockWithKey:type:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SPKPromotionInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPromotionInfo transactionInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPromotionInfo couponInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPromotionInfo discountInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPromotionInfo AdInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPromotionInfo buttonListInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPromotionInfo othersInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPromotionInfo picassoDynamicInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPromotionInfo picassoDynamicFetchDate]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKPromotionOthersInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKPromotionOthersInfo campaintIDArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKRealNameInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRealNameInfo displayAlertInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRealNameInfo confirmAlertInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKRealNameAlertInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRealNameAlertInfo contentArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRealNameAlertInfo buttonsArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKRealNameAlertBodyInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRealNameAlertBodyInfo markString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshComponent layoutSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshComponent placeSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshComponent willMoveToSuperview:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshComponent addObservers]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshComponent removeObservers]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshComponent observeValueForKeyPath:ofObject:change:context:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshComponent beginRefreshing]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshComponent endRefreshing]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshComponent endRefreshingWithCompletionBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshComponent executeRefreshingCallback]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshComponent pullingPercent]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshComponent refreshingBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshComponent refreshingTarget]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshComponent refreshingAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshComponent endRefreshingCompletionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshFooter willMoveToSuperview:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SPKRefreshFooter footerWithRefreshingBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SPKRefreshFooter footerWithRefreshingTarget:refreshingAction:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshFooter endRefreshingWithNoMoreData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshFooter noticeNoMoreData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshFooter resetNoMoreData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshFooter triggerAutomaticallyRefreshPercent]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKRefreshHeader headerWithRefreshingBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SPKRefreshHeader headerWithRefreshingTarget:refreshingAction:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshHeader placeSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshHeader insetTDelta]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshNormalFooter stateTitles]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshNormalFooter placeSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshNormalFooter refreshingTitleHidden]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshNormalHeader stateTitles]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshNormalHeader placeSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKRefreshNormalHeader refreshingTitleHidden]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKScanCardManager uploadBankCardImageWithCardImage:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPKScanCardManager startScanCardManagerWithURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKScanCardManager canUploadCardImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKScanCardManager payInfoDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKScanCardRecognizer recognizeWithImage:width:height:completion:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SPKScanCardRecognizer encryptCardImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKScanCardRecognizer cardNumbersWithScanResult:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKScanCardRecognizer cardImageWithScanResult:imageData:width:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SPKScanCardRecognizer scanCardNumberWithScanResult:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKScanCardRecognizer clearImageData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKScrollViewDragControl finishLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKScrollViewDragControl didTapSelf:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKScrollViewLoadMoreControl sak_addConstraints]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKScrollViewLoadMoreControl requiresConstraintBasedLayout]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKScrollViewRefreshControl updateConstraints]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKScrollViewRefreshControl requiresConstraintBasedLayout]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKSeparatorLine graySeparatorLine]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKSetPaymentPasswordPageInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKSetPaymentPasswordPageInfo pageTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKSetPaymentPasswordPageInfo pageTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKSetPaymentPasswordPageInfo nextPageTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKSetPaymentPasswordPageInfo bottomTip]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKSignCampaignInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKSignCampaignInfo labelArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKSupportBankInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKSupportBankInfo supportBankURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKSupportBankInfo supportBank]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKSupportBankInfo supportBankURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKTechnologyStatistics trackBID:uploadType:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SPKTechnologyStatistics trackBID:label:uploadType:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SPKTechnologyStatistics trackBID:label:MGEType:uploadType:]", 4)}, 0);
setTimeout(function(){hookObjC("+[SPKTechnologyStatistics trackBID:labels:MGEType:uploadType:]", 4)}, 0);
setTimeout(function(){hookObjC("+[SPKTechnologyStatistics trackBID:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SPKTechnologyStatistics trackBID:label:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SPKTechnologyStatistics trackBID:label:MGEType:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SPKTechnologyStatistics trackBID:labels:MGEType:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SPKTextFieldInputViewMask bindMaskWithTextField:tapEndEditing:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPKTextFieldInputViewMask textField]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKTextFieldInputViewMask tapEndEditing]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace jsapi_copy2Clipboard:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace jsapi_pickContactPhone:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace contactPickerDidCancel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace contactPicker:didSelectContactProperty:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace fomatPhoneNumber:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace jsapi_open3rdPartyWallet:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace bindCard]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKOpenMailLoginParams autoUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKOpenMailLoginParams monitorUrls]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKOpenMailLoginResult successUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace jsapi_openMailLoginWebview:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace jsapi_signature_openMailLoginWebview]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKTitansNamespace jsBridge]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKTransactionInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKTransactionInfo pageTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKTransactionInfo currentMoney]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKTransactionInfo cashTicketFetchDate]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKUtil postNotificationWithName:andFromObject:andData:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SPKUtil observerNotificationWithName:andTarget:andCallBack:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SPKUtil transferToURL:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SPKVerifyBindPayData instanceWithPaymentMethod:verifyType:methodPath:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyBindPayData paymentMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyBindPayData methodPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyBindPayData verifyType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyBindPayData payPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyBindPayData shouldOpenNoPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyBindPayData shouldOpenWithholding]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyBindPayData noPasswordCredit]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyBindPayData shouldAdjustCredit]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyBindPayData adjustCredit]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyBindPayData bankCardID]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKVerifyPaymentPasswordInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyPaymentPasswordInfo voiceVerificationInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyPaymentPasswordInfo pageTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyPaymentPasswordInfo subPageTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyPaymentPasswordInfo cancelTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyPaymentPasswordInfo forgetTip]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyPaymentPasswordInfo verifyType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyPaymentPasswordInfo noPasswordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyPaymentPasswordInfo submitURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyPaymentPasswordInfo noPasswordAdjustCreditInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKVerifyPaymentSMSInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyPaymentSMSInfo buttonTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyPaymentSMSInfo fetchSMSURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyPaymentSMSInfo externalParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKVerifyPayPasswordManager defaultManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyPayPasswordManager clearData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyPayPasswordManager callbackURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVerifyPayPasswordManager paymentInfoDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKVoiceVerificationInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKVoiceVerificationInfo pageRequestURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVoiceVerificationInfo entryText]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKVoiceVerificationInfo pageRequestURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPKWalletBank predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKWalletBank bankType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKWalletBank cardType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKWalletBank payType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKWalletBank iconInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKWalletBank statusInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKWalletBank largeAmountPaymentThreshold]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPKWalletBank largeAmountPaymentPrompt]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFCommonCollector sharedCollector]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFCommonCollector applicationDidEnterBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFCommonCollector applicationWillEnterForeground]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFCommonCollector registerPageInfoCollectBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFCommonCollector appHasEnteredForegroud]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFCommonCollector startWithToken:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SPFConfigManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFConfigManager dataProcessorTaskQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFConfigManager applicationWillBecomeActive]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFConfigManager fetchLocalConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFConfigManager fetchRemoteConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFConfigManager processPerformanceSwitchWithConfigData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFConfigManager processErrorSwitchWithConfigData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFConfigManager applicationDidEnterBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFConfigManager switchConfigModel]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFConfigService generateSwitchParameters]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFConnectionInfoService loadConnectionType]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFConnectionInfoService loadMccmnc]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFConnectionInfoService loadCarrierName]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFCoreDataManager defaultManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFCoreDataManager applicationDocumentsDirectory]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFCoreDataManager managedObjectModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFCoreDataManager persistentStoreCoordinator]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFCoreDataManager localManagedObjectContext]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFCoreDataManager saveContext:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFCoreDataManager retrieveRecordUsingBlock:limit:withEntityName:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SPFCoreDataManager countFor:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFCoreDataManager retrieveDataUsingBlock:withLimit:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPFCoreDataManager addDataWithType:tags:metrics:autotags:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SPFCoreDataManager countForData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFCoreDataManager retrieveLogUsingBlock:withLimit:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPFCoreDataManager countForLog]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFCustomCollector startWithToken:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SPFCustomCollector reportCustomTimerDataWithMetricsDict:tagsDict:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SPFCustomCollector reportCustomCounterDataWithMetricsDict:tagsDict:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SPFCustomCollector reportCustomGaugeDataWithMetricsDict:tagsDict:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SPFCustomCollector reportFreezeDataWithMetricsDict:tagsDict:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SPFCustomCollector reportCustomDataWithType:metricsDict:tagsDict:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SPFDataEntity toObject]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFDurationServiceCenter defaultCenter]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFDurationServiceCenter serviceForIdentifier:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFDurationServiceCenter addService:forIdentifier:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPFDurationServiceCenter removeServiceForIdentifier:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFDurationServiceCenter serviceDict]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFDurationService serviceForIdentifier:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFDurationService startForIdentifier:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFDurationService updateEndForEventName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFDurationService updateEndFinallyForEventName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFDurationService netStr]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFErrorMonitor sharedNetworkErrorMonitor]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFErrorMonitor startWithToken:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFErrorMonitor handleNetworkBusinessErrorWithModule:error:URL:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SPFErrorMonitor handleNetworkBusinessErrorWithModule:errorMessage:userName:URL:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SPFErrorMonitor handleNetworkBusinessErrorWithModule:errorMessage:URL:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SPFErrorMonitor handleErrorDataBusinessErrorWithModule:errorMessage:URL:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SPFErrorMonitor networkErrorMonitoringTaskQueue]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFErrorService recordBusinessErrorWithModule:errorMessage:code:URL:addtionalInfoDict:]", 5)}, 0);
setTimeout(function(){hookObjC("+[SPFErrorService recordErrorWithType:Module:errorMessage:code:URL:addtionalInfoDict:]", 6)}, 0);
setTimeout(function(){hookObjC("+[SPFFPSAvgCounter sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFFPSAvgCounter applicationDidBecomeActiveNotification]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFFPSAvgCounter applicationWillResignActiveNotification]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFFPSAvgCounter avgFPS]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFFPSAvgCounter displayLink]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFFPSAvgCounter startCounter]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFFPSAvgCounter frameCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFFPSAvgCounter longestInterval]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFFreezeInfo toDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFFreezeInfo freezeInfoFromDictionay:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFFreezeInfo badPeriod]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFFreezeInfo badFrameCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFFreezeInfo totoalFrameCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFLogEntity toObject]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFLogger sharedLogger]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFLogger reportLogString:module:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPFLogger uploadAll]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFLogger reportHardwareInfoIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFLogger reportHardwareInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFLogger reportLogType:logString:logEnvironmentDictionary:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SPFLogger reportLogType:logString:logEnvironmentDictionary:sendImmediately:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SPFLogger generateLogDictionaryFromLogType:logString:logEnvironmentDictionary:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SPFLogger cacheLogDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFLogger storeLogDictionary:token:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPFLogger removeLogDictionary:token:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPFLogger needReport]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFLogger uploadLogsArray:token:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPFLogger generateLogsPostDictionaryFromLogsArray:token:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPFLogger reportHardwareDeviceInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFLogger reportModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFLogger logDictionaryArrayBuffer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFLogger bodyLength]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFLogger reportTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFLogger reportPending]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFMainLoopMonitor sharedMonitor]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFMainLoopMonitor callStackString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFMainLoopMonitor uploadCallStack:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFMainLoopMonitor uploadLagMonitorHitIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFMainLoopMonitor applicationDidBecomeActive:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFMainLoopMonitor applicationWillResignActive:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFMainLoopMonitor hertzWillStart:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFMainLoopMonitor hertzDidStop:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFMainLoopMonitor mainLoopObserver]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFMainLoopMonitor hitReported]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFPingThread addRunloopObserver]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFPingThread pingSemaphore]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFPingThread pausingSemaphore]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFPingThread runloopObserver]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFMainLoopObserver pingThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFManagedObject toObject]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFMonitor sharedMonitor]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFMonitor startWithToken:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFMonitor startWithToken:uuid:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPFMonitor startServices]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFMonitor sharedDataProcessor]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFObject toDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFReporter sharedReporter]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFReporter startCommonTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFReporter reportCommonData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFReporter startErrorTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFReporter reportErrorData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFReporter reportDataByType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFReporter fillDictionay:withArray:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPFReporter loadDataArray:toDictionary:byKey:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SPFReporter generatePostDictionaryByType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFReporter removeDataByType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFReporter stopTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFReporter commonReportTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFReporter errorReportTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFReporter networkModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFReporter commonEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFReporter errorEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFReporter errorCount]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFScrollViewFPSTracker sharedTracker]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFScrollViewFPSTracker reportFPS]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFScrollViewFPSTracker fpsCounter]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFScrollViewFPSTracker pageName]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFStorageCenter defaultCenter]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFStorageCenter retrieveAllLogUsingBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFStorageCenter retrieveLogUsingBlock:withLimit:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPFStorageCenter addLogWithType:tags:optionalTags:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SPFStorageCenter countForLog]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFStorageCenter retrieveAllDataUsingBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFStorageCenter retrieveDataUsingBlock:withLimit:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPFStorageCenter addDataWithType:tags:metrics:autotags:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SPFStorageCenter countForData]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFTaskProcessingService processAsyncTaskBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SPFTaskProcessingService processSyncTaskBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SPFTaskProcessingService processTaskBlock:afterSecond:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SPFTemporaryStorageCenter sharedCenter]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFTemporaryStorageCenter saveObject:byType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SPFTemporaryStorageCenter objectsByType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFTemporaryStorageCenter removeObjectsByType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFTemporaryStorageCenter removeCommonData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFTemporaryStorageCenter removeErrorData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFTemporaryStorageCenter storageQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFTemporaryStorageCenter storageDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFTrafficCollector sharedCollector]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFTrafficCollector traceTrafficWithType:request:response:responseDataLength:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SPFTrafficCollector reportTrafficInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFTrafficCollector applicationDidBecomeActiveNotification]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFTrafficCollector applicationWillResignActiveNotification]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFTrafficCollector pageTrafficInfoModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFTrafficCollector sessionTrafficInfoModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFTrafficCollector trafficCollectMutex]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFViewInfoCollector sharedCollector]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFViewInfoCollector traceURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SPFViewInfoCollector removeAllURLKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFViewInfoCollector URLDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SPFViewTraceService shareService]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFViewTraceService removeAllURLKeysBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SPFViewTraceService lastPageTrack]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKNVTaskManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKNVTaskManager executeHTTPRequest:plugin:uploadProgress:downloadProgress:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAKNVTaskOperation responseData]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKPersistentConnectProtocol canInitWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKPersistentConnectProtocol canonicalRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKPersistentConnectProtocol protocolCanonicalRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKPersistentConnectProtocol registerClass:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKPersistentConnectProtocol unregisterClass:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTPortalMap URLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPortalMap pageClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPortalMap rootPageClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPortalMap needSignIn]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTPortalManager defaultManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPortalManager URLStringForClass:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTPortalManager openPortalWithURL:source:from:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[MTPortalManager signInForAction:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKPortal registerPortalWithHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKPortal registerPortalWithHandler:prefixURL:pageInfo:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAKPortal parameterArrayFromString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKPortal registerPortalWithHandler:prefixURL:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKPortal _registerPortalWithHandler:forKey:atMap:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAKPortal _combineHandlerArraysWithKeys:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKPortal _blocksArrayForKeys:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKPortal _lazyInitializePortalRegisterWithKeys:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKPortal registerPortalWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKPortal enableLogging:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKPortalDegrade needDegrade:degradeDic:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKPortalDegrade degradeURLWithOriginURL:degradeDic:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKPortalPageInfo pageInfoWithPageName:className:path:requiredParameters:optionalParameters:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SAKPortalPageInfo pageName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPortalPageInfo className]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPortalPageInfo requiredParameters]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPortalPageInfo optionalParameters]", 0)}, 0);
setTimeout(function(){hookObjC("-[METARActivityInfo strategyTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[METARActivityInfo strategyUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[METARActivityInfo activityID]", 0)}, 0);
setTimeout(function(){hookObjC("-[METARScanStrategyBtn layoutSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("+[METQRCodeScanMonitor sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[METQRCodeScanMonitor codeScanDidStart]", 0)}, 0);
setTimeout(function(){hookObjC("-[METQRCodeScanMonitor codeScanDidSuccess]", 0)}, 0);
setTimeout(function(){hookObjC("-[METQRCodeScanMonitor codeScanDidEnd]", 0)}, 0);
setTimeout(function(){hookObjC("-[METQRCodeScanMonitor codeScanDidStartBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[METQRCodeScanMonitor codeScanDidSuccessBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[METQRCodeScanMonitor codeScanDidEndBlock]", 0)}, 0);
setTimeout(function(){hookObjC("+[METQRURLUtil processPermissiveHostURL:]", 1)}, 0);
setTimeout(function(){hookObjC("+[METQRURLUtil processBicycleBusinessURL:]", 1)}, 0);
setTimeout(function(){hookObjC("+[PFBBicyclePartnerService defaultService]", 0)}, 0);
setTimeout(function(){hookObjC("-[PFBBicyclePartnerService fetchLatestBicyclePartner]", 0)}, 0);
setTimeout(function(){hookObjC("-[PFBBicyclePartnerService bicyclePartners]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKRiskControlManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKRiskControlManager resetRiskControlState]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKRiskControlManager riskErrorStateDefaultProcessorEnable:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKRiskControlManager handleRiskError:withCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKRiskControlManager allocWithZone:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKRiskControlManager riskErrorStateSignal]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKRiskControlManager riskErrorProcessedCommand]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKRiskControlManager signalWithRiskControl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKRiskControlManager riskControlScheduler]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKRiskControlManager riskErrorStateControl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKRiskControlManager riskErrorProcessedDisposable]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKRiskControlManager riskErrorState]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKRiskControlManager preservedRiskErrors]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKRiskError errorWithType:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKRiskError errorWithType:operation:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKRiskError errorWithType:userInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKRiskError errorFromSAKError:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKRiskError errorFromData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKRiskError userName]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTUplinkSMSInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTUplinkSMSService loadIsNeedUplinkSMS:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTUplinkSMSService lastIsNeedUplinkSMS]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTUplinkSMSService saveLastIsNeedUplinkSMS:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKIdentifierManager configGetCorpseBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKIdentifierManager configHanlderEventBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKIdentifierManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKIdentifierManager UUIDBlackList]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKIdentifierManager forceUpdateSecAttrAccessibleIfNeededForUUID:accessGroup:userDefaultsKey:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAKIdentifierManager updateUUIDSecAttrAccessibleSuccessInNormalMode]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKIdentifierManager updateUUIDSecAttrAccessibleSuccessInSafeMode]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKIdentifierManager deletePrivateUUID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKIdentifierManager deleteOldPublicUUID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKIdentifierManager deletePublicUUIDOnlyForDebugCenter]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKIdentifierManager reportUUIDChanged:oldUUID:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKIdentifierManager identifierFromSankuai:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKIdentifierManager UUID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKIdentifierManager advertisingIdentifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKIdentifierManager identifierForVendor]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKIdentifierManager requestUUID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKIdentifierManager UUIDRegistrationSucceeded:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKIdentifierManager UUIDRegistrationFailed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKIdentifierManager callbackArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKIdentifierManager connectionQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKIdentifierManager clientType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKIdentifierManager queryParameters]", 0)}, 0);
setTimeout(function(){hookObjC("+[CIPError cip_serviceErrorWithCode:callstack:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKError serviceErrorWithCode:callstack:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKBaseService UUID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBaseService appInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBaseService didReceiveCityDidChangeNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBaseService didReceiveUserChangedNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKBaseService lastUpdateDate]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKBaseService timeoutInterval]", 0)}, 0);
setTimeout(function(){hookObjC("-[MT3rdPartClient beforeSharePayload:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MT3rdPartClient sharePayload:from:]", 2)}, 0);
setTimeout(function(){hookObjC("+[MT3rdPartClient defaultMTLogo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTEmail sharePayload:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTEmail mailComposeController:didFinishWithResult:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MTOAuth2 redirectMTURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTOAuth2 checkAccessToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTOAuth2 revokeAccessToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTOAuth2 URLRequestAuthorization]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTOAuth2 requestAccessWithAuthorizationCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTOAuth2 requestUserInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTOAuth2 requestOpenIDByAcessToken:andExpiresIn:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTOAuth2 saveByImplicitGrant:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTOAuth2 sharePayload:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTOAuth2 beforeSharePayload:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTOAuth2 oauthInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTOAuth2 accessToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTOAuth2VC clearCookies]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTOAuth2VC shouldAutorotateToInterfaceOrientation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTOAuth2VC oauth2LoginFinished:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTOAuth2VC oauth2LoginSuccessBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTOAuth2VC oauth2LoginFailBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTQQClient handleOpenURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTQQClient onReq:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTQQClient onResp:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTQQClient onShareQQResp:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTQQClient sharePayload:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTQQClient objectForShare:payload:]", 2)}, 0);
setTimeout(function(){hookObjC("+[MTQzoneUserInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTQzoneShareInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTQzone oauthInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTQzone openID]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTQzone accessToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTQzone checkAccessToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTQzone revokeAccessToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTQzone URLRequestAuthorization]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTQzone requestOpenIDByAcessToken:andExpiresIn:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTQzone requestUserInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTQzone sharePayload:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTQzone objectForPayload:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTQzone expiresIn]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTShareChannelManager saveShareChannel:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MTShareChannelManager arrayFromConfigDict:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[MTShareChannelManager shareMethodOfChannel:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MTShareChannelManager shareKeyAndMethodDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTShareChannelManager shareMethodAndKeyDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTShareChannelManager shareMethdForArray:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MTShareChannelManager shareMethodNameByShareMethod:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTShareDetailVC didReceiveMemoryWarning]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTShareDetailVC shouldAutorotateToInterfaceOrientation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTShareDetailVC shareMethod]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTShareEngine handleOpenURL:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MTShareEngine prepareCachedImageForShareMethod:fromPayload:]", 2)}, 0);
setTimeout(function(){hookObjC("+[MTShareEngine shareMethodNameAtIndex:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MTShareEngine shareMethodMediumAtIndex:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MTShareEngine shareMethodLogoAtIndex:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MTShareEngine pipeByShareMethod:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MTShareEngine shareMethodNameByShareMethod:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MTShareEngine shareMethodMediumByShareMethod:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MTShareEngine shareMethodLogoByShareMethod:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MTShareEngine sharePayload:from:delegate:]", 3)}, 0);
setTimeout(function(){hookObjC("+[MTShareEngineData sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTShareEngineData shareMethodInstanceArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTShareEngineData sharePipeArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTShareEngineData sharePayloadArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTSharePayLoad payLoadWithSharedTitle:content:linkURLString:linkImage:linkImageURLString:]", 5)}, 0);
setTimeout(function(){hookObjC("-[MTSharePayLoad oauth2ShareSucceed]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSharePayLoad oauth2ShareDidFinish:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTSharePayLoad thirdPartClientShareDidFinish:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTSharePayLoad shareMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSharePayLoad urlString]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSharePayLoad imageUrlString]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSharePayLoad sharePhotoMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSharePayLoad userName]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSharePayLoad trackValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSharePayLoad shareSource]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSharePayLoad detailURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSharePayLoad thumbURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSharePayLoad thumbImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSharePayLoad hiddenContent]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSharePayLoad hiddenURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSharePayLoad photoImageData]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSharePayLoad photoImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSinaWeibo didReceiveWeiboRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTSinaWeibo didReceiveWeiboResponse:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTSinaWeibo handleOpenURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTSinaWeibo sharePayload:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTSinaWeibo messageToShare:payload:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTSinaWeibo shareMessageWithPayload:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTSinaWeibo removeUrlQueryStr:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTSMS sharePayload:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTWeixin handleOpenURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTWeixin onReq:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTWeixin onResp:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTWeixin onShareResp:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTWeixin onPayResp:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTWeixin onJumpReq:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTWeixin sharePayload:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTWeixin sharePayload:from:withSceceType:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MTWeixin sharePayloadForPhoto:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTWeixin sharePayloadForURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTWeixin sharePayloadForText:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTWeixin sendMessagePayload:withWXMediaMessage:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTWeixin sceneType]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTWeixin shareType]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTWeixinFriends sharePayload:from:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKShareEventTracker methodTrackName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKShareEventTracker trackCallBackEvent:result:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKShareRegister defaultRegister]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKShareRegister QQAppID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKShareRegister QQAppKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKShareRegister WeixinAppKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKShareRegister QZoneAppID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKShareRegister QZoneAppKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKShareRegister QzoneSecretKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKShareRegister QzoneRedirectUri]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKShareRegister SinaWeiboAppKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKShareRegister SinaWeiboSecretKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKShareRegister SinaWeiboRedirectUri]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKShareRegister shareDefaultLogo]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTSPPaymentServiceInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSPPaymentServiceInfo barCodeCashierURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSPPaymentServiceInfo phoneChargeURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSPPaymentServiceInfo lifeChargeURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTSPService allocWithZone:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTSPService applicationWillResignActive]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSPService applicationWillEnterForeground]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSPService applicationDidBecomeActive]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSPService applicationWillTerminate]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSPService handleSiriRequestIfNeed]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSPService cancelSiriRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSPService appGroupSuiteName]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSPService userLoginBlock]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTSPSharedCenter allocWithZone:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTSPSharedCenter updatePaymentServiceInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTSPSharedCenter appGroupSuiteName]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSPSharedCenter sharedUserDefaults]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatistics moduleEdit]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatistics statusCheck]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatistics _trackSFromInfoWithEventInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatistics trackEventInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKStatistics trackAppStart]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatistics trackAppQuitWithDuration:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKStatistics trackPageDisappearWith:pageDuration:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKStatistics statisticsForCategory:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKStatistics defaultStatistics]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatistics _defaultCategoryString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatistics trackMPT:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatistics trackSubMPT:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatistics trackAutoMPT:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatistics trackMGE:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatistics trackOrder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatistics trackPay:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatistics trackEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatistics trackEventWithMaker:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatistics trackEventInQueueWithAsyncCheck:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKStatistics uploadAllStatistics]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatistics sessionID]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatistics enbaleMockToURL:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKStatistics disableMock]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatistics asynUnionID:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKStatistics syncUnionID]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatistics addTagsFromDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKStatistics JSToNative:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsBridge JSResolveURL:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsBridge JSToNativeDispatchMessage:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsBridge encodeMethod:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsCommonConfig sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsCommonConfig networkOperator]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsCommonConfig defaultCategory]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsCommonConfig sessionID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsCommonConfig pushID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsCommonConfig utmInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsCommonConfig launchChannel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsCommonConfig didReceiveSessionChangeNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsCommonConfig centralManagerDidUpdateState:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsCommonConfig deviceToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsCommonConfig appVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsCommonConfig appBuildVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsCommonConfig sdkVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsCommonConfig appPlatform]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsCommonConfig deviceModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsCommonConfig osVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsCommonConfig macID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsCommonConfig bluetoothManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsCommonConfig localID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsCommonConfig pushTypes]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsConfig createEnvironment]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsDAQInfo daqInfoWithCategory:bid:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsDAQInfo daqInfoWithCategory:bid:cid:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsDAQInfo daqInfoWithCategory:bid:cid:val_lab:]", 4)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsDAQInfo daqInfoWithCategory:bid:cid:sf:val_lab:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsDAQInfo withPageInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsDAQInfo eventType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsDAQInfo val_lab]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsDAQInfo businessValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsDAQInfo requestId]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsDataBase databaseUpdateIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsDataBase saveEntity:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsDataBase deleteEntitiesWithIDs:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsDataBase deleteEntitiesBeforeDate:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsDataBase deleteAllEntities]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsDataBase fetchEntitiesLessThanOrEqualTo:limitTo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsDataBase databaseQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsDBObject dataID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEntity tryCheckValidity]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEntity entityID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEntity packageFailedTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEntityMaker makeEntity]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsEnvironment cityIDJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment tranformToDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment pushID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment appChannel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment launchChannel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment appType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment localSource]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment appSubChannel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment userID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment loginType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment cityID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment locatedCityID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment sessionID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment appVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment appBuildVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment sdkVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment appPlatform]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment deviceModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment osVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment macID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment networkOperator]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment deviceToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment pushSetting]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment unionID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment keychainID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment customInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEnvironment localID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEventBaseInfo TRACK]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEventBaseInfo TRACKAPPEVENT]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsEventBaseInfo eventNameEnumerationMap]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEventBaseInfo tranformToDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEventBaseInfo referCid]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEventBaseInfo sequenceID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEventBaseInfo requestID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEventBaseInfo referRequestID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEventBaseInfo eventTracker]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEventBaseInfo s_from]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEventInfo val_cid]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEventInfo val_bid]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEventInfo orderId]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEventInfo val_sf]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEventInfo withPageInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEventInfo val_requestId]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEventInfo val_lab]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEventInfo sfString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsEventInfo carryPageInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageEventInfo val_cid]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageEventInfo pageValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageEventInfo val_lab]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsMockManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsMockManager disableMock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsMockManager mockEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsMockManager createDPUploadContect:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsMockManager dpMockRequestHeadersDict]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsMockManager mockURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsMockManager networkQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsMTNBStat mtnb_log:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsMTNBStat createCallbackState:message:withData:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsMTNBStat moduleVersion]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsNetworkManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsNetworkManager reportToCatLogInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsNetworkManager networkQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsObject dictionaryValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsObject tranformToDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsObject report_extract]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue tranformToDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsPageBusinessValue analyticsPageValueMappingDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue customLog]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue dealID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue orderID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue catID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue poiID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue movieID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue goodsID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue maitonID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue couponID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue regionID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue ctPoi]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue traceID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue queryID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue activityID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue cinemaID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue sortID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue selectID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue dealgroupID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue checkinID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue bookID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue memberCardID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue sectionIndex]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue adID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue prepayInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue buID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue bizID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue skuID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsPageBusinessValue searchID]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsSession sharedSession]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsSession encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsSession sessionPrefix]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsSession sessionID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsSession createSessionID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsSession mirrorSessionID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsSession resetSessionID]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsSFromManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsSFromManager resetSFPathArray]", 0)}, 0);
