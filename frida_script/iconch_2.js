
var resolver = new ApiResolver('objc');

function onEnterFunc(args, argNum, infoArray){
    // infoArray = [ argNum, args[1], args[2], ... , args[argNum + 1], args[0], retval, funcname ]
    infoArray[0] = argNum;

    /*try {
        tmp = new ObjC.Object(args[0]);
        infoArray[argNum + 2] = tmp.toString();
    } catch(error){
        try { 
            infoArray[argNum + 2] = strFilter(Memory.readCString(args[0], 128).toString());
        } catch(err) {
            infoArray[argNum + 2] = args[0].toString();
        }
    }*/

    for(var i=1; i<argNum+2; ++i) {
        infoArray[i] = 'arg';
        /*try {
            tmp = new ObjC.Object(args[i]);
            infoArray[i] = tmp.toString();
        } catch(error){
            try { 
                infoArray[i] = strFilter(Memory.readCString(args[i], 128).toString());
            } catch(err) {
                infoArray[i] = args[i].toString();
            }
        }*/
    }

    return;
}

function onLeaveFunc(retval, argNum, infoArray){

    infoArray[argNum + 3] = 'retval';
    /*try {
        tmp = new ObjC.Object(retval);
        infoArray[argNum + 3] = tmp.toString();
    } catch(error){
        try { 
            infoArray[argNum + 3] = strFilter(Memory.readCString(retval, 128).toString());
        } catch(err) {
            infoArray[argNum + 3] = retval.toString();
        }
    }*/

    return;
}

function strFilter(str) {
    for(var i=0; i<str.length; ++i){
        if(str.charCodeAt(i) >= 32 && str.charCodeAt(i) <= 127)
            { }
        else
            return str.substring(0, i);
    }
    return str;
}

function hookObjC(FuncName, ArgNum){
    resolver.enumerateMatches(FuncName, {
        onMatch: function (match) {
                    // infoArray = [ argNum, args[1], args[2], ... , args[argNum + 1], args[0], retval, funcname ]
                    var infoArray = new Array(ArgNum + 4);
                    infoArray[ArgNum + 4] = match.name;
                    //send(match.name);

                    Interceptor.attach(match.address, {
                    onEnter: function(args){
                        //send(match.name);
                        onEnterFunc(args, ArgNum, infoArray);
                    },
                    onLeave: function(retval){
                        onLeaveFunc(retval, ArgNum, infoArray);
                        send(infoArray);
                    }
                    })
                },
        onComplete: function () {
                }
    }); 
}

setTimeout(function(){hookObjC("-[SAKStatisticsSFromManager addEventToSFromListWithEventInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsSFromManager addNewSFModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsSFromManager sFromList]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsSFromManager sfPathArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsSFromManager sfPathReadWriteLock]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsStandardBaseEvent eventTypes]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardBaseEvent referCid]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardBaseEvent sequenceID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardBaseEvent requestID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardBaseEvent referRequestID]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsStandardEvent mgeTypes]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEvent tranformToDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEvent elementID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEvent elementIndex]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEvent mgeType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEvent eventValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardMPT tranformToDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardMPT eventValue]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsStandardEventManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEventManager createStandardMPT]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEventManager createStandardEvent]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEventManager atomicAutoPlusSequenceNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEventManager updateInfoToEventMPT:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEventManager captureSequenceAtApplicationWillResign]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEventManager trackAppEventInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEventManager trackEventInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEventManager trackPageEventInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEventManager _getReferRequestIdAndCidForRequestId:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEventManager _addPagePathWithCid:requestId:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEventManager _updateManagerInfoToPageEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEventManager currentCid]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEventManager currentRequestID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEventManager referCid]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEventManager referRequestID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEventManager sequenceNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEventManager appStartRequestID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEventManager currentPageValueLab]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEventManager pagePathArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsStandardEventManager pagePathReadWriteLock]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsTagManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsTagManager addTags:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsTagManager currentPageKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsTagManager tagsBook]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsTagManager pageKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsTagManager tagsReadWritelock]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsToLoganManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsToLoganManager loganEnvironment]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsToLoganManager loganEntity:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsToLoganManager loganObj:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsUploader sharedUploader]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsUploader syncTrackEntity:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsUploader uploadAllEntity]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsUploader __uploadEntitiesLowerOrEqualTo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsUploader uploadObjectsWith:entityIDs:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsUploader handlerFailedPackageEntities:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsUploader startUploadTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsUploader stopUploadTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsUploader statisticsTrackQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsUploader uploadTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsUploadObject tranformToDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsUploadObject mergeEntity:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsUtils waitingWithRetryNumber:delayInSeconds:queue:block:]", 4)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsUtils networkInfoSharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsUtils uploadTimesInThisDay]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatisticsViewManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKStatisticsViewManager capturedPage]", 0)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore defaultService]", 0)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore keyChainStore]", 0)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore keyChainStoreWithService:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore keyChainStoreWithService:accessGroup:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore keyChainStoreWithServer:protocolType:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore keyChainStoreWithServer:protocolType:authenticationType:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore commonInit]", 0)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore stringForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore stringForKey:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore stringForKey:service:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore stringForKey:service:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore stringForKey:service:accessGroup:]", 3)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore stringForKey:service:accessGroup:error:]", 4)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore dataForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore dataForKey:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore dataForKey:service:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore dataForKey:service:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore dataForKey:service:accessGroup:]", 3)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore dataForKey:service:accessGroup:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore contains:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore stringForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore stringForKey:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore dataForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore dataForKey:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore removeItemForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore removeItemForKey:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore removeItemForKey:service:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore removeItemForKey:service:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore removeItemForKey:service:accessGroup:]", 3)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore removeItemForKey:service:accessGroup:error:]", 4)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore removeAllItems]", 0)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore removeAllItemsWithError:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore removeAllItemsForService:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore removeAllItemsForService:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore removeAllItemsForService:accessGroup:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore removeAllItemsForService:accessGroup:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore removeItemForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore removeItemForKey:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore removeAllItems]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore removeAllItemsWithError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore objectForKeyedSubscript:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore allKeys]", 0)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore allKeysWithItemClass:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore allItemsWithItemClass:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore allItems]", 0)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore prettify:items:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore sharedPasswordWithCompletion:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore sharedPasswordForAccount:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore removeSharedPasswordForAccount:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore requestSharedWebCredentialWithCompletion:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore requestSharedWebCredentialForDomain:account:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore generatePassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore synchronizeWithError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore debugDescription]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore attributesWithKey:value:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore itemClassObject]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore protocolTypeObject]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore authenticationTypeObject]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore accessibilityObject]", 0)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore argumentError:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore conversionError:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore securityError:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPKeyChainStore unexpectedError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore itemClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore accessGroup]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore protocolType]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore authenticationType]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore authenticationPolicy]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPKeyChainStore authenticationPrompt]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTBaseDAO objectClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCacheDAO findResponseByRequestFingerPrint:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCacheDAO saveResponse:withRequestFingerPrint:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCacheDAO savePrivateObject:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCacheDAO savePublicObject:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCacheDAO publicObjectForKey:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCacheDAO privateObjectForKey:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCacheDAO publicObjectForKey:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCacheDAO privateObjectForKey:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCacheEntity encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager rootCachepath]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTCacheManager sharedObjectCacheManager]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTCacheManager sharedURLCacheManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager cleanCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager cleanPrivateCacheAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager cleanPublicCacheAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager memoryTMCachePath:type:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager diskTMCachePath:type:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager createTMDiskCachePath:type:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager privateCacheForKey:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager privateCacheForKey:atPath:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager cacheForKey:atPath:cacheType:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager privateCacheForKey:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager cacheForKey:atPath:finished:type:]", 4)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager privateCacheForKey:atPath:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager publicCacheForKey:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager publicCacheForKey:atPath:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager publicCacheForKey:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager publicCacheForKey:atPath:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager willTerminate]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager didEnterBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager dumpMemoryCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager saveMemoryCacehToDiskCache:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager privateCacheDirectory]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager publicCacheDirectory]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager callbackInMainThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager poolOfTMMemoryCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager poolOfTMDiskCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCacheManager poolAccessQueue]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTCodingObject instanceWithDomainObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCodingObject encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCodingRequestRecord encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCodingRequestRecord requestFingerPrint]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataDao saveContext:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataDao findResponseByRequestFingerPrint:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataDao saveResponse:withRequestFingerPrint:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataDao insertObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataDao insertObjects:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataDao saveOrUpdateManagedObject:withUniqueKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataDao saveOrUpdateManagedObjects:withUniqueKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataDao deleteObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataDao deleteObjects:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataDao findByFetchRequest:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataDao findByPredicate:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataDao findByPredicate:offset:limit:callback:]", 4)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataDao findByPredicate:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataDao findByPredicate:offset:limit:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataDao findByFetchRequest:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataDao findObjectsByPredicate:offset:limit:finished:]", 4)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataDao findObjectsByPredicate:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("+[MTCoreDataManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataManager mainContext]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataManager contextForCurrentThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataManager closeContextForCurrentThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataManager performReadBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataManager performWriteBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataManager performReadBlockInBackgroundThread:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataManager performReadBlockAndWaitInBackgroundThread:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataManager performWriteBlockInBackgroundThread:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataManager executeFetchRequest:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataManager findObjectsOfClass:byPredicate:offset:limit:finished:]", 5)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataManager findObjectsOfClass:byPredicate:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataManager saveObjects:forKey:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataManager saveObject:forKey:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataManager deleteObjects:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataManager deleteObject:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataManager callbackInMainThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataManager persistentStoreCoordinator]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCoreDataManager managedObjectModel]", 0)}, 0);
setTimeout(function(){hookObjC("+[CIPError cip_coreDataErrorWithCode:callstack:underlyingError:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAKError coreDataErrorWithCode:callstack:underlyingError:]", 3)}, 0);
setTimeout(function(){hookObjC("+[CIPError cip_cacheErrorWithCode:callstack:underlyingError:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAKError cacheErrorWithCode:callstack:underlyingError:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MTObjectCacheManager canSupportObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTObjectCacheManager saveObject:atPath:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MTObjectCacheManager restoreObjectAtPath:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTResponse encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTResponse lastUpdateDate]", 0)}, 0);
setTimeout(function(){hookObjC("+[SWLSwizzle loadMethodSwizzles]", 0)}, 0);
setTimeout(function(){hookObjC("+[SWLSwizzle swizzleClassMethod:ofClass:withMethod:ofClass:]", 4)}, 0);
setTimeout(function(){hookObjC("+[SWLSwizzle swizzleInstanceMethod:ofClass:withMethod:ofClass:]", 4)}, 0);
setTimeout(function(){hookObjC("+[MTBaseCellControl cellControlWithFrame:andStyle:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTBaseCellControl arrowDirection]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCheckbox layoutSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCheckbox checkedImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTCheckbox uncheckedImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTDoubleSidesSlider beginTrackingWithTouch:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTDoubleSidesSlider continueTrackingWithTouch:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTDoubleSidesSlider endTrackingWithTouch:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTDoubleSidesSlider adjustSectionBarsAndTitles]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTDoubleSidesSlider adjustBarLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTDragRefreshController2 layoutPromptViews]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTDragRefreshController2 startObserving]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTDragRefreshController2 stopObserving]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTDragRefreshController2 observeValueForKeyPath:ofObject:change:context:]", 4)}, 0);
setTimeout(function(){hookObjC("-[MTDragRefreshController2 checkOffsetsForDirection:change:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTDragRefreshController2 didFinishRefreshingInDirection:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTDragRefreshController2 didFinishRefreshingInDirection:animated:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTDragRefreshController2 dragableDirection]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTDragRefreshController2 refreshingDirection]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTDragRefreshController2 refreshingInsets]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTMessageInterceptor forwardingTargetForSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTMessageInterceptor respondsToSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTMessageInterceptor middleMan]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPlainModeImageStatusTracker imageLoaded]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTRefreshControl beginRefreshing]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTRefreshControl endRefreshing]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTSegmentedControl segementdControlWithTitles:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTSegmentedControl touchesEnded:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTSegmentedControl selectedSegmentIndex]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSmartBox doSuggestionsFilter:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTSmartBox textFieldShouldBeginEditing:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTSmartBox textFieldShouldEndEditing:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTSmartBox textFieldShouldClear:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTSmartBox textFieldShouldReturn:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTSmartBox textFieldDidBeginEditing:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTSmartBox textFieldDidEndEditing:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTSmartBox textField:shouldChangeCharactersInRange:replacementString:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MTSmartBox suggestionArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSmartBox textField]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSmartBox numberOfSuggesionLines]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTSmartBox filterSuggestions]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTStarRater commonInit]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTStarRater awakeFromNib]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTStarRater layoutSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTStarRater beginTrackingWithTouch:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTStarRater continueTrackingWithTouch:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTStarRater p_handlerTouchPoint:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTStarRater p_setRating:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTStarRater p_translateRating:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTStarRater p_updateStarUI]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTStarRater enableHalfStar]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTStarRater halfStarThreshold]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTStarRater fullStarThreshold]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTStarRater touchOffset]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTStarRater highlightFullStar]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTStarRater normalFullStar]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTStarRater halfStar]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTStarRater contentInsets]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTStarRater gapBetweenStars]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTStarRater starNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTTextField awakeFromNib]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTTextField commonInit]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTTextField textRectForBounds:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTTextField editingRectForBounds:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTTextField becomeFirstResponder]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTTextField resignFirstResponder]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTTextField normalBackgroundImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTTextField selectedBackgroundImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTTextField mtStyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTThemeManager didAddSubview:forClass:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTThemeManager willRemoveSubview:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTThemeManager startManagingTheme:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTThemeManager themeName]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTViewHierarchyObserver stopObserving]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTViewHierarchyObserver observedClasses]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKModalRepresentation sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKModalRepresentation resetStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKModalRepresentation _keyboardWillShow:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKModalRepresentation _keyboardWillHide:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKModalRepresentation dismissKeyboard:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKModalRepresentation closeAction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKModalRepresentation tapCloseAction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKModalRepresentation transitionInCompletion:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKModalRepresentation transitionOutCompletion:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKModalRepresentation animationDidStop:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKModalRepresentation animateWhenDismissed]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKModalRepresentation tapOutsideToDismiss]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKModalRepresentation verticalPosition]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKModalRepresentation transitionStyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKModalRepresentation modalFrame]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKModalRepresentation modalWantFullScreenLayout]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKModalRepresentation originalKeyWindow]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKQREncode encode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKQREncode encode:correctionLevel:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKQREncode encode:width:height:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAKQREncode encode:correctionLevel:width:height:]", 4)}, 0);
setTimeout(function(){hookObjC("+[SAKQREncode dataWithEncode:correctionLevel:width:height:]", 4)}, 0);
setTimeout(function(){hookObjC("+[SAKQREncode imageDataWithImage:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKQREncode conversionSAKQREncodeCorrectionLevel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKRedDot moveCircleByX:Y:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKRedDot addCircleAtFrame:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKRedDot expandToFitDigits]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKRedDot checkNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKRedDot redCircle]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKScrollViewDragControl beginLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKScrollViewDragControl finishLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKScrollViewDragControl didTapSelf:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKScrollViewDragControl tapGesture]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKScrollViewDragControl contentInset]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKScrollViewLoadMoreControl sak_addConstraints]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKSeparatorLine darkSeparatorLine]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKSeparatorLine borderlineSeparatorLine]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKSeparatorLine internalSeparatorLine]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSheetPresentAnimatedTransitioning transitionDuration:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSheetPresentAnimatedTransitioning animateTransition:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSheetPresentAnimatedTransitioning presentedFrame]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStatusBarTapNotification applicationStatusBarDidTap]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKTableViewSection numberOfObjects]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKTableViewSection indexTitle]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKURLProtocol _registerURLProtocol:withPriority:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKURLProtocol registerAllURLProtocols]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPError wts_errorProcess]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSADBannerModule shouldShow]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSADBannerModule readFromWhiteBoard]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSADBannerModule b_6oUCuSAKStatistics]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSADBannerModule wb_bannerArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSBankInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSBankInfo logoURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSBankInfo bankID]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSBankInfo logoURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSBankInfo hasConcerned]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSCardCellInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSCardCellInfo cardTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSCardCellInfo cardPicURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSCardCellInfo cardLevelId]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSCardCellInfo cardLevelName]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSCardCellInfo cardDescription]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSCardCellInfo cardURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSCommonTagInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSCommonTagInfo backgroundURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSCommonTagInfo backgroundURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSConcernBankService cleanLocalConcernBankInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSConcernedBankListInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSConcernedBankListInfo pageTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSConcernedBankListInfo allBankInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSConcernedBankListInfo concernedBankInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSConcernedBankListInfo bankList]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSCreditPromotionBannerInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSCreditPromotionBannerInfo bannerInfoArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSCreditPromotionPoiInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSCreditPromotionPoiInfo titleName]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSCreditPromotionPoiInfo poiInfoArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSCreditPromotionPoiInfo hasActivityForCity]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSCreditPromotionPoiInfo hasMore]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSCreditPromotionPoiInfo dateType]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSCreditPromotionPoiInfo allBank]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSCreditPromotionPoiInfo hasSetupBankList]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSCreditPromotionPoiInfo labelList]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSExternalMapOpener availableMapApps]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSGCListBaseModule linkTypeInSection:]", 1)}, 0);
setTimeout(function(){hookObjC("+[WTSLocationManager defaultInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSLocationManager startUpdatingLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSLocationManager stopUpdatingLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSLocationManager mrdlocationManager:didChangeAuthorizationStatus:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WTSLocationManager mrdlocationManager:didUpdateToLocation:formLocation:]", 3)}, 0);
setTimeout(function(){hookObjC("-[WTSLocationManager mrdlocationManager:didFailForLocationWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WTSLocationManager placeMark]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSLocationManager lastLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSLocationManager locationUpdateSignal]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSLocationManager locationFailSignal]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSLocationManager locationSuccessSignal]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSLocationManager locationCityFailSignal]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSLocationManager locationCitySuccessSignal]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSLocationManager locationAuthorizationClosedSignal]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSLocationManager cityID]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSLocationManager locateUpdating]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSMerchantAnnotation annotationWithName:coordinate:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WTSMerchantAnnotation merchantName]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSMerchantAnnotation merchantCoordinate]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPicassoDynamicModule shouldShow]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPicassoDynamicModule wb_picassoDynamicInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSPlatformActivitiesItemInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPlatformActivitiesItemInfo platformName]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPlatformActivitiesItemInfo platformLogo]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPlatformActivitiesItemInfo activityId]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPlatformActivitiesItemInfo actAbbreviation]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPlatformActivitiesItemInfo linkURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPlatformActivitiesItemInfo bankInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPlatformActivitiesItemInfo actTags]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPlatformActivitiesItemInfo activitylogoURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSPlatformActTagsItemInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPlatformActTagsItemInfo imgURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSPlatformDataInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPlatformDataInfo shouldShowPicassoview]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPlatformDataInfo jsName]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPlatformDataInfo jsPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPlatformDataInfo titleName]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPlatformDataInfo moreLinkURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPlatformDataInfo platformActivities]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSPoiCellBankDiscountInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPoiCellBankDiscountInfo tagList]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSPoiCellInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSPoiCellInfo logoURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSPoiCellInfo detailURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSPoiCellInfo tagIconURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPoiCellInfo poiId]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPoiCellInfo dpStar]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPoiCellInfo dpScore]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPoiCellInfo logoURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPoiCellInfo detailURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPoiCellInfo pointName]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPoiCellInfo typeName]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPoiCellInfo pricePerPerson]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPoiCellInfo banksDiscountInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPoiCellInfo tagIconURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPromotionPlatformInfoModule bindData]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPromotionPlatformInfoModule moduleDidAppear:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WTSPromotionPlatformInfoModule updateData]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPromotionPlatformInfoModule shouldShow]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPromotionPlatformInfoModule wb_platformInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPromotionPoiInfoListModule wb_filterCommand]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPromotionPoiInfoListModule wb_labelChangedCommand]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPromotionPoiInfoListModule wb_refreshCommand]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPromotionPoiInfoListModule wb_labelList]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPromotionTipsModule shouldShow]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPromotionTipsModule bindLocationSignals]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPromotionTipsModule bindNoneSupportCitySignal]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPromotionTipsModule updateUI]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPromotionTipsModule locationType]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSPromotionTipsModule wb_promotionLocationType]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSScrollViewLoadMoreControl requiresConstraintBasedLayout]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSScrollViewLoadMoreControl updateConstraints]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSSearchCardInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchCardInfo cardList]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchCardInfo pageCursor]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchCardInfo totalCount]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSSearchDataInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchDataInfo poiInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchDataInfo cardInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchHistoryModule wb_searchHistoryIsDisplayed]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchHistoryModule shouldShow]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchHistoryModule historyCacheDAO]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchHistoryModule historyKeywordsArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchHistoryModule saveSearchStringToHistoryArray:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchHistoryModule wb_searchString]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchHistoryModule wb_searchHistoryString]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchLocationModule shouldShow]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchLocationModule bindLocationSignals]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchLocationModule updateLocationInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchLocationModule locationType]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchLocationModule wb_reloadSearchInfoCommand]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchLocationModule wb_searchLocationType]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchLocationModule wb_searchHistoryIsDisplayed]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchNavitagionBarLogicModule b_fn84swyxStatistics]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchNavitagionBarLogicModule b_qxa570yrStatistics]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchNavitagionBarLogicModule moduleDidAppear:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchNavitagionBarLogicModule moduleWillDisappear:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchNavitagionBarLogicModule searchTextField]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchNavitagionBarLogicModule searchTextFieldIsResponder]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchNavitagionBarLogicModule wb_searchString]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchNavitagionBarLogicModule wb_searchHistoryString]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSSearchPoiInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchPoiInfo poiList]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchPoiInfo totalCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSSearchPoiInfo pageCursor]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSStarRater commonInit]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSStarRater awakeFromNib]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSStarRater beginTrackingWithTouch:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WTSStarRater continueTrackingWithTouch:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WTSStarRater p_handlerTouchPoint:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WTSStarRater p_setRating:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WTSStarRater p_translateRating:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WTSStarRater p_updateStarUI]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSStarRater enableHalfStar]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSStarRater halfStarThreshold]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSStarRater fullStarThreshold]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSStarRater touchOffset]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSStarRater highlightFullStarImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSStarRater normalFullStarImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSStarRater halfStarImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSStarRater contentInsets]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSStarRater gapBetweenStars]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSStarRater starNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSStarRater starSubLayers]", 0)}, 0);
setTimeout(function(){hookObjC("+[WTSWalletServiceConfigure shareConfigure]", 0)}, 0);
setTimeout(function(){hookObjC("-[WTSWalletServiceConfigure sourceType]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKWebPProtocol canInitWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKWebPProtocol canonicalRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKWebPProtocol requestIsCacheEquivalent:toRequest:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKWebPProtocol startLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKWebPProtocol stopLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKWKScriptMessageRouter userContentController]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKCandyHostRegister registHost:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKCandyHostRegister unRegistHost:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKCandyPersistentConnectProtocol canInitWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKCandyPersistentConnectProtocol canonicalRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKCandyURLProtocol canInitWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKCandyURLProtocol canonicalRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKCandyURLProtocol startLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCandyURLProtocol stopLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCandyURLProtocol connectionProcessor]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKCandyURLProtocolImpl canInitWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKCandyURLProtocolImpl canonicalRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKCommonParameterFilterKeysRegister registerFilterAllKeysWithHost:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKCommonParameterFilterKeysRegister registerFilterKeys:withHost:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKCommonParameterFilterKeysRegister hostFilterKeys]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKCommonParameterFilterKeysRegister hostsFilterAllKeys]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKCommonParameterProtocol resetToken]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKCommonParameterProtocol canInitWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKCommonParameterProtocol canonicalRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKCommonParameterProtocol startLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCommonParameterProtocol stopLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKCommonParameterProtocol connectionProcessor]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKDarwinNotificationCenter sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKDarwinNotificationCenter registerForNotificationsWithIdentifier:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKDarwinNotificationCenter unregisterForNotificationsWithIdentifier:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDarwinNotificationCenter postNotificationWithIdentifier:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKDarwinNotificationCenter notificationCallbackReceivedWithIdentifier:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKEncryptProtocol encryptData:key:IV:error:]", 4)}, 0);
setTimeout(function(){hookObjC("+[SAKEncryptProtocol errorWithCode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKEncryptProtocol randomIV]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKEncryptProtocol canInitWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKEncryptProtocol canonicalRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKEncryptProtocol AESKeyWithTimestamp:UUID:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol headerFieldStringWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol plainDataWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol startLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol stopLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol handleCryptoError:inAction:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol handleCryptoEncryptionError:inAction:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol startHandlingResponseData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol finishHandlingResponseData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol handleRawData:fromIndex:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol handleRawDataFinally]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol startDecryption:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol decryptBlocksWithData:fromIndex:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol decryptLastBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol finishDecryption]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol bufferIVFromData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol hasDecryptIV]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol handleDecryptedData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol startDecompression:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol decompressDataByGZIP:withError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol finishDecompression]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol connection:didReceiveResponse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol connection:didReceiveData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol connectionDidFinishLoading:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol connection:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol connection:willSendRequest:redirectResponse:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol connection:willSendRequestForAuthenticationChallenge:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol cryptorResult]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol gzipStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol AESKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKEncryptProtocol decryptIV]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKHTTPSAuthenticationProtocol TLSAuthenticationStatus]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKHTTPSAuthenticationProtocol addAuthenticationHost:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKHTTPSAuthenticationProtocol canInitWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKHTTPSAuthenticationProtocol canonicalRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKHTTPSAuthenticationProtocol startLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHTTPSAuthenticationProtocol stopLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHTTPSAuthenticationProtocol connectionProcessor]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKHTTPSAuthenticationProtocolProcessor connection:willSendRequestForAuthenticationChallenge:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKHTTPSAuthenticationProtocolProcessor connection:didReceiveAuthenticationChallenge:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKHTTPSAuthenticationProtocolProcessor connection:didCancelAuthenticationChallenge:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAKNetworkConfiguration removeEncryptionHost:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKNetworkConfiguration addEncryptionHost:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKNetworkConfiguration transportHost]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKNetworkConfiguration commonParameterEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKNetworkConfiguration forceHTTPSEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKProtocolConnectionProcessor connection:willSendRequest:redirectResponse:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAKProtocolConnectionProcessor connection:didReceiveData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKProtocolConnectionProcessor connectionDidFinishLoading:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKProtocolConnectionProcessor connection:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKProtocolConnectionProcessor connection:didReceiveResponse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKProtocolConnectionProcessor connection:willSendRequestForAuthenticationChallenge:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKProtocolConnectionProcessor protocolProcessor]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKProtocolRegister registerProtocol:withPriority:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKPushMessage contentAvaiable]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPushMessage pushID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPushMessage URLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPushMessage userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPushMessage sdkPayload]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKPushMessage pushMessage]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKSearchIndex indexIDJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSearchIndex URL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSearchIndex indexID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSearchIndexGroup indexItems]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSearchIndexGroup cityID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSearchIndexManager removeSearchIndexByBusinesses:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKSearchIndexManager buildUniqueIdentifier:searchIndex:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAKSearchIndexManager buildDomainIdentifier:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSearchIndexManager updateIndexItems]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSearchIndexManager buildIndexItems:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSearchIndexManager batchBuildIndex:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSearchIndexManager makeSearchableItemAttributeSet:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSearchIndexManager batchBuildIndexWithIndexItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSearchIndexManager finishBuildIndex]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSearchIndexManager insertIndexItems:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKSearchIndexManager loadSearchIndex]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSearchIndexManager domainIdentifierPrefix]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSearchIndexManager searchIndexExpirationKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSearchIndexManager indexItems]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKSearchIndexManager indexAccessLock]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKRemotePushUtil savePushToken:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKRemotePushUtil silentPushSupportURL:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKRemotePushUtil reportPush:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKRemotePushUtil reportPushMessage:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKVirtualHostPersistentConnectProtocol canInitWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKVirtualHostPersistentConnectProtocol canonicalRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKVirtualHostRegistrar registerVirtualHost:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKVirtualHostRegistrar virtualHosts]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKVirtualHostURLProtocol canInitWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKVirtualHostURLProtocol canonicalRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKVirtualHostURLProtocol startLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKVirtualHostURLProtocol stopLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKVirtualHostURLProtocol connectionProcessor]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKVirtualHostURLProtocolImpl canInitWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKVirtualHostURLProtocolImpl canonicalRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVOpenSSLDesUtil encryptWithString:key:]", 2)}, 0);
setTimeout(function(){hookObjC("+[NVOpenSSLDesUtil decryptWithData:key:]", 2)}, 0);
setTimeout(function(){hookObjC("+[NVOpenSSLRSAUtil shareInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVOpenSSLRSAUtil encryptData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVOpenSSLRSAUtil decryptCipherData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVOpenSSLRSAUtil verifyb2keyData:Signature:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVOpenSSLRSAUtil verifyHostSignature:dataLen:signature:signatureLen:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NVOpenSSLRSAUtil publicKeyBase64]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVOpenSSLRSAUtil privateKeyBase64]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVOpenSSLRSAUtil removeHeaderFooter:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVOpenSSLRSAUtil importRSAPublicKeyBase64:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVOpenSSLRSAUtil formatPublicKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVOpenSSLRSAUtil stringByComputingMD5:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVOpenSSLRSAUtil importRSAPrivateKeyBase64:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVOpenSSLRSAUtil formatPrivateKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TNCommonCryptUtil CommonCryptKey]", 0)}, 0);
setTimeout(function(){hookObjC("+[TNCommonCryptUtil deviceKey]", 0)}, 0);
setTimeout(function(){hookObjC("+[TNCommonCryptUtil keyForPasswordEncrypt]", 0)}, 0);
setTimeout(function(){hookObjC("+[TNCommonCryptUtil md5:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TNCommonCryptUtil data_md5:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TNCommonCryptUtil GRUDID]", 0)}, 0);
setTimeout(function(){hookObjC("+[TNCommonDataUtil encodeGZip:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TNCommonDataUtil dp_decodeGZip:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TNKeychainBindings sharedKeychainBindings]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNKeychainBindings objectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNKeychainBindings removeObjectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNKeychainBindings stringForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNReadPackage analysPackagesWithError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureConnectionProtocol writeWithStream:t:isSecure:dataLength:noSecureLength:data:]", 6)}, 0);
setTimeout(function(){hookObjC("-[TNSecureConnectionProtocol writeByte:stream:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNSecureConnectionProtocol writeBytes:length:stream:]", 3)}, 0);
setTimeout(function(){hookObjC("-[TNSecureConnectionProtocol writeSecure:stream:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNSecureConnectionProtocol write:stream:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNSecureConnectionProtocol buildHeaderWith:t:isSecure:dataLength:noSecureLength:]", 5)}, 0);
setTimeout(function(){hookObjC("-[TNSecureConnectionProtocol readWithStream:data:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNSecureConnectionProtocol readByteWithStream:data:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNSecureKeyInfo encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TNSecureKeyInfo sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureKeyInfo removeSecureKeyModelByB2:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureKeyInfo decryptB2key:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureKeyInfo removeAllSecureKeyModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureKeyInfo clearKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureKeyInfo saveToKeyChain]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureKeyInfo clearRSAKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureKeyInfo privateKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureKeyInfo publicKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureKeyInfo curSecureKeyModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureKeyInfo linkedList]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNDataPacket publicKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNDataPacket deviceInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[TNSecureProcess sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProcess startCreateKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProcess handleSecureProtocol:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProcess requestForCreateKey:tid:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProcess requestChangeKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProcess handlerChangeKeyResponseData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProcess handlerCreateKeyResponse:data:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProcess handlerKeySoonExpireData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProcess handleKeyExpiredWithData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProcess handleNoTidWithData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProcess requestNoB2CreateKeyData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProcess requestForNotifySecccess:tid:b2:]", 3)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProcess hasSecureKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProcess md5:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProcess callBackBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProcess secureKeyReadyBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProcess catBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProcess shouldSignB2key]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNPayloadInfo b2Key]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNPayloadInfo hasB2key]", 0)}, 0);
setTimeout(function(){hookObjC("+[TNSecureProtocolData createProtocolData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProtocolData contentData]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProtocolData compressionType]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProtocolData deviceType]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProtocolData totalLength]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProtocolData noSecureLength]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProtocolData dataArr]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProtocolData protocolVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProtocolData securePayload]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProtocolData dataSource]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureProtocolData logForReadZero]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVSocketAddress addressWithHost:andPort:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream buildStreamWithAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream backgroundThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream stream:handleEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream onStreamHasBytesAvailable:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream processPkg:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream onStreamHasBytesAvailableOld:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream onStreamHasSpaceAvailable:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream writeStreamAvailable]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream flashWriteBuffer]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream currentWritePackage]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream writeComplete:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream sendProtocol:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream sendData:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream writingPackages]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream clearWirtePkgs]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream onStreamErrorOccurred:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream onStreamEndEncountered:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream onStreamOpenCompleted:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream closeStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream handleDecodeData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream resetSecureKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream readStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream writeStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream connectStateBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream readErrorBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream onReadPingBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream handlerErrorStatusBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream closeBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream onReadResponseBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream completedWithsuccessBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream beginChangeKeyBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream writeStreamCanWriteBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureStream useNoBlockReading]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNWritePackage analysProtocolData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNWritePackage wirteFinishLength:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVMainBoard networkType]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTAlertAction performAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTAlertAction alertController]", 0)}, 0);
setTimeout(function(){hookObjC("+[TTAuthorizationManager canuseCNContact]", 0)}, 0);
setTimeout(function(){hookObjC("+[TTAuthorizationManager currentContactsAuthorization]", 0)}, 0);
setTimeout(function(){hookObjC("+[TTAuthorizationManager requestContactAuthorizationHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TTAuthorizationManager requestAndTransferContactsHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TTAuthorizationManager requestContactsError]", 0)}, 0);
setTimeout(function(){hookObjC("+[TTAuthorizationManager localAuthorizationStatusWithType:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TTAuthorizationManager requestAuthorizationWithType:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("+[TTAuthorizationManager transformAuthorizationStatusWithPhotoStatus:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TTAuthorizationManager transformAuthorizationStatusWithVideoStatus:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TTAuthorizationManager transformCNStatus:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TTAuthorizationManager transformABStatus:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TTBridgeManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager checkContainerType]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager apiHasSupportedByApp:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TTBridgeManager knbStorage_storeValue:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[TTBridgeManager knbStorage_valueForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TTBridgeManager knbStorage_removeValueForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager previewImageActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager whiteListBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager fileSchemeWhitePathListBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager shareActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager shareImageActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager openSchemeActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager jumpToSchemeActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager fingerprintActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager contactListActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager accountLoginActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager accountLogoutActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager chooseImageActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager uploadPhotoActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager playVoiceActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager bindActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager closeWindowActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager pickCityActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager analyticsActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager ajaxActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager payActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager scanQRCodeActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager canInitRequestBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager startLoadingBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager shouldStartLoadBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager chooseMediaActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager playMediaActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager editMediaActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager uploadMediaActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager sendLogActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager shareMiniProgramActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager spfToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTBridgeManager containerType]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseSetResult resultCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseSetResult resultData]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseShare shareType]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseShare miniProgram]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseDownloadImage imageUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseSetSpotlight webpageURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseSetSpotlight contentDescription]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseJumpToScheme toHome]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBasePlayVoice localId]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseSetBarrageEnabled yPercent]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseSetBarrageEnabled sendURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseSetBarrageEnabled requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseBind appKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseChooseImage ensureUpright]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseChooseImage returnType]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseChooseImage selectedPhotos]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseUploadPhoto localIds]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseUploadPhoto signatureURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseUploadPhoto clientId]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseMapi cacheType]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseAjax cacheType]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseScanQRCode needResult]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseShark contentType]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseShark withCredentials]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseCapture returnType]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseSharePic thumbPic]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseSharePic picQuality]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseShareMiniProgram miniProgramId]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseShareMiniProgram imageUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseTitleImage imageUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBasePlayMedia videoId]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseEditMedia videoId]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTParamBaseUploadMedia videoId]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTQueryParameter callbackId]", 0)}, 0);
setTimeout(function(){hookObjC("+[TTWebBundleInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebBundleInfo hasDiffInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebBundleInfo bundleHash]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebBundleInfo diffURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebBundleInfo diffHash]", 0)}, 0);
setTimeout(function(){hookObjC("+[TTWebBundle predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebBundle bundleInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[TTUtils implementationOfClassMethod:selector:]", 2)}, 0);
setTimeout(function(){hookObjC("+[TTUtils schemedURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebBundleInstallOperation fetchMetaData]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebBundleInstallOperation downloadBundleWithURL:isPatch:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TTWebBundleInstallOperation unzipBundle:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebBundleInstallOperation installBundleFromPath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebBundleInstallOperation completionQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebBundleInstallOperation bundleModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebBundleInstallOperation oldbundleHash]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebBundleInstallOperation currentBundleHash]", 0)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewAPIVersionManager defaultManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewAPIVersionManager registerAPIName:version:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewAPIVersionManager apiVersionWithName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewAPIVersionManager apiVersionDict]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewConfig updateGlobalConfigAsyncDaily]", 0)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewConfig sharedConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewConfig appID]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewConfig appName]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewConfig perfToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewConfig prefixURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewConfig redirectURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewConfig onlineConfigURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewConfig onlineConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewConfig tokenKeyName]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewConfig handleURLAfterLogin]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewConfig imageBundle]", 0)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewCookieManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewCookieManager loadCookies]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewCookieManager bindDPSignals]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewCookieManager bindMTSignals]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewCookieManager updateCookies]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewCookieManager cookieWhiteBoard]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewCookieManager removeDataStore]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewCookieManager removeTokenCookie]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewCookieManager updateLocationCookie]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewCookieManager removeCookieWithKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewCookieManager cookieHeaderForDomain:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewCustomDataCenter defaultCenter]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewCustomDataCenter registerCustomDataName:handler:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewCustomDataCenter unregisterCustomDataName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewCustomDataCenter handlerWithCustomDataName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewCustomDataCenter customDataDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_login:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_logout:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_ajax:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_checkAuthorization:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge checkLocationAuth:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_autoLock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_webview_setHtmlTitle:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewJSBridge basic_attributedStringFromHTML:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_getVersion:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_getNetworkType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_getAuthorizationStatus:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_getDeviceInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_getUserInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_getLocation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_getFingerprint:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_getCityInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_pay:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_scanQRCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_addRequestSignature:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_bind:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_subscribe:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_unsubscribe:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_publish:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_capture:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge saveCaptureImage:param:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_isInstalledApp:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_checkVersion:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_pickCity:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_closeWindow:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_pickContact:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_getContactList:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge _executeError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge _executeRequests:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge _requestLimitContactList:inTotalList:hasMore:]", 3)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge requestArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge contactList]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge contactPickerDidCancel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge contactPicker:didSelectContact:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge handlerPerson:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_getData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_downloadImage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_getResult:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_chooseMedia:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_playMedia:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_editMedia:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_uploadMedia:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_openScheme:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_jumpToScheme:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_previewImage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_ready:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_setSearchBar:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewJSBridge mtui_getValueFromHandlerData:key:defaultValue:]", 3)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewJSBridge mtui_decimalWithUnichar:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_sendLog:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_sendSMS:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_registerServiceWorker:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_unregisterServiceWorker:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_setResult:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_share:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_shareImage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_shareMiniProgram:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_shark:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_lxlog:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_store:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_retrieve:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_remove:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_clearStorage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_setImageTitle:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_setTitle:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_setStatusBarStyle:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_setScrollEnabled:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_setBouncesEnabled:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_alert:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_confirm:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_prompt:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_toast:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsbui_imageWithIcon:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_chooseImage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_uploadPhoto:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_vibrate:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_playVoice:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsapi_updateWebBundle:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewJSBridge encodeMethodName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewJSBridge selectorWithOriginMethodName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewJSBridge registerNamespaceWithName:andInstance:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge namespaceInstanceWithMethodName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge forwardToMTNBWithMethodName:callbackId:params:]", 3)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge signatureCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge signatureCheck:namespaceInstance:]", 2)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewJSBridge whiteListData]", 0)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewJSBridge registerCustomHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge executeSuccessCallbackWithId:response:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge executeFailureCallbackWithId:errorCode:errorMsg:]", 3)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge executeFailureCallbackWithId:errorCode:errorMsg:response:]", 4)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge executeActionCallbackWIthId:response:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge executeCancelCallbackWithId:response:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge executeJSWithCallbackId:status:errorCode:errorMsg:response:]", 5)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge executeJSWithCallbackId:status:errorCode:errorMsg:returnValue:]", 5)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge executeJS:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge executeJS:completionHandler:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge callbackIds]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge subscribeActionMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge jsBridge]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge customHandler]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewJSBridge bridgeParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewOrderList sharedList]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewOrderList updateDataFromHorn]", 0)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewOrderList methodNameInGreenChannel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewOrderList appID]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewOrderList canUseShark]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewOrderList canUseOffline]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewOrderList canUseEncode]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewOrderList reportDevices]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewOrderList bridgeWhiteList]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewOrderList accessWhiteList]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewOrderList accessBlackList]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewOrderList accessSharkWhiteList]", 0)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewReporter reportRequest:linkType:contentLength:]", 3)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewReporter reportPageAccess:statusCode:]", 2)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewReporter collectBridgeCallInfoWithPath:method:status:errorCode:]", 4)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewReporter collectBridgeLog:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewReporter bridgeLogsPool]", 0)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewReporter performReportWithType:value:tags:]", 3)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewStyleManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewUAManager registerUserAgent:appName:containerType:]", 3)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewUAManager userAgent:appName:containerType:]", 3)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewUAManager identifierForTitansX]", 0)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewUAManager userAgent]", 0)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewURLProtocol customURLRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewURLProtocol canInitWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TTWebViewURLProtocol canonicalRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewURLProtocol startLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[TTWebViewURLProtocol stopLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMFPSSampler tick:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMFPSSampler hertzDoSample:domain:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WMFPSSampler displayLink]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMFPSSampler avgFPS]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMCpuSampler hertzDoSample:domain:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WMCallStackSmapler hertzDoSample:domain:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WMMemorySampler hertzDoSample:domain:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WMHertzSamplerContainer addSampler:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertzSamplerContainer hertzDoSample:domain:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WMHertzSamplerContainer samplersArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertz start:configuration:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WMHertz startSamplers]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertz stopSamplers]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertz startSmoothObserver]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertz stopSmoothObserver]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertz smoothObserverCallback]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertz doSmoothSample]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertz doTimerSample]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertz destroySampleTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertz destroyUpdateDashboardTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertz updateDashboard:memory:cpu:]", 3)}, 0);
setTimeout(function(){hookObjC("-[WMHertz stringFromCodeLogsArray:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertz luckyDraw:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertz pageEventTracker]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertz reportManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertz updateTimestampBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertz smoothObserver]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertz smoothSamplers]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertz timerSamplers]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertz sampleQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertz sampleSource]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertz updateDashboardSource]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertz samplingCallStack]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertz start:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertz memoryProfilerEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertz shouldIgnoreRequestBlock]", 0)}, 0);
setTimeout(function(){hookObjC("+[WMHertzBacktraceLogger backtraceOfCurrentThread]", 0)}, 0);
setTimeout(function(){hookObjC("+[WMHertzBacktraceLogger backtraceOfMainThread]", 0)}, 0);
setTimeout(function(){hookObjC("+[WMHertzBacktraceLogger backtraceOfAllThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzConfiguration mergeWithRemoteConfig:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertzConfiguration remoteConfigIsValid]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzConfiguration laggyThreshold]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzConfiguration laggyCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzConfiguration samplingRate]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzConfiguration userSamplingRate]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzConfiguration pageTrackerConfigFilePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzConfiguration enableExists]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzConfiguration userSamplingRateExists]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzConfiguration samplingRateExists]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzConfiguration laggyThresholdExists]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzConfiguration laggyCountExists]", 0)}, 0);
setTimeout(function(){hookObjC("+[WMHertzDebugConfiguration sharedConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzDebugConfiguration shouldShowLaggyAlert]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzDebugConfiguration shouldReportToCAT]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzDebugConfiguration shouldReportToHertest]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzDomain appCpuRate]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzDomain memoryUsage]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzDomain callStackReport]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzMainLoopPingThread handlerBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzMainLoopPingThread runloopObserver]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzMainLoopPingThread lastActivity]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzMainLoopObserver pingThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzMainLoopObserver handlerBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventDomain eventID]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker startPageInitEventTrack:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker endPageInitEventTrack:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker startPageRequestEventTrack:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker endPageRequestEventTrack:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker endPageRenderEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker tagForPage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker configItemForPage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker configItem:containsApi:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker concatPage:eventID:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker shouldTrackURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker tick:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker startDispayLink]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker stopDispayLink]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker trackComplete:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker notifyObserversForPageEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker displayLink]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker configItemArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker currentTrackRecordArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker customTrackRecordDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker observersDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker coldStartRecord]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker startPageCustomEventTrack:eventID:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker endPageCustomEventTrack:eventID:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker addObserver:selector:forPage:]", 3)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker addObserver:selector:forPage:eventID:]", 4)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker removeObserver:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageEventTracker removeObserver:forPage:eventID:]", 3)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageTrackRecord configItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageTrackRecord requestEvent]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageTrackRecord renderEvent]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzPageTrackRecord finalEvent]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzColdStartRecord beforeMainPageEvent]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzColdStartRecord mainPageEvent]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzColdStartRecord finalEvent]", 0)}, 0);
setTimeout(function(){hookObjC("+[WMHertzReportCache sharedCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportCache storeCallStackReport:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportCache storeSpeedReportWithRecord:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportCache storeSampleReportWithPageName:domain:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportCache queryAllCallStackCacheItems:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportCache loadCallStackReport:completeBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportCache cleanStaleCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportCache cleanAllCallStack]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportCache pathOfCacheDirectory]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportCache makeDiskCachePath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportCache expirationDate]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportCache writeFileWithPrefixName:data:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportCache dateFormatterLong]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportCache dateFormatterShort]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportCache fileManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportCache pathForHertz]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportCache pathForPerformance]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportCache pathForSample]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportManager reportCallStack:inPage:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportManager reportSample:inPage:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportManager reportPageSpeed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportManager _reportCallStackToHertest:inPage:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportManager _reportSampleToHertest:type:value:]", 3)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportManager _reportPageSpeedToHertest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportManager _sendRequestToHertest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMHertzReportManager sessionID]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkAbnormalRequestInspector recordRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkAbnormalRequestInspector recordURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkAbnormalRequestInspector historyDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkAbnormalRequestInspector clearBlackList]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkAbnormalRequestInspector clearHistory]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkAbnormalRequestInspector clearAllExpiredHistory]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkAbnormalRequestInspector urlStringInRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkAbnormalRequestInspector serialQueue]", 0)}, 0);
setTimeout(function(){hookObjC("+[WMNetworkFusePersistentConnectProtocol canInitWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[WMNetworkFusePersistentConnectProtocol canonicalRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[WMNetworkFuseURLProtocol canInitWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[WMNetworkFuseURLProtocol canonicalRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkFuseURLProtocol startLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkFuseURLProtocol stopLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkFuseURLProtocol connection:willSendRequest:redirectResponse:]", 3)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkFuseURLProtocol connection:didReceiveResponse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkFuseURLProtocol connection:didReceiveData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkFuseURLProtocol connectionDidFinishLoading:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkFuseURLProtocol connection:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("+[WMNetworkMeter sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkMeter installWithReportBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkMeter regApiHost]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkMeter regResHost]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkMeter regWebHost]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkMeter checkFuseSwitch]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkMeter lastDataInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkMeter shouldFuseAbnormalRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkMeter targetInterval]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkMeter didFuseAbnormalRequestBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageDataInfo loadNetworkParameters]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageDataInfo connectionType]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageDataInfo contentType]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageDataTotalInfo encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageDataTotalInfo mergeWithDataInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageDataTotalInfo connectionType]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageDataTotalInfo contentType]", 0)}, 0);
setTimeout(function(){hookObjC("+[WMNetworkUsageManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageManager recordNetworkUsageDataInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageManager networkConditionChange:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageManager uploadNetworkUsageDataInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageManager reportBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageManager networkUsageDataTotalInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageManager serialQueue]", 0)}, 0);
setTimeout(function(){hookObjC("+[WMNetworkUsageURLProtocol canInitWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[WMNetworkUsageURLProtocol canonicalRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageURLProtocol startLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageURLProtocol stopLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageURLProtocol connection:willSendRequest:redirectResponse:]", 3)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageURLProtocol connection:didReceiveResponse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageURLProtocol connection:didReceiveData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageURLProtocol connectionDidFinishLoading:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageURLProtocol connection:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageURLProtocol responseHeaderLength]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageURLProtocol responseDataLength]", 0)}, 0);
setTimeout(function(){hookObjC("-[WMNetworkUsageURLProtocol MIMEType]", 0)}, 0);
setTimeout(function(){hookObjC("+[MMApiRegister shareInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[MMApiRegister startMTA:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MMApiRegister DidEnterBackground:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MMApiRegister buildAppDictionary:oldAppDictionary:]", 2)}, 0);
setTimeout(function(){hookObjC("+[MMApiRegister registerApp:andAppSupportContentFlag:enableMTA:]", 3)}, 0);
setTimeout(function(){hookObjC("+[MMApiRegister registerApp:withDescription:andAppSupportContentFlag:enableMTA:]", 4)}, 0);
setTimeout(function(){hookObjC("+[MTAWX startWithAppkey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MTAWX onBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaseReq openID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaseResp errCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaseResp errStr]", 0)}, 0);
setTimeout(function(){hookObjC("-[SendMessageToWXReq bText]", 0)}, 0);
setTimeout(function(){hookObjC("-[PayReq nonceStr]", 0)}, 0);
setTimeout(function(){hookObjC("-[PayReq partnerId]", 0)}, 0);
setTimeout(function(){hookObjC("-[PayReq prepayId]", 0)}, 0);
setTimeout(function(){hookObjC("-[PayResp returnKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[HBReq nonceStr]", 0)}, 0);
setTimeout(function(){hookObjC("-[GetMessageFromWXResp bText]", 0)}, 0);
setTimeout(function(){hookObjC("-[JumpToBizProfileReq extMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[JumpToBizProfileReq profileType]", 0)}, 0);
setTimeout(function(){hookObjC("-[JumpToBizWebviewReq webType]", 0)}, 0);
setTimeout(function(){hookObjC("-[JumpToBizWebviewReq extMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[CreateChatRoomReq groupId]", 0)}, 0);
setTimeout(function(){hookObjC("-[CreateChatRoomReq chatRoomName]", 0)}, 0);
setTimeout(function(){hookObjC("-[CreateChatRoomReq extMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[CreateChatRoomReq chatRoomNickName]", 0)}, 0);
setTimeout(function(){hookObjC("-[CreateChatRoomResp extMsg]", 0)}, 0);
setTimeout(function(){hookObjC("+[WHLDebugCenter defultCenter]", 0)}, 0);
setTimeout(function(){hookObjC("+[WHLDebugCenter whaleDebugList]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLDebugCenter openWhaleDebugKeyInThreadDictionaryIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLDebugCenter closeWhaleDebugKeyInThreadDictionaryIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLDebugCenter needMockImageWithName:bundle:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WHLDebugCenter nativeWhaleModeOn]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLDebugCenter whaleListDebugExist]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLImage resourcePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLImage saveImageToDisk:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WHLImage placeholderImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[WHLImageDownloader sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[WHLImageDownloader downloadImage:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WHLImageDownloader downloadImage:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[WHLImageDownloader updateDownloaderState]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLImageDownloader invalidateMonitorTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLImageDownloader startBackgroundDownloadingQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLImageDownloader immediateDownloadCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLImageDownloader downloadImage:immediate:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[WHLImageDownloader immediateDownloader]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLImageDownloader backgroundDownloader]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLImageDownloader monitorTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLImageDownloader downloaderCompletedSerialQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLImageInfo whl_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLImageInfo whl_namePrefix]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLImageInfo whl_bundle]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLImageInfo whl_placeholder]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLImageInfo whl_maps]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLImageInfo whl_completion]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLImageInfo whl_customImageNamedBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLImageInfo whl_map]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLImageInfo namePrefix]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLImageInfo customImageNamedBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLMemoryCache cachedImage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WHLMemoryCache cacheImage:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[WHLReachability reachabilityWithAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("+[WHLReachability reachabilityForInternetConnection]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLReachability startNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLReachability stopNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLReachability networkStatusForFlags:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WHLReachability currentReachabilityStatus]", 0)}, 0);
setTimeout(function(){hookObjC("+[WHLPathHelper whaleBundle]", 0)}, 0);
setTimeout(function(){hookObjC("+[WHLPathHelper whalePrimaryDirectory]", 0)}, 0);
setTimeout(function(){hookObjC("+[WHLPathHelper whaleImagesDirectory]", 0)}, 0);
setTimeout(function(){hookObjC("+[WHLPathHelper imagePath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[WHLPathHelper listFilesInDocuments]", 0)}, 0);
setTimeout(function(){hookObjC("+[WHLPendingResourcesManager defaultManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLPendingResourcesManager whaleMap]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLPendingResourcesManager removePendingWHLImage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WHLPendingResourcesManager whlImageWithName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[WHLPendingResourcesManager whaleCacheMap]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLPendingResourcesManager whaleCachePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[WHLPendingResourcesManager pendingResources]", 0)}, 0);
setTimeout(function(){hookObjC("+[WHLResourceFinder findImageWithInfo:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("+[WHLResourceFinder findImageWithInfoImp:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("+[WHLResourceFinder defaultPlaceholderImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[WHLStatusManager hasInitializedResources]", 0)}, 0);
setTimeout(function(){hookObjC("+[WHLUtils clearAllCache:]", 1)}, 0);
setTimeout(function(){hookObjC("+[WHLUtils generateUniqueImageName:bundle:]", 2)}, 0);
setTimeout(function(){hookObjC("+[WHLUtils deleteImageNameExtAndMultipleSuffix:]", 1)}, 0);
setTimeout(function(){hookObjC("+[WHLUtils bundleNameWithImageName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[WHLUtils reportWhaleImageLoadSuccess:imageName:bundleName:source:]", 4)}, 0);
setTimeout(function(){hookObjC("+[WHLUtils reportBundleImage:bundle:scale:]", 3)}, 0);
setTimeout(function(){hookObjC("+[WHLUtils realNamesWithName:extension:imageScaleDic:]", 3)}, 0);
setTimeout(function(){hookObjC("+[NVHandlerWrapper wrapperWithHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVWhiteBoard valueForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVWhiteBoard signalForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVWhiteBoard subjectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVWhiteBoard queryMessage:withParameters:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVWhiteBoard registMessageHandler:forMessageSelector:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVWhiteBoard registMessage:forMessageHandler:forMessageSelector:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVWhiteBoard removeHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVWhiteBoard objectForKeyedSubscript:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVWhiteBoardSubject subscribe:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVWhiteBoardSubject sendNext:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVWhiteBoardSubject currentValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapBidirectionalCache objectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapBidirectionalCache containsKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapBidirectionalCache keyForObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapBidirectionalCache containsObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapBidirectionalCache removeAllObjects]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapBidirectionalCache removeObjectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapBidirectionalCache removeObjectsForKeys:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapBidirectionalCache removeKeyForObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapBidirectionalCache removeKeysForObjects:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapBidirectionalCache enumerateKeysWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapBidirectionalCache enumerateObjectsWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapBidirectionalCache enumerateKeysAndObjectsWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapBidirectionalCache countLimit]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapBidirectionalCache allowedKeyClasses]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapBidirectionalCache allowedObjectClasses]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapCache countLimit]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapCache objectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapCache containsKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapCache removeAllObjects]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapCache removeObjectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapCache removeObjectsForKeys:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapCache enumerateKeysWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapCache enumerateKeysAndObjectsWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapCache allowedKeyClasses]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapCache allowedObjectClasses]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapCollectionKey encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("+[YapCollectionKey keyCallbacks]", 0)}, 0);
setTimeout(function(){hookObjC("+[YapDatabase defaultSerializer]", 0)}, 0);
setTimeout(function(){hookObjC("+[YapDatabase defaultDeserializer]", 0)}, 0);
setTimeout(function(){hookObjC("+[YapDatabase propertyListSerializer]", 0)}, 0);
setTimeout(function(){hookObjC("+[YapDatabase propertyListDeserializer]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase databasePath_wal]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase databasePath_shm]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase sqliteVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase openDatabase]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase configureDatabase:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase createTables]", 0)}, 0);
setTimeout(function(){hookObjC("+[YapDatabase sqliteVersionUsing:]", 1)}, 0);
setTimeout(function(){hookObjC("+[YapDatabase pragma:using:]", 2)}, 0);
setTimeout(function(){hookObjC("+[YapDatabase pragmaValueForSynchronous:]", 1)}, 0);
setTimeout(function(){hookObjC("+[YapDatabase pragmaValueForAutoVacuum:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase beginTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase commitTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase readSnapshot]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase writeSnapshot]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase fetchPreviouslyRegisteredExtensionNames]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase connectionDefaults]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase defaultObjectCacheEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase defaultObjectCacheLimit]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase defaultMetadataCacheEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase defaultMetadataCacheLimit]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase defaultObjectPolicy]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase defaultMetadataPolicy]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase defaultAutoFlushMemoryFlags]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase addConnection:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase removeConnection:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase newConnection]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase registerExtension:withName:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase registerExtension:withName:connection:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase asyncRegisterExtension:withName:completionBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase asyncRegisterExtension:withName:completionQueue:completionBlock:]", 4)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase asyncRegisterExtension:withName:connection:completionBlock:]", 4)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase asyncRegisterExtension:withName:connection:completionQueue:completionBlock:]", 5)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase unregisterExtensionWithName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase unregisterExtensionWithName:connection:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase asyncUnregisterExtensionWithName:completionBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase asyncUnregisterExtensionWithName:completionQueue:completionBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase asyncUnregisterExtensionWithName:connection:completionBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase asyncUnregisterExtensionWithName:connection:completionQueue:completionBlock:]", 4)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase registrationConnection]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase _registerExtension:withName:connection:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase _unregisterExtensionWithName:connection:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase registeredExtension:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase registeredExtensions]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase extensionsOrder]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase extensionDependencies]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase previouslyRegisteredExtensionNames]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase connectionPoolLifetime]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase connectionPoolEnqueue:main_file:wal_file:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase connectionPoolDequeue:main_file:wal_file:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase resetConnectionPoolTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase handleConnectionPoolTimerFire]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase registeredMemoryTables]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase notePendingChangeset:fromConnection:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase pendingAndCommittedChangesetsSince:until:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase noteCommittedChangeset:fromConnection:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase asyncCheckpoint:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase aggressiveTryTruncateLargeWAL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase databasePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase objectSerializer]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase objectDeserializer]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase metadataSerializer]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase metadataDeserializer]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase objectPreSanitizer]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase objectPostSanitizer]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase metadataPreSanitizer]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabase metadataPostSanitizer]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection _flushStatements]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection _flushMemoryWithFlags:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection flushMemoryWithFlags:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection didReceiveMemoryWarning:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection objectCacheEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection objectCacheLimit]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection metadataCacheEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection metadataCacheLimit]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection objectPolicy]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection metadataPolicy]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection calculateKeyCacheLimit]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection beginTransactionStatement]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection beginImmediateTransactionStatement]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection commitTransactionStatement]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection rollbackTransactionStatement]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection yapGetDataForKeyStatement]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection yapSetDataForKeyStatement]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection yapRemoveForKeyStatement]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection yapRemoveExtensionStatement]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection insertForRowidStatement]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection updateAllForRowidStatement]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection updateObjectForRowidStatement]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection updateMetadataForRowidStatement]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection removeForRowidStatement]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection removeCollectionStatement]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection removeAllStatement]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection enumerateCollectionsStatement:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection enumerateCollectionsForKeyStatement:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection enumerateKeysInCollectionStatement:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection enumerateKeysInAllCollectionsStatement:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection enumerateKeysAndMetadataInCollectionStatement:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection enumerateKeysAndMetadataInAllCollectionsStatement:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection enumerateKeysAndObjectsInCollectionStatement:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection enumerateKeysAndObjectsInAllCollectionsStatement:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection enumerateRowsInCollectionStatement:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection enumerateRowsInAllCollectionsStatement:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection readWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection readWriteWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection asyncReadWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection asyncReadWithBlock:completionBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection asyncReadWithBlock:completionQueue:completionBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection asyncReadWriteWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection asyncReadWriteWithBlock:completionBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection asyncReadWriteWithBlock:completionQueue:completionBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection flushTransactionsWithCompletionQueue:completionBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection newReadTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection newReadWriteTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection preReadTransaction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection postReadTransaction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection preReadWriteTransaction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection postReadWriteTransaction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection prePseudoReadWriteTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection postPseudoReadWriteTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection readSnapshotFromDatabase]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection incrementSnapshotInDatabase]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection markSqlLevelSharedReadLockAcquired]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection beginLongLivedReadTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection endLongLivedReadTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection enableExceptionsForImplicitlyEndingLongLivedReadTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection disableExceptionsForImplicitlyEndingLongLivedReadTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection maybeResetLongLivedReadTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection internalChangesetKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection externalChangesetKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection processChangeset:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection noteCommittedChangeset:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection hasChangeForCollection:inNotifications:includingObjectChanges:metadataChanges:]", 4)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection hasChangeForCollection:inNotifications:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection hasObjectChangeForCollection:inNotifications:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection hasMetadataChangeForCollection:inNotifications:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection hasChangeForKey:inCollection:inNotifications:includingObjectChanges:metadataChanges:]", 5)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection hasChangeForKey:inCollection:inNotifications:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection hasObjectChangeForKey:inCollection:inNotifications:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection hasMetadataChangeForKey:inCollection:inNotifications:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection hasChangeForAnyKeys:inCollection:inNotifications:includingObjectChanges:metadataChanges:]", 5)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection hasChangeForAnyKeys:inCollection:inNotifications:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection hasObjectChangeForAnyKeys:inCollection:inNotifications:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection hasMetadataChangeForAnyKeys:inCollection:inNotifications:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection didClearCollection:inNotifications:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection didClearAllCollectionsInNotifications:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection enumerateChangedKeysInCollection:inNotifications:usingBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection enumerateChangedCollectionKeysInNotifications:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection extension:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection ext:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection registerExtension:withName:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection unregisterExtensionWithName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection _unregisterExtensionWithName:transaction:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection willRegisterExtension:withName:transaction:needsClassValue:]", 4)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection didRegisterExtension:withName:transaction:needsClassValue:]", 4)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection didUnregisterExtensionWithName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection addRegisteredExtensionConnection:withName:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection removeRegisteredExtensionConnectionWithName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection pragmaSynchronous]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection pragmaAutoVacuum]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection asyncVacuumWithCompletionBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection asyncVacuumWithCompletionQueue:completionBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection backupToPath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection asyncBackupToPath:completionBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection asyncBackupToPath:completionQueue:completionBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection _backupToPath:withStep:progress:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection registeredMemoryTables]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection sqliteErrorWithCode:message:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection ydbErrorWithDescription:sqliteError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection nonMainThreadException]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection implicitlyEndingLongLivedReadTransactionException]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnection autoFlushMemoryFlags]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnectionDefaults objectCacheEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnectionDefaults objectCacheLimit]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnectionDefaults metadataCacheEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnectionDefaults metadataCacheLimit]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnectionDefaults objectPolicy]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnectionDefaults metadataPolicy]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnectionDefaults autoFlushMemoryFlags]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnectionState prepareWriteLock]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnectionState waitForWriteLock]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseConnectionState signalWriteLock]", 0)}, 0);
setTimeout(function(){hookObjC("+[YapDatabaseExtension dropTablesForRegisteredName:withTransaction:wasPersistent:]", 3)}, 0);
setTimeout(function(){hookObjC("+[YapDatabaseExtension previousClassNames]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtension supportsDatabaseWithRegisteredExtensions:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtension didRegisterExtension]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtension newConnection:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtension processChangeset:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtension noteCommittedChangeset:registeredName:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtension registeredName]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtension registeredDatabase]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionConnection newReadTransaction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionConnection newReadWriteTransaction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionConnection _flushMemoryWithFlags:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionConnection processChangeset:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionConnection noteCommittedChangeset:registeredName:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction createIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction prepareIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction flushPendingChangesToExtensionTables]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction didCommitTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction didRollbackTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction databaseTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction extensionConnection]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction handleInsertObject:forCollectionKey:withMetadata:rowid:]", 4)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction handleUpdateObject:forCollectionKey:withMetadata:rowid:]", 4)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction handleReplaceObject:forCollectionKey:withRowid:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction handleReplaceMetadata:forCollectionKey:withRowid:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction handleTouchObjectForCollectionKey:withRowid:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction handleTouchMetadataForCollectionKey:withRowid:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction handleTouchRowForCollectionKey:withRowid:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction handleRemoveObjectForCollectionKey:withRowid:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction handleRemoveObjectsForKeys:inCollection:withRowids:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction handleRemoveAllObjectsInAllCollections]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction handleWillInsertObject:forCollectionKey:withMetadata:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction handleWillUpdateObject:forCollectionKey:withMetadata:rowid:]", 4)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction handleWillReplaceObject:forCollectionKey:withRowid:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction handleWillReplaceMetadata:forCollectionKey:withRowid:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction handleWillRemoveObjectForCollectionKey:withRowid:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction handleWillRemoveObjectsForKeys:inCollection:withRowids:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction handleWillRemoveAllObjectsInAllCollections]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction boolValueForExtensionKey:persistent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction intValueForExtensionKey:persistent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction doubleValueForExtensionKey:persistent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction stringValueForExtensionKey:persistent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction dataValueForExtensionKey:persistent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseExtensionTransaction removeValueForExtensionKey:persistent:]", 2)}, 0);
setTimeout(function(){hookObjC("+[YapDatabaseManager registerDatabaseForPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[YapDatabaseManager deregisterDatabaseForPath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseOptions corruptAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseOptions pragmaSynchronous]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseOptions enableMultiProcessSupport]", 0)}, 0);
setTimeout(function(){hookObjC("+[YapDatabaseQuery queryWithString:parameters:]", 2)}, 0);
setTimeout(function(){hookObjC("+[YapDatabaseQuery queryMatchingAll]", 0)}, 0);
setTimeout(function(){hookObjC("+[YapDatabaseQuery queryWithAggregateFunction:format:]", 2)}, 0);
setTimeout(function(){hookObjC("+[YapDatabaseQuery queryWithAggregateFunction:format:arguments:]", 3)}, 0);
setTimeout(function(){hookObjC("+[YapDatabaseQuery queryWithAggregateFunction:string:parameters:]", 3)}, 0);
setTimeout(function(){hookObjC("+[YapDatabaseQuery findParamLocations:]", 1)}, 0);
setTimeout(function(){hookObjC("+[YapDatabaseQuery queryWithAggregateFunction:queryString:parameters:paramLocations:]", 4)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseQuery aggregateFunction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseQuery queryString]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseQuery queryParameters]", 0)}, 0);
setTimeout(function(){hookObjC("+[YapDatabaseSecondaryIndex dropTablesForRegisteredName:withTransaction:wasPersistent:]", 3)}, 0);
setTimeout(function(){hookObjC("+[YapDatabaseSecondaryIndex previousClassNames]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndex newConnection:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexConnection _flushStatements]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexConnection _flushMemoryWithFlags:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexConnection queryCacheEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexConnection queryCacheLimit]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexConnection newReadTransaction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexConnection newReadWriteTransaction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexConnection prepareForReadWriteTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexConnection postCommitCleanup]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexConnection postRollbackCleanup]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexConnection processChangeset:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexConnection prepareStatement:withString:caller:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexConnection insertStatement]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexConnection updateStatement]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexConnection removeStatement]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexConnection removeAllStatement]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexConnection secondaryIndex]", 0)}, 0);
setTimeout(function(){hookObjC("+[YapDatabaseSecondaryIndexHandler withKeyBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[YapDatabaseSecondaryIndexHandler withObjectBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[YapDatabaseSecondaryIndexHandler withMetadataBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[YapDatabaseSecondaryIndexHandler withRowBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[YapDatabaseSecondaryIndexHandler withOptions:keyBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("+[YapDatabaseSecondaryIndexHandler withOptions:objectBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("+[YapDatabaseSecondaryIndexHandler withOptions:metadataBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("+[YapDatabaseSecondaryIndexHandler withOptions:rowBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexHandler blockType]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexHandler blockInvokeOptions]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexOptions allowedCollections]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexSetup addColumn:withType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexSetup columnAtIndex:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexSetup columnNames]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexSetup countByEnumeratingWithState:objects:count:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexSetup matchesExistingColumnNamesAndAffinity:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction createIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction prepareIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction databaseTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction extensionConnection]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction registeredName]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction addRowid:isNew:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction removeRowid:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction removeRowids:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction removeAllRowids]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction didCommitTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction didRollbackTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction _handleChangeWithRowid:collectionKey:object:metadata:isInsert:]", 5)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction handleInsertObject:forCollectionKey:withMetadata:rowid:]", 4)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction handleUpdateObject:forCollectionKey:withMetadata:rowid:]", 4)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction handleReplaceObject:forCollectionKey:withRowid:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction handleReplaceMetadata:forCollectionKey:withRowid:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction handleTouchObjectForCollectionKey:withRowid:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction handleTouchMetadataForCollectionKey:withRowid:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction handleTouchRowForCollectionKey:withRowid:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction handleRemoveObjectForCollectionKey:withRowid:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction handleRemoveObjectsForKeys:inCollection:withRowids:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction handleRemoveAllObjectsInAllCollections]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction prepareQueryString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction bindQueryParameters:forStatement:withOffset:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction _enumerateRowidsMatchingQuery:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction enumerateKeysMatchingQuery:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction enumerateKeysAndMetadataMatchingQuery:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction enumerateKeysAndObjectsMatchingQuery:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction enumerateRowsMatchingQuery:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction enumerateIndexedValuesInColumn:matchingQuery:usingBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction performAggregateQuery:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction rowidsForKeys:inCollection:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseSecondaryIndexTransaction mutationDuringEnumerationException]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction beginTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction beginImmediateTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction preCommitReadWriteTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction commitTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction rollbackTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction numberOfCollections]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction numberOfKeysInCollection:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction numberOfKeysInAllCollections]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction allCollections]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction allKeysInCollection:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction collectionKeyForRowid:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction hasRowid:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction objectForKey:inCollection:withRowid:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction objectForCollectionKey:withRowid:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction metadataForKey:inCollection:withRowid:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction metadataForCollectionKey:withRowid:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction hasObjectForKey:inCollection:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction objectForKey:inCollection:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction metadataForKey:inCollection:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction serializedObjectForKey:inCollection:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction serializedMetadataForKey:inCollection:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction enumerateCollectionsUsingBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction enumerateCollectionsForKey:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction enumerateKeysInCollection:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction enumerateKeysInAllCollectionsUsingBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction enumerateKeysAndObjectsInCollection:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction enumerateKeysAndObjectsInCollection:usingBlock:withFilter:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction enumerateKeysAndObjectsInAllCollectionsUsingBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction enumerateKeysAndObjectsInAllCollectionsUsingBlock:withFilter:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction enumerateKeysAndMetadataInCollection:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction enumerateKeysAndMetadataInCollection:usingBlock:withFilter:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction enumerateKeysAndMetadataInAllCollectionsUsingBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction enumerateKeysAndMetadataInAllCollectionsUsingBlock:withFilter:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction enumerateRowsInCollection:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction enumerateRowsInCollection:usingBlock:withFilter:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction enumerateRowsInAllCollectionsUsingBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction enumerateRowsInAllCollectionsUsingBlock:withFilter:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction enumerateObjectsForKeys:inCollection:unorderedUsingBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction enumerateMetadataForKeys:inCollection:unorderedUsingBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction enumerateRowsForKeys:inCollection:unorderedUsingBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction _enumerateKeysInCollection:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction _enumerateKeysInCollections:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction _enumerateKeysInAllCollectionsUsingBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction _enumerateKeysAndObjectsInCollection:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction _enumerateKeysAndObjectsInCollection:usingBlock:withFilter:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction _enumerateKeysAndObjectsInCollections:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction _enumerateKeysAndObjectsInCollections:usingBlock:withFilter:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction _enumerateKeysAndObjectsInAllCollectionsUsingBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction _enumerateKeysAndObjectsInAllCollectionsUsingBlock:withFilter:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction _enumerateKeysAndMetadataInCollection:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction _enumerateKeysAndMetadataInCollection:usingBlock:withFilter:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction _enumerateKeysAndMetadataInCollections:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction _enumerateKeysAndMetadataInCollections:usingBlock:withFilter:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction _enumerateKeysAndMetadataInAllCollectionsUsingBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction _enumerateKeysAndMetadataInAllCollectionsUsingBlock:withFilter:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction _enumerateRowsInCollection:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction _enumerateRowsInCollection:usingBlock:withFilter:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction _enumerateRowsInCollections:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction _enumerateRowsInCollections:usingBlock:withFilter:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction _enumerateRowsInAllCollectionsUsingBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction _enumerateRowsInAllCollectionsUsingBlock:withFilter:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction _enumerateRowidsForKeys:inCollection:unorderedUsingBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction extension:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction ext:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction prepareExtensions]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction orderedExtensions]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction stringValueForKey:extension:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction dataValueForKey:extension:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction mutationDuringEnumerationException]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadTransaction userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadWriteTransaction replaceObject:forKey:inCollection:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadWriteTransaction replaceObject:forKey:inCollection:withSerializedObject:]", 4)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadWriteTransaction replaceObject:forKey:inCollection:withRowid:serializedObject:]", 5)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadWriteTransaction replaceMetadata:forKey:inCollection:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadWriteTransaction replaceMetadata:forKey:inCollection:withSerializedMetadata:]", 4)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadWriteTransaction replaceMetadata:forKey:inCollection:withRowid:serializedMetadata:]", 5)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadWriteTransaction touchObjectForKey:inCollection:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadWriteTransaction touchMetadataForKey:inCollection:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadWriteTransaction touchRowForKey:inCollection:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadWriteTransaction removeObjectForCollectionKey:withRowid:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadWriteTransaction removeObjectForKey:inCollection:withRowid:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadWriteTransaction removeObjectForKey:inCollection:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadWriteTransaction removeObjectsForKeys:inCollection:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadWriteTransaction removeAllObjectsInCollection:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadWriteTransaction removeAllObjectsInAllCollections]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadWriteTransaction addRegisteredExtensionTransaction:withName:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadWriteTransaction removeRegisteredExtensionTransactionWithName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadWriteTransaction removeValueForKey:extension:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadWriteTransaction removeAllValuesForExtension:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapDatabaseReadWriteTransaction yapDatabaseModifiedNotificationCustomObject]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapMemoryTable newReadTransactionWithSnapshot:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapMemoryTable newReadWriteTransactionWithSnapshot:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapMemoryTable asyncCheckpoint:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapMemoryTable asyncRollback:withChanges:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YapMemoryTableTransaction objectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapMemoryTableTransaction enumerateKeysWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapMemoryTableTransaction enumerateKeysAndObjectsWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapMemoryTableTransaction removeObjectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapMemoryTableTransaction removeObjectsForKeys:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapMemoryTableTransaction removeAllObjects]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapMemoryTableTransaction accessWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapMemoryTableTransaction modifyWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapMutationStack_Abstract pop:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapMutationStack_Bool markAsMutated]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapMutationStack_Set markAsMutated:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapProxyObject realObject]", 0)}, 0);
setTimeout(function(){hookObjC("-[YapProxyObject resetWithRealObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapProxyObject resetWithRowid:collectionKey:isMetadata:transaction:]", 4)}, 0);
setTimeout(function(){hookObjC("-[YapProxyObject forwardInvocation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapProxyObject methodSignatureForSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapSet containsObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapSet intersectsSet:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapSet enumerateObjectsUsingBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YapSet countByEnumeratingWithState:objects:count:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YODExchangeIcon layoutSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODInputTextField textField:shouldChangeCharactersInRange:replacementString:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YODInputTextField canBecomeFirstResponder]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODInputTextField becomeFirstResponder]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODInputTextField resignFirstResponder]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODInputTextField placeholderText]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODInputTextField attributedPlaceholder]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODInputTextField keyboardType]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODInputTextField autoShowClear]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODInputTextField secureTextEntry]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODInputTextField textDidChangedBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODInputTextField textDidEnterBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODInputTextField textField]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerify addConfigure:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerify fetchConfiguration]", 0)}, 0);
setTimeout(function(){hookObjC("+[YODRiskVerify libVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerify finishedBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerify errorBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerify cancelBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerify requestCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerify verifyService]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyScrollDragEvent milliSecondsSinceLoaded]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyBehaviorCollector beginDrag]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyBehaviorCollector dragTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyBehaviorCollector dragAtPoint:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyBehaviorCollector userBehaviorEncryptedStringWithKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyBehaviorCollector originOnScreen]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyBehaviorCollector dragCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyBehaviorCollector dragArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyBehaviorCollector dragEventArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyConfigure verifyTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyConfigure naviBarTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyConfigure naviBarShadowImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[YODRiskVerifyDispatch dispatchVerifyModuleWithProvider:andPresentVCIfNeeded:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyPictureCaptcha refreshCaptchaImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyPictureCaptcha textFieldShouldReturn:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyPictureCaptcha requestCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyPictureCaptcha finishedBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyPictureCaptcha errorBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyPictureCaptcha cancelBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyPictureCaptcha verifyService]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyPictureCaptcha captchaTextField]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyProvider requestCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyProvider finishedBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyProvider errorBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyProvider cancelBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyProvider verifyType]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyProvider nextVerifyType]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyProvider verifyService]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyProvider listIndex]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyProvider validityTypes]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyProvider originVerifyTypes]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyProvider dataResponse]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyProvider relationshipVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyScrollCaptcha riskVerify]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyScrollCaptcha verifyFinished:responseCode:requestCode:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyScrollCaptcha didDrag:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyScrollCaptcha requestCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyScrollCaptcha finishedBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyScrollCaptcha errorBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyScrollCaptcha cancelBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyScrollCaptcha verifyService]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyScrollCaptcha panGesture]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyScrollCaptcha scrollSlider]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyService fetchVerifyTypeWithRequestCode:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyService verifyScrollCaptchaWithRequestCode:behavior:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyService verifyPictureCaptchaWithRequestCode:captchaCode:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyService fetchPictureCaptchaWithRequestCode:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyService fetchPageDataWithRequestCode:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyService fetchVerifyInfoWithRequestCode:type:mobile:listIndex:finished:]", 5)}, 0);
setTimeout(function(){hookObjC("-[YODRiskVerifyService verifyWithRequestCode:type:behavior:listIndex:otherParams:finished:]", 6)}, 0);
setTimeout(function(){hookObjC("+[YODRiskVerifyUtils valiMobile:]", 1)}, 0);
setTimeout(function(){hookObjC("+[YODRiskVerifyUtils verifyTypeMap]", 0)}, 0);
setTimeout(function(){hookObjC("+[YODVerifyDataResponse praseVerifyType:]", 1)}, 0);
setTimeout(function(){hookObjC("+[YODVerifyDataResponse checkValidityWithTypes:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YODVerifyDataResponse responseCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODVerifyDataResponse promptMobile]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODVerifyDataResponse autoSend]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODVerifyDataResponse nextVerifyMethodId]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODVerifyDataResponse riskLevel]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODVerifyDataResponse validRiskLevel]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODVerifyErrorResponse commonErrorModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODVerifyErrorResponse errorCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODVerifyErrorResponse errorMessage]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODVerifyErrorResponse requestCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODVerifyResponse verifySucceed]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODVerifyResponse dataResponse]", 0)}, 0);
setTimeout(function(){hookObjC("-[YODVerifyResponse errorResponse]", 0)}, 0);
setTimeout(function(){hookObjC("+[YODVerifyStatistics yoda_statisticsMGEWithType:cid:bid:val_lab:]", 4)}, 0);
setTimeout(function(){hookObjC("+[YODVerifyStatistics yoda_statisticsPageDisappearWithCid:val_lab:]", 2)}, 0);
setTimeout(function(){hookObjC("+[QWApplication sharedApplication]", 0)}, 0);
setTimeout(function(){hookObjC("-[QWApplication urlSchemePrefix]", 0)}, 0);
setTimeout(function(){hookObjC("-[QWApplication dictionaryWithAllValues]", 0)}, 0);
setTimeout(function(){hookObjC("-[QWApplication urlScheme]", 0)}, 0);
setTimeout(function(){hookObjC("-[QWApplication sdkVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[QWApplication appId]", 0)}, 0);
setTimeout(function(){hookObjC("-[QWMessage dictionaryWithAllValues]", 0)}, 0);
setTimeout(function(){hookObjC("-[QWServerPayTask start:]", 1)}, 0);
setTimeout(function(){hookObjC("-[QWTask valueForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[QWTask dictionaryWithAllValues]", 0)}, 0);
setTimeout(function(){hookObjC("-[QWTask start:]", 1)}, 0);
setTimeout(function(){hookObjC("-[QWTask startWithParams:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[QWTask completionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("+[QWURLEncodeEngine encodeWithAction:params:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[QWURLEncodeEngine decodeWithInfo:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[APURLConnectionOperation networkRequestThreadEntryPoint:]", 1)}, 0);
setTimeout(function(){hookObjC("+[APURLConnectionOperation networkRequestThread]", 0)}, 0);
setTimeout(function(){hookObjC("+[APURLConnectionOperation pinnedCertificates]", 0)}, 0);
setTimeout(function(){hookObjC("+[APURLConnectionOperation pinnedPublicKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation inputStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation outputStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation responseString]", 0)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation responseStringEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation operationDidStart]", 0)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation cancelConnection]", 0)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation connection:willSendRequestForAuthenticationChallenge:]", 2)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation connectionShouldUseCredentialStorage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation connection:needNewBodyStream:]", 2)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation connection:willSendRequest:redirectResponse:]", 3)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:]", 4)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation connection:didReceiveResponse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation connection:didReceiveData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation connectionDidFinishLoading:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation connection:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation connection:willCacheResponse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation runLoopModes]", 0)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation allowsInvalidSSLCertificate]", 0)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation responseData]", 0)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation totalBytesRead]", 0)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation SSLPinningMode]", 0)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation shouldUseCredentialStorage]", 0)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation backgroundTaskIdentifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation uploadProgress]", 0)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation downloadProgress]", 0)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation authenticationChallenge]", 0)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation cacheResponse]", 0)}, 0);
setTimeout(function(){hookObjC("-[APURLConnectionOperation redirectResponse]", 0)}, 0);
setTimeout(function(){hookObjC("-[APayH5WapViewToolbar refresh:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APayH5WapViewToolbar layoutSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("-[APayH5WapViewToolbar refreshBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor processOrder:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor processAuthInfo:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor processGenTid:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor processGetConfigInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor processLog:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor procBizReqInfo:reqType:callback:]", 3)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor callbackWithReqType:result:]", 2)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor procLogReqInfo:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor reqDataWithBizDict:actDict:zipType:info:newApiVer:]", 5)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor reqDataWithLogDict:zipType:info:]", 3)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor reqDataWithProto:andParam:andZipType:info:]", 4)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor netUtilDic:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor mainActionDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor infoActionDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor gentidActionDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor enCryptGzipData:zipType:info:]", 3)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor deCryptGzipData:zipType:info:isLogReq:]", 4)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor gzipCompressWithData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor gzipDecompressWithData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor processRepData:zipType:infoData:isLogReq:]", 4)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor analyseJSCommand:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor processJSCommand:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor routeBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor tidrouteBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[APayProcessor inforouteBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[APHTTPRequestOperation responseStringEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[APHTTPRequestOperation hasAcceptableStatusCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[APHTTPRequestOperation hasAcceptableContentType]", 0)}, 0);
setTimeout(function(){hookObjC("+[APHTTPRequestOperation acceptableStatusCodes]", 0)}, 0);
setTimeout(function(){hookObjC("+[APHTTPRequestOperation addAcceptableStatusCodes:]", 1)}, 0);
setTimeout(function(){hookObjC("+[APHTTPRequestOperation acceptableContentTypes]", 0)}, 0);
setTimeout(function(){hookObjC("+[APHTTPRequestOperation addAcceptableContentTypes:]", 1)}, 0);
setTimeout(function(){hookObjC("+[APHTTPRequestOperation canProcessRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APHTTPRequestOperation HTTPError]", 0)}, 0);
setTimeout(function(){hookObjC("-[APHTTPRequestOperation successCallbackQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[APHTTPRequestOperation failureCallbackQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[MQPErrorTrack errorType]", 0)}, 0);
setTimeout(function(){hookObjC("-[MQPErrorTrack errorCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[MQPErrorTrack errorDetail]", 0)}, 0);
setTimeout(function(){hookObjC("+[APKKeychainBindings sharedKeychainBindings]", 0)}, 0);
setTimeout(function(){hookObjC("-[APKKeychainBindings objectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APKKeychainBindings removeObjectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APKKeychainBindings stringForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APayRoute callWithInfo:scheme:andConfig:externInfo:result:]", 5)}, 0);
setTimeout(function(){hookObjC("-[APayRoute callAlipay]", 0)}, 0);
setTimeout(function(){hookObjC("-[APayRoute callSafepay]", 0)}, 0);
setTimeout(function(){hookObjC("-[APayRoute callAuth_v2]", 0)}, 0);
setTimeout(function(){hookObjC("-[APayRoute callWithNativeScheme:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APayRoute saveMerchantScreen]", 0)}, 0);
setTimeout(function(){hookObjC("-[APayRoute saveMerchantScreen:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APayRoute callWithWapUrl:andParams:]", 2)}, 0);
setTimeout(function(){hookObjC("-[APayRoute downloadAppWithScheme:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APayRoute authWithInfo:ofType:externInfo:result:]", 4)}, 0);
setTimeout(function(){hookObjC("-[APayRoute authByPortalWithInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APayRoute authByWapWithInfo:ofUrl:]", 2)}, 0);
setTimeout(function(){hookObjC("-[APayRoute infoStr]", 0)}, 0);
setTimeout(function(){hookObjC("-[APayRoute schemeStr]", 0)}, 0);
setTimeout(function(){hookObjC("-[APayRoute resultBlock]", 0)}, 0);
setTimeout(function(){hookObjC("+[APNetwork defaultClient]", 0)}, 0);
setTimeout(function(){hookObjC("-[APNetwork postWithUrl:headerDict:paramData:success:failure:]", 5)}, 0);
setTimeout(function(){hookObjC("-[APNetwork requestWithUrl:headerDict:paramData:]", 3)}, 0);
setTimeout(function(){hookObjC("-[APNetwork operationQueue]", 0)}, 0);
setTimeout(function(){hookObjC("+[MQPCrashHandler beginTrack]", 0)}, 0);
setTimeout(function(){hookObjC("+[MQPCrashHandler stopTrack]", 0)}, 0);
setTimeout(function(){hookObjC("-[MQPTrackManager transactionWillStart:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MQPTrackManager transactionDidFinish]", 0)}, 0);
setTimeout(function(){hookObjC("-[MQPTrackManager onTrackBizError:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MQPTrackManager onTrackCraError:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MQPTrackManager onTrackNetError:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MQPTrackManager onErrorTrack:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MQPTrackManager uploadLogAll]", 0)}, 0);
setTimeout(function(){hookObjC("-[MQPTrackManager uploadLogFile:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MQPTrackManager uploadTrack:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MQPTrackManager removeUploadedFiles:succ:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MQPTrackManager storeToLocal]", 0)}, 0);
setTimeout(function(){hookObjC("-[MQPTrackManager removeLogFile:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MQPTrackManager currentLog]", 0)}, 0);
setTimeout(function(){hookObjC("-[MQPTrackManager uploadTasks]", 0)}, 0);
setTimeout(function(){hookObjC("+[APSecurity sharedSecurity]", 0)}, 0);
setTimeout(function(){hookObjC("-[APSecurity encryptData:withInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[APSecurity decryptData:withInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[APSecurity publicKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[APSecurity savePublicKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MQPTrackUtil readTrackFromFile:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MQPTrackUtil writeTrackIntoFile:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MQPTrackUtil safeString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MQPTrackUtil trackCachePath]", 0)}, 0);
setTimeout(function(){hookObjC("+[MQPTrackUtil pathWithFileName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APJSONRequestOperation responseJSON]", 0)}, 0);
setTimeout(function(){hookObjC("+[APJSONRequestOperation acceptableContentTypes]", 0)}, 0);
setTimeout(function(){hookObjC("+[APJSONRequestOperation canProcessRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AidRequester postRest:token:utdid:oldAid:]", 4)}, 0);
setTimeout(function(){hookObjC("+[AidRequester postUrl:token:utdid:oldAid:]", 4)}, 0);
setTimeout(function(){hookObjC("-[AidRequester connection:didReceiveData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[AidRequester connection:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[AidManager value:token:utdid:]", 3)}, 0);
setTimeout(function(){hookObjC("+[AidStorage aidValue:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AidStorage cleanAid:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSNetworkCoordinator updateStaticInfo:withArgs:withModel:]", 3)}, 0);
setTimeout(function(){hookObjC("+[ASSNetworkCoordinator generateStaticRequest:withArgs:withModel:]", 3)}, 0);
setTimeout(function(){hookObjC("+[ASSNetworkCoordinator saveApplistCmd:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSNetworkCoordinator generateFirstApplistCmdRequest:withModel:]", 2)}, 0);
setTimeout(function(){hookObjC("+[ASSNetworkCoordinator generateSecondApplistCmdRequest:withModel:withScanResult:]", 3)}, 0);
setTimeout(function(){hookObjC("+[TSCENTERDeviceDataReportRequest dataMapElementClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[TSCENTERDeviceDataReportRequest pubApdid]", 0)}, 0);
setTimeout(function(){hookObjC("-[TSCENTERDeviceDataReportRequest priApdid]", 0)}, 0);
setTimeout(function(){hookObjC("-[TSCENTERDeviceDataReportRequest umidToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[TSCENTERDeviceDataReportRequest dataMap]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSStaticInfoCollector generateStaticInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ASSStaticInfoCollector updateUserID:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ASSStaticInfoCollector updateIC4:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ASSStaticInfoCollector updateDynamicInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSStaticInfoCollector collectAllStaticData]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSStaticInfoCollector generateDeviceInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ASSStaticInfoCollector generateEnvironmentInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSStaticInfoCollector generateApplicationInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSStaticInfoCollector generateCustomInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ASSStaticInfoCollector generateHashForSensors]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSStaticInfoCollector verifyStringNotNil:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ASSStaticInfoCollector checkJB]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSStaticInfoCollector reportJBError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ASSStaticInfoCollector environmentInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSStaticInfoCollector deviceInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSStaticInfoCollector appInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSStaticInfoCollector customInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSStaticInfoCollector dynamicInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[TSCENTERDeviceDataReportService reportStaticData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ASSRPCUpdater sendStaticRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ASSRPCUpdater sendFirstApplistCmdRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ASSRPCUpdater sendSecondApplistCmdRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSSecurityGTMBase64 encodeData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSSecurityGTMBase64 decodeData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSSecurityGTMBase64 encodeBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[ASSSecurityGTMBase64 decodeBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[ASSSecurityGTMBase64 stringByEncodingData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSSecurityGTMBase64 stringByEncodingBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[ASSSecurityGTMBase64 decodeString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSSecurityGTMBase64 webSafeEncodeData:padded:]", 2)}, 0);
setTimeout(function(){hookObjC("+[ASSSecurityGTMBase64 webSafeDecodeData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSSecurityGTMBase64 webSafeEncodeBytes:length:padded:]", 3)}, 0);
setTimeout(function(){hookObjC("+[ASSSecurityGTMBase64 webSafeDecodeBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[ASSSecurityGTMBase64 stringByWebSafeEncodingData:padded:]", 2)}, 0);
setTimeout(function(){hookObjC("+[ASSSecurityGTMBase64 stringByWebSafeEncodingBytes:length:padded:]", 3)}, 0);
setTimeout(function(){hookObjC("+[ASSSecurityGTMBase64 webSafeDecodeString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSSecurityGTMBase64 baseEncode:length:charset:padded:]", 4)}, 0);
setTimeout(function(){hookObjC("+[ASSSecurityGTMBase64 baseDecode:length:charset:requirePadding:]", 4)}, 0);
setTimeout(function(){hookObjC("+[ASSSecurityGTMBase64 baseEncode:srcLen:destBytes:destLen:charset:padded:]", 6)}, 0);
setTimeout(function(){hookObjC("+[ASSSecurityGTMBase64 baseDecode:srcLen:destBytes:destLen:charset:requirePadding:]", 6)}, 0);
setTimeout(function(){hookObjC("+[ASSSecureSdk saveTrustData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSSecureSdk loadTrustData]", 0)}, 0);
setTimeout(function(){hookObjC("-[TSCENTERBugTrackMessageService logCollect:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSSettingAccesser updateSettingModel:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSSettingAccesser verifyVersionUpdated:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSCommon useURLWhitelist]", 0)}, 0);
setTimeout(function(){hookObjC("+[ASSStorageAccesser saveStorageModel:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSStorageAccesser loadStorageModelFromKeychain]", 0)}, 0);
setTimeout(function(){hookObjC("+[ASSStorageAccesser clearStorage]", 0)}, 0);
setTimeout(function(){hookObjC("+[ASSStorageAccesser loadPreviousApdid]", 0)}, 0);
setTimeout(function(){hookObjC("+[ASSStorageAccesser saveApdidc:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSStorageAccesser loadApdidc]", 0)}, 0);
setTimeout(function(){hookObjC("+[ASSStorageAccesser saveTrustData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSStorageAccesser loadTrustData]", 0)}, 0);
setTimeout(function(){hookObjC("+[ASSStorageAccesser saveGID:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSStorageAccesser loadGID]", 0)}, 0);
setTimeout(function(){hookObjC("+[ASSStorageAccesser saveJBErrorHistory:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSStorageAccesser loadJBErrorHistory]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSTokenResult umidToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSTokenResult vkeyidToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSTokenResult clientKey]", 0)}, 0);
setTimeout(function(){hookObjC("+[ASSPerformanceLog startTimer]", 0)}, 0);
setTimeout(function(){hookObjC("+[ASSPerformanceLog endTimer:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSDemoHelper presentStringOnDemo:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSDemoHelper presentStringOnDemo:withDetail:]", 2)}, 0);
setTimeout(function(){hookObjC("+[ASSDemoHelper presentErrorOnDemo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ASSInputArgument envMode]", 0)}, 0);
setTimeout(function(){hookObjC("+[ASSSecurityManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSSecurityManager saveTrustData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ASSSecurityManager loadTrustData]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSSecurityManager checkDate]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSSecurityManager verifyNetworkResult:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ASSSecurityManager checkIfTodayFirst]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSSecurityManager updateApdidAndToken:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ASSSecurityManager resetCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSSecurityManager asyncTaskQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSSecurityManager modelCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSSecurityManager prevApdid]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSSecurityManager randomIC4]", 0)}, 0);
setTimeout(function(){hookObjC("+[ASSCommonUtils stringFromSortedDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSCommonUtils sha1FromString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSCommonUtils md5FromString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSCommonUtils encryptWithAESandBASE64:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSCommonUtils decryptStringWithBASE64andAES:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSCommonUtils gzipAndBase64String:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSCommonUtils encodeBase64Data:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSCommonUtils gzipData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSCommonUtils formatDataForServer:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSCommonUtils encodeBase64:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TSCENTERDeviceDataReportResult vkeySwitch]", 0)}, 0);
setTimeout(function(){hookObjC("-[TSCENTERDeviceDataReportResult bugTrackSwitch]", 0)}, 0);
setTimeout(function(){hookObjC("-[TSCENTERDeviceDataReportResult appListVer]", 0)}, 0);
setTimeout(function(){hookObjC("-[TSCENTERBaseResult resultCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSLogUpdater updateLog:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ASSLogger sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSLogger limitedLengthString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ASSLogger addLogWithMessage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ASSLogger internal_addLog:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ASSLogger addLogWithMessage:withFileName:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ASSLogger generateMessage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ASSLogger uploadLog]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSLogger uploadLogCertified]", 0)}, 0);
setTimeout(function(){hookObjC("-[ASSLogger loggerInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[DTRpcUtils errorWithCode:reason:description:]", 3)}, 0);
setTimeout(function(){hookObjC("-[DTRpcConfigManager configForScope:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DTRpcConfigManager preferredConfig:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DTRpcConfigManager globalConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTRpcConfigManager operationTypeConfigs]", 0)}, 0);
setTimeout(function(){hookObjC("+[DTRpcAsyncCaller callAsyncBlock:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[DTRpcAsyncCaller startAsyncBlock:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[DTRpcAsyncCaller beforeCompleteAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTRpcAsyncCaller afterCompleteAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTRpcAsyncCaller handleException:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DTRpcAsyncCaller asyncThread]", 0)}, 0);
setTimeout(function(){hookObjC("+[APHTTPCookieStorage sharedHTTPCookieStorage]", 0)}, 0);
setTimeout(function(){hookObjC("-[APHTTPCookieStorage deleteCookie:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APHTTPCookieStorage deleteAllCookies]", 0)}, 0);
setTimeout(function(){hookObjC("-[APHTTPCookieStorage indexOfCookie:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APHTTPCookieStorage cookiesForURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APHTTPCookieStorage httpCookieHeaderStrForUrl:]", 1)}, 0);
setTimeout(function(){hookObjC("-[APHTTPCookieStorage tryToAddCookie:ToArray:]", 2)}, 0);
setTimeout(function(){hookObjC("-[DTJsonEncoder encodeArray:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DTJsonEncoder encodeDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DTJsonEncoder encodeObject:ofClass:recusive:]", 3)}, 0);
setTimeout(function(){hookObjC("-[DTJsonEncoder encodeObject:]", 1)}, 0);
setTimeout(function(){hookObjC("+[DTJsonEncoder normalizePropertyName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DTRpcMethod operationType]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTRpcMethod resultClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTRpcMethod returnType]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTRpcMethod elementClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTRpcOperation buildRequestDataWithMethod:params:]", 2)}, 0);
setTimeout(function(){hookObjC("-[DTRpcOperation didStart]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTRpcOperation didFinish]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTRpcOperation resultObject]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTRpcOperation userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[DTURLCache sharedCache]", 0)}, 0);
setTimeout(function(){hookObjC("+[DTURLCache diskPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTURLCache cachedResponseForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DTURLCache storeCachedResponse:forRequest:]", 2)}, 0);
setTimeout(function(){hookObjC("+[DTURLCache synthesisRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DTRpcBaseOperation responseJSON]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTRpcBaseOperation resultJSON]", 0)}, 0);
setTimeout(function(){hookObjC("+[APHTTPCookie cookiesWithResponseHeaderFields:forURL:]", 2)}, 0);
setTimeout(function(){hookObjC("-[APHTTPCookie expiresDate]", 0)}, 0);
setTimeout(function(){hookObjC("-[APHTTPCookie requestHeaderField]", 0)}, 0);
setTimeout(function(){hookObjC("+[DTRpcException exceptionWithName:reason:userInfo:code:]", 4)}, 0);
setTimeout(function(){hookObjC("+[DTRpcException raise:message:]", 2)}, 0);
setTimeout(function(){hookObjC("+[DTRpcException raise:message:userInfo:]", 3)}, 0);
setTimeout(function(){hookObjC("+[DTGZipUtil compressGZip:]", 1)}, 0);
setTimeout(function(){hookObjC("+[DTRpcClient defaultClient]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTRpcClient addInterceptor:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DTRpcClient executeMethodAsync:params:completionBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[DTRpcClient executeMethod:params:]", 2)}, 0);
setTimeout(function(){hookObjC("-[DTRpcClient executeOperation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DTRpcClient cancelAllOperationsInThread:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DTRpcClient configForScope:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DTRpcClient preferredConfig:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DTRpcClient preferredConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTRpcClient requestQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTRpcClient configManager]", 0)}, 0);
setTimeout(function(){hookObjC("+[DTJsonHelper elementClassForContainer:ofObject:]", 2)}, 0);
setTimeout(function(){hookObjC("+[DTJsonHelper typeStringForProperty:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DTRpcConfig gatewayURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTRpcConfig networkActivityIndicatorVisible]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTRpcConfig requestGZip]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTRpcConfig operationType]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTRpcConfig userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[DTMD5Util MD5StringFromString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[DTMD5Util MD5StringFromData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DTNumber encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DTNumber charValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTNumber unsignedCharValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTNumber shortValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTNumber unsignedShortValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTNumber intValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTNumber unsignedIntValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTNumber longValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTNumber unsignedLongValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTNumber longLongValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTNumber unsignedLongLongValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTNumber floatValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTNumber doubleValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTNumber boolValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTNumber integerValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTNumber unsignedIntegerValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTNumber stringValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTNumber compare:]", 1)}, 0);
setTimeout(function(){hookObjC("+[DTBoolean booleanWithObject:]", 1)}, 0);
setTimeout(function(){hookObjC("+[DTByte byteWithObject:]", 1)}, 0);
setTimeout(function(){hookObjC("+[DTCharacter characterWithObject:]", 1)}, 0);
setTimeout(function(){hookObjC("+[DTDouble doubleWithObject:]", 1)}, 0);
setTimeout(function(){hookObjC("+[DTFloat floatWithObject:]", 1)}, 0);
setTimeout(function(){hookObjC("+[DTInteger integerWithObject:]", 1)}, 0);
setTimeout(function(){hookObjC("+[DTLong longWithObject:]", 1)}, 0);
setTimeout(function(){hookObjC("+[DTShort shortWithObject:]", 1)}, 0);
setTimeout(function(){hookObjC("+[APHTTPCookieUtils cookiesFromString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[APHTTPCookieUtils cookieFromString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[DTURLRequestOperation defaultOperationQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTURLRequestOperation commonInit]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTURLRequestOperation responseString]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTURLRequestOperation responseObject]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTURLRequestOperation didStart]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTURLRequestOperation didFinish]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTURLRequestOperation startConnection]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTURLRequestOperation cancelConnection]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTURLRequestOperation runningThread]", 0)}, 0);
setTimeout(function(){hookObjC("+[DTURLRequestOperation URLRequestThreadProc:]", 1)}, 0);
setTimeout(function(){hookObjC("+[DTURLRequestOperation URLRequestThread]", 0)}, 0);
setTimeout(function(){hookObjC("+[DTURLRequestOperation keyPathFromState:]", 1)}, 0);
setTimeout(function(){hookObjC("+[DTURLRequestOperation stateTransitionIsValid:toState:cancelled:]", 3)}, 0);
setTimeout(function(){hookObjC("-[DTURLRequestOperation connection:didReceiveResponse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[DTURLRequestOperation connection:didReceiveData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[DTURLRequestOperation connectionDidFinishLoading:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DTURLRequestOperation connection:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[DTURLRequestOperation responseData]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTURLRequestOperation inputStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTURLRequestOperation outputStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTURLRequestOperation runLoopModes]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTURLRequestOperation totalBytesRead]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTURLRequestOperation createdThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTURLRequestOperation networkActivityIndicatorVisible]", 0)}, 0);
setTimeout(function(){hookObjC("-[DTURLRequestOperation requestBodyGZip]", 0)}, 0);
setTimeout(function(){hookObjC("+[internal_DeviceInfo carrierName]", 0)}, 0);
setTimeout(function(){hookObjC("+[internal_DeviceInfo screenResolution]", 0)}, 0);
setTimeout(function(){hookObjC("+[internal_DeviceInfo internal_getAdvIdDisabled]", 0)}, 0);
setTimeout(function(){hookObjC("+[internal_DeviceInfo validateTarget:andSel:]", 2)}, 0);
setTimeout(function(){hookObjC("+[PLCrashSignalHandler sharedHandler]", 0)}, 0);
setTimeout(function(){hookObjC("+[PLCrashSignalHandler resetHandlers]", 0)}, 0);
setTimeout(function(){hookObjC("-[PLCrashSignalHandler registerHandlerWithSignal:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PLCrashSignalHandler registerHandlerForSignal:callback:context:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[PLCrashMachExceptionServer serverThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[PLCrashMachExceptionServer exceptionPortWithMask:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[PLCrashProcessInfo currentProcessInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[PLCrashProcessInfo processID]", 0)}, 0);
setTimeout(function(){hookObjC("-[PLCrashProcessInfo processName]", 0)}, 0);
setTimeout(function(){hookObjC("-[PLCrashProcessInfo parentProcessID]", 0)}, 0);
setTimeout(function(){hookObjC("+[PLCrashHostInfo currentHostInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[PLCrashHostInfo darwinVersion]", 0)}, 0);
setTimeout(function(){hookObjC("+[PLCrashMachExceptionPort exceptionPortsForTask:mask:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[PLCrashMachExceptionPort exceptionPortsForThread:mask:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PLCrashMachExceptionPort registerForTask:previousPortSet:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PLCrashMachExceptionPort registerForThread:previousPortSet:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PLCrashMachExceptionPort server_port]", 0)}, 0);
setTimeout(function(){hookObjC("-[PLCrashMachExceptionPortSet countByEnumeratingWithState:objects:count:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PLCrashMachExceptionPortSet asyncSafeRepresentation]", 0)}, 0);
setTimeout(function(){hookObjC("+[TcApiTool calcFrameByOrientation:id:]", 2)}, 0);
setTimeout(function(){hookObjC("+[TcApiTool MoveAllWindowOutOfScreen:animation:]", 2)}, 0);
setTimeout(function(){hookObjC("+[TcApiTool MoveAllWindowIntoScreen:animation:]", 2)}, 0);
setTimeout(function(){hookObjC("+[TcApiTool GetURLWithParam:withParam:]", 2)}, 0);
setTimeout(function(){hookObjC("+[TcApiTool SDKInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[TcApiTool TCOSDKdeviceMachine:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TcApiTool decodeAccessToken:key:]", 2)}, 0);
setTimeout(function(){hookObjC("+[TcApiTool random16Str]", 0)}, 0);
setTimeout(function(){hookObjC("+[TcApiTool systemVersion]", 0)}, 0);
setTimeout(function(){hookObjC("+[TcApiTool systemVersionString]", 0)}, 0);
setTimeout(function(){hookObjC("+[TcApiTool md5:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ConfigManager GetInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[ConfigManager loadLocalConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[ConfigManager saveLocalConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[ConfigManager updateConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[ConfigManager requestConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[ConfigManager deleteAPIRequestBySeq:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ConfigManager requestConfigResponse:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TXAppidConvert InitWithAppId:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TXAppidConvert GetConnectionAppId]", 0)}, 0);
setTimeout(function(){hookObjC("-[TXAppidConvert GetMQQAppId]", 0)}, 0);
setTimeout(function(){hookObjC("+[GetMessageFromQQResp respWithContent:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SendMessageToQQReq reqWithContent:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SendMessageToQQResp respWithResult:errorDescription:extendInfo:]", 3)}, 0);
setTimeout(function(){hookObjC("+[ShowMessageFromQQReq reqWithContent:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ShowMessageFromQQResp respWithResult:errorDescription:]", 2)}, 0);
