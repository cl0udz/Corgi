
var resolver = new ApiResolver('objc');

function onEnterFunc(args, argNum, infoArray){
    // infoArray = [ argNum, args[1], args[2], ... , args[argNum + 1], args[0], retval, funcname ]
    infoArray[0] = argNum;

    /*try {
        tmp = new ObjC.Object(args[0]);
        infoArray[argNum + 2] = tmp.toString();
    } catch(error){
        try { 
            infoArray[argNum + 2] = strFilter(Memory.readCString(args[0], 128).toString());
        } catch(err) {
            infoArray[argNum + 2] = args[0].toString();
        }
    }*/

    for(var i=1; i<argNum+2; ++i) {
        infoArray[i] = 'arg';
        /*try {
            tmp = new ObjC.Object(args[i]);
            infoArray[i] = tmp.toString();
        } catch(error){
            try { 
                infoArray[i] = strFilter(Memory.readCString(args[i], 128).toString());
            } catch(err) {
                infoArray[i] = args[i].toString();
            }
        }*/
    }

    return;
}

function onLeaveFunc(retval, argNum, infoArray){

    infoArray[argNum + 3] = 'retval';
    /*try {
        tmp = new ObjC.Object(retval);
        infoArray[argNum + 3] = tmp.toString();
    } catch(error){
        try { 
            infoArray[argNum + 3] = strFilter(Memory.readCString(retval, 128).toString());
        } catch(err) {
            infoArray[argNum + 3] = retval.toString();
        }
    }*/

    return;
}

function strFilter(str) {
    for(var i=0; i<str.length; ++i){
        if(str.charCodeAt(i) >= 32 && str.charCodeAt(i) <= 127)
            { }
        else
            return str.substring(0, i);
    }
    return str;
}

function hookObjC(FuncName, ArgNum){
    resolver.enumerateMatches(FuncName, {
        onMatch: function (match) {
                    // infoArray = [ argNum, args[1], args[2], ... , args[argNum + 1], args[0], retval, funcname ]
                    var infoArray = new Array(ArgNum + 4);
                    infoArray[ArgNum + 4] = match.name;
                    //send(match.name);

                    Interceptor.attach(match.address, {
                    onEnter: function(args){
                        //send(match.name);
                        onEnterFunc(args, ArgNum, infoArray);
                    },
                    onLeave: function(retval){
                        onLeaveFunc(retval, ArgNum, infoArray);
                        send(infoArray);
                    }
                    })
                },
        onComplete: function () {
                }
    }); 
}

setTimeout(function(){hookObjC("-[BDSocialProgressHUD handleGraceTimer:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSocialProgressHUD didMoveToSuperview]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialProgressHUD animationFinished:finished:context:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDSocialProgressHUD launchExecution]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialProgressHUD updateIndicators]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialProgressHUD layoutSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialProgressHUD registerForKVO]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialProgressHUD unregisterFromKVO]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialProgressHUD observableKeypaths]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialProgressHUD observeValueForKeyPath:ofObject:change:context:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDSocialProgressHUD registerForNotifications]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialProgressHUD unregisterFromNotifications]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialProgressHUD deviceOrientationDidChange:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSocialProgressHUD animationType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialProgressHUD xOffset]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialProgressHUD yOffset]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialProgressHUD dimBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialProgressHUD graceTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialProgressHUD taskInProgress]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialProgressHUD labelText]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialProgressHUD completionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[Barcode charToInt:]", 1)}, 0);
setTimeout(function(){hookObjC("-[Barcode compute:withType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[Barcode addQuietZone:]", 1)}, 0);
setTimeout(function(){hookObjC("-[Barcode digitToBmpRenderer:]", 1)}, 0);
setTimeout(function(){hookObjC("-[Barcode oneDimBarcode]", 0)}, 0);
setTimeout(function(){hookObjC("-[Barcode qRBarcode]", 0)}, 0);
setTimeout(function(){hookObjC("-[Barcode oneDimCode]", 0)}, 0);
setTimeout(function(){hookObjC("+[GenBarcodes genBarcode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[GenBarcodes genQRCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[QMSafeMutableArray objectAtIndex:]", 1)}, 0);
setTimeout(function(){hookObjC("-[QMSafeMutableArray insertObject:atIndex:]", 2)}, 0);
setTimeout(function(){hookObjC("-[QMSafeMutableArray removeObjectAtIndex:]", 1)}, 0);
setTimeout(function(){hookObjC("-[QMSafeMutableArray addObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[QMSafeMutableArray removeLastObject]", 0)}, 0);
setTimeout(function(){hookObjC("-[QMSafeMutableArray replaceObjectAtIndex:withObject:]", 2)}, 0);
setTimeout(function(){hookObjC("-[QMSafeMutableArray removeAllObjects]", 0)}, 0);
setTimeout(function(){hookObjC("-[QMSafeMutableArray indexOfObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSocialPageControl onTapped:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSocialPageControl pageControlStyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialPageControl currentPage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialPageControl numberOfPages]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialPageControl _numberOfPages]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialPageControl _currentPage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialPageControl hidesForSinglePage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialPageControl _pageControlStyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialPageControl thumbImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSocialPageControl selectedThumbImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIControlPlugin finish:]", 1)}, 0);
setTimeout(function(){hookObjC("-[QMSafeMutableDictionary objectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[QMSafeMutableDictionary keyEnumerator]", 0)}, 0);
setTimeout(function(){hookObjC("-[QMSafeMutableDictionary removeObjectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[QMSafeMutableDictionary removeAllObjects]", 0)}, 0);
setTimeout(function(){hookObjC("+[MMApiRegister shareInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[MMApiRegister startMTA:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MMApiRegister DidEnterBackground:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MMApiRegister buildAppDictionary:oldAppDictionary:]", 2)}, 0);
setTimeout(function(){hookObjC("+[MMApiRegister registerApp:andAppSupportContentFlag:]", 2)}, 0);
setTimeout(function(){hookObjC("+[MMApiRegister registerApp:withDescription:andAppSupportContentFlag:]", 3)}, 0);
setTimeout(function(){hookObjC("+[MTAWX startWithAppkey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MTAWX onBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaseReq openID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaseResp errCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaseResp errStr]", 0)}, 0);
setTimeout(function(){hookObjC("-[SendMessageToWXReq bText]", 0)}, 0);
setTimeout(function(){hookObjC("-[PayReq nonceStr]", 0)}, 0);
setTimeout(function(){hookObjC("-[PayReq partnerId]", 0)}, 0);
setTimeout(function(){hookObjC("-[PayReq prepayId]", 0)}, 0);
setTimeout(function(){hookObjC("-[PayResp returnKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[HBReq nonceStr]", 0)}, 0);
setTimeout(function(){hookObjC("-[GetMessageFromWXResp bText]", 0)}, 0);
setTimeout(function(){hookObjC("-[JumpToBizProfileReq extMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[JumpToBizProfileReq profileType]", 0)}, 0);
setTimeout(function(){hookObjC("-[JumpToBizWebviewReq webType]", 0)}, 0);
setTimeout(function(){hookObjC("-[JumpToBizWebviewReq extMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[CreateChatRoomReq groupId]", 0)}, 0);
setTimeout(function(){hookObjC("-[CreateChatRoomReq chatRoomName]", 0)}, 0);
setTimeout(function(){hookObjC("-[CreateChatRoomReq extMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[CreateChatRoomReq chatRoomNickName]", 0)}, 0);
setTimeout(function(){hookObjC("-[CreateChatRoomResp extMsg]", 0)}, 0);
setTimeout(function(){hookObjC("+[BankcardAdaptor sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BankcardAdaptor canWork]", 0)}, 0);
setTimeout(function(){hookObjC("-[BankcardAdaptor check:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BankcardAdaptor runBankcardProcess:andCurrentVersion:givenBankcardImage:andNumberOfThreads:andDispLargeImage:]", 5)}, 0);
setTimeout(function(){hookObjC("-[BankcardAdaptor runBankcardProcess:andNumberOfThreads:andDispLargeImage:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BankcardAdaptor releaseBankcardMemory]", 0)}, 0);
setTimeout(function(){hookObjC("-[BankcardAdaptor lineStart]", 0)}, 0);
setTimeout(function(){hookObjC("-[BankcardAdaptor lineEnd]", 0)}, 0);
setTimeout(function(){hookObjC("-[BankcardAdaptor cardNumberLength]", 0)}, 0);
setTimeout(function(){hookObjC("-[BankcardAdaptor blankFlagArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BankcardAdaptor cardNumberArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BankcardAdaptor cardNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[BankcardAdaptor dtcFstRect]", 0)}, 0);
setTimeout(function(){hookObjC("-[BankcardAdaptor dstRGBImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[IdcardQualityAdaptor canWork]", 0)}, 0);
setTimeout(function(){hookObjC("-[IdcardQualityAdaptor process:width:height:channel:cardType:]", 5)}, 0);
setTimeout(function(){hookObjC("-[IdcardQualityAdaptor processIsMoving:width:height:channel:cardType:]", 5)}, 0);
setTimeout(function(){hookObjC("-[IdcardQualityAdaptor processWithoutIsMoving:width:height:channel:cardType:]", 5)}, 0);
setTimeout(function(){hookObjC("-[IdcardQualityAdaptor releaseIdcardQuality]", 0)}, 0);
setTimeout(function(){hookObjC("-[UFOEngine requestWithCmd:cmd:info:]", 3)}, 0);
setTimeout(function(){hookObjC("+[UFOUserDefaults integerForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[UFOUserDefaults editFeedbackWord]", 0)}, 0);
setTimeout(function(){hookObjC("+[UFOUserDefaults editFeedbackPicture]", 0)}, 0);
setTimeout(function(){hookObjC("+[UFOUserDefaults myFeedback]", 0)}, 0);
setTimeout(function(){hookObjC("+[UFOUserDefaults clearAllFeedbackBehavior]", 0)}, 0);
setTimeout(function(){hookObjC("-[UFOInterface ufoInitAppInfo:version:userID:face:source:referer:baiduCuid:extraString:isTranslucent:]", 9)}, 0);
setTimeout(function(){hookObjC("-[UFOInterface uploadBehaviorData]", 0)}, 0);
setTimeout(function(){hookObjC("-[UFOInterface ufoGetFeedbackListController]", 0)}, 0);
setTimeout(function(){hookObjC("-[UFOInterface updateUserFaceUrl:]", 1)}, 0);
setTimeout(function(){hookObjC("-[UFOInterface selectCurrentImage:]", 1)}, 0);
setTimeout(function(){hookObjC("+[UFOInterface enableCollectLogInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[UFOInterface logcatInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[UFOInterface openOfflineDebug:]", 1)}, 0);
setTimeout(function(){hookObjC("-[UFOInterface removeFeedbackCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[UFOInterface clearImageCaches]", 0)}, 0);
setTimeout(function(){hookObjC("+[UFOReachability reachabilityWithHostName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[UFOReachability reachabilityWithAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("+[UFOReachability reachabilityForInternetConnection]", 0)}, 0);
setTimeout(function(){hookObjC("-[UFOReachability startNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[UFOReachability stopNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[UFOReachability networkStatusForFlags:]", 1)}, 0);
setTimeout(function(){hookObjC("-[UFOReachability connectionRequired]", 0)}, 0);
setTimeout(function(){hookObjC("-[UFOReachability currentReachabilityStatus]", 0)}, 0);
setTimeout(function(){hookObjC("+[UFOUtils print:andInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("+[UFOUtils encodeToPercentEscapeString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[UFOUtils decodeFromPercentEscapeString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[UFOUtils scaleImage:toScale:]", 2)}, 0);
setTimeout(function(){hookObjC("+[UFOUtils clearImageCaches]", 0)}, 0);
setTimeout(function(){hookObjC("+[UFOUtils checkImageCachesSpace]", 0)}, 0);
setTimeout(function(){hookObjC("+[UFOUtils updateFileModificationDate:]", 1)}, 0);
setTimeout(function(){hookObjC("+[UFOUtils removeFile:]", 1)}, 0);
setTimeout(function(){hookObjC("+[UFOUtils sendBehaviorDataForSync:]", 1)}, 0);
setTimeout(function(){hookObjC("-[UFOWaitingViewContrller animationOfUnlimitedRotation]", 0)}, 0);
setTimeout(function(){hookObjC("-[UFOWaitingViewContrller stopTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[UFOWaitingViewContrller stopWating]", 0)}, 0);
setTimeout(function(){hookObjC("-[UFOCheckNewFeedback requestHasNewFeedback:]", 1)}, 0);
setTimeout(function(){hookObjC("-[UFOCheckNewFeedback requestNewFeedback]", 0)}, 0);
setTimeout(function(){hookObjC("-[UFOCheckNewFeedback connection:didReceiveResponse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[UFOCheckNewFeedback connection:didReceiveData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[UFOCheckNewFeedback connectionDidFinishLoading:]", 1)}, 0);
setTimeout(function(){hookObjC("+[RIMSecurityKeyboardConfig numberPadFrame]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMSecurityKeyboardConfig numberPadBackgroundImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMSecurityKeyboardConfig accessoryFrame]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMSecurityKeyboardConfig accessoryLogoFrameWithAccessoryFrame:]", 1)}, 0);
setTimeout(function(){hookObjC("+[RIMSecurityKeyboardConfig accessoryIconFirstImge]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMSecurityKeyboardConfig accessoryIconSecondImge]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMSecurityKeyboardConfig accessoryTitleFrameWithAccessoryFrame:]", 1)}, 0);
setTimeout(function(){hookObjC("+[RIMSecurityKeyboardConfig accessoryArrFrameWithAccessoryFrame:]", 1)}, 0);
setTimeout(function(){hookObjC("+[RIMSecurityKeyboardConfig accessoryArrImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMSecurityKeyboardConfig accessoryTitleName]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMFPSettingUtil checkDeviceFingerprintContext]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMFPSettingUtil fingerprintInfoIsExist:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDRIMFPSettingUtil closeFingerPayIsExist]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMFPSettingUtil verify:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDRIMFPSettingUtil openFingerprintPay:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDRIMFPSettingUtil closeFingerprintPay:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDRIMURLSessionTaskData restData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMURLSessionTaskData appendData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMURLSessionTaskData originURLReqest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMURLSessionTaskData httpRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestSerializer __commonInit]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestSerializer observeValueForKeyPath:ofObject:change:context:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestSerializer requestWithData:requestMethod:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestSerializer shouldAuthentication]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestSerializer HTTPMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestSerializer cachePolicy]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestSerializer HTTPShouldUsePipelining]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestSerializer networkServiceType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestSerializer timeoutInterval]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestSerializer serializerBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestSerializer allowCompressedResponse]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMConstAppearance sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMConstAppearance separateWeight]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMBaseRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMBaseRequest requestType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMBaseRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMBaseRequest addCommonParamters]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMBaseRequest wcpEncoded]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMBaseRequest fetchSystemInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDFSGRIMEncrypt fsgRimDecrypt:isRandom:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDFSGRIMEncrypt fsgRimGetPW]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDFSGRIMEncrypt fsgRimEncrypt:isRandom:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDFSGRIMEncrypt fsgRimEncrypt:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDFSGRIMEncrypt fsgRimDecrypt:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDFSGRIMEncrypt fsgRimLocalDecrypt:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDFSGRIMEncrypt fsgRimLocalEncrypt:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDFSGRIMEncrypt fsgRimMD5:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDFSGRIMEncrypt bdfsgRimSha1:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDFSGRIMEncrypt fsgRimCapitalString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDFSGRIMEncrypt bdfsgRimSha1AndAderHex:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDFSGRIMEncrypt bdfsgRimMd5AndAderHex:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDFSGRIMEncrypt bdfsgRimNoncesign:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDFSGRIMEncrypt bdfsgRimGetIDLToken:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDFSGRIMEncrypt bdfsgRimGetXOR]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDFSGRIMEncrypt bdfsgRimGetXORImage:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDFSGRIMEncrypt bdfsgRimGetXORImageData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDRIMMemoryCacheManager shareManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMMemoryCacheManager rimAppID]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMSSKeychain passwordForService:account:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDRIMSSKeychain passwordForService:account:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BDRIMSSKeychain deletePasswordForService:account:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDRIMSSKeychain deletePasswordForService:account:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BDRIMSSKeychain allAccounts]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMSSKeychain accountsForService:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDRIMSSKeychain accessibilityType]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeyboardNumberPadWithEnterKey updateFrame]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMGetIPAddress BDRIM_IPAdressFromDomain:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDRIMGetIPAddress BDRIM_GetIPAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDRIMGetIPAddress BDRIM_GetIPAddressv4]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMGetIPAddress BDRIM_GetIPAddresses]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMGetIPAddress whatismyipdotcom:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDRIMGetIPAddress localWiFiIPAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMLBSCheckRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMLBSCheckRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMLBSCheckRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMFPStatusInfo fingerprintStatus]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMSystemInfo shareSystemInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo stringInBase64FromData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo app_version]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMSystemInfo macAddressMD5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo loadData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo updateCurrentNetPoint]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo detailNetPoint]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo diskCapacity]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo startNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo stopNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo networkChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo cuid_pass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo service_line]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo FP]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo createAndUpdateFp]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo stopUpdatingLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo deviceMachine]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo locationManager:didUpdateLocations:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo locationManager:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo updateConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo termType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo netPoint]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo displayName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo bundleId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo livenessConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo ocrConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo locationManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo netWork]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo reachabilityRef]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo reachabilitySerialQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSystemInfo reachabilityObject]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMTrackerEvent makeWithDic:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerEvent uploadContent]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerEvent addEventValue:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerEvent addEventValues:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerEvent eventKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerEvent eventValues]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerEvent eventLinkedWay]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerEvent increId]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerEvent customVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[TestUpFileRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMHTTPSessionManager shareClient]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPSessionManager cacheTask:data:forSEQ:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPSessionManager taskForSEQ:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPSessionManager taskDataForTask:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPSessionManager seqForTask:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPSessionManager removeTaskForSEQ:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPSessionManager removeTask:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPSessionManager performRequest:withFinishBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPSessionManager performRequest:progress:withFinishBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPSessionManager URLSession:dataTask:didReceiveData:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPSessionManager URLSession:task:didCompleteWithError:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPSessionManager URLSession:task:didReceiveChallenge:completionHandler:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPSessionManager URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:]", 5)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPSessionManager cancelRequestWithID:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPSessionManager cancelAllRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPSessionManager sessionTaskQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPSessionManager buildDataQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMUploadRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMUploadRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMUploadRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMUploadRequest pathURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMUploadRequest fileName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMUploadRequest mimeType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMUploadRequest headerParamters]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMUploadRequest progressPer]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeyboardNumberPad layoutSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeyboardNumberPad updateFrame]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeyboardNumberPad addNotificationsObservers]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeyboardNumberPad textDidBeginEditing:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeyboardNumberPad textDidEndEditing:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeyboardNumberPad changeText:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeyboardNumberPad longPressGestureRecognizerAction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeyboardNumberPad selectedRange:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeyboardNumberPad exchangeRandWithUpdateFrame:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeyboardNumberPad numberButtons]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeyboardNumberPad digitType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest requestType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest __baseCommonInit]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest buildURLRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest buildParamters]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest willStart]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest addCommonParamters]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest onReviveErrorResponse:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest onReciveRespone:data:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest onError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest __notifyError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest notifyError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest onSuccess:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest __notifySuccess:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest notifySuccess:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest generateaNonceSign:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest checkResult:reqid:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest requestID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest httpURLResponse]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest httpURLError]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest addDefaultParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest requestData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest preventingTampering]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest requestSerializer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest responseSerializer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest responseData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest finishBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest progressBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest configureBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequest reqBusinessID]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMPublic deviceMachine]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField customTextField]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField needShowSecurityKeyboard]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField becomeFirstResponder]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField resignFirstResponder]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField canBecomeFirstResponder]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField canPerformAction:withSender:]", 2)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField placeholderRectForBounds:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField accessoryResignFirstResponder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField plainText]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField changeKeyBoardType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField dicToProperty:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField textRectForBounds:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField editingRectForBounds:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField observeValueForKeyPath:ofObject:change:context:]", 4)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField placeHolderInsets]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField forbidSecurityKeyboard]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField confirmBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField bText]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField bHolder]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField bRadius]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField bBorderRadius]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField waringBorder]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField numberPad]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField textFieldMenuVisible]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSecurityKeboardTextField numberPadType]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMFPAuthenticator checkTouchIDContext]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMFPAuthenticator verify:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDRIMNetEnv shareEnv]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMNetEnv networChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMNetEnv currentNetStatus]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMTracker defaultTracker]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMTracker defaultTrackerWithVersion:customChannel:]", 2)}, 0);
setTimeout(function(){hookObjC("+[RIMTracker addEventByEventName:eventValues:immediately:]", 3)}, 0);
setTimeout(function(){hookObjC("-[RIMTracker addEventByEventName:eventValues:immediately:]", 3)}, 0);
setTimeout(function(){hookObjC("+[RIMTracker eventStartWithName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[RIMTracker eventEndWithName:eventValues:immediately:]", 3)}, 0);
setTimeout(function(){hookObjC("-[RIMTracker eventStartWithName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMTracker eventEndWithName:eventValues:immediately:]", 3)}, 0);
setTimeout(function(){hookObjC("+[RIMTracker pageEventWithName:tag:]", 2)}, 0);
setTimeout(function(){hookObjC("-[RIMTracker eventQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTracker customVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTracker customChannel]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerManager headerDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerManager currentUploadContentByEvents:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerManager currentSyncFileContentByEvents:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerManager syncMemeDataToFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerManager syncFileDataToMem]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerManager triggerUploadData]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerManager triggerUploadDataByEvents:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerManager needUploadTrackerDataByEvents:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerManager generatAutoIncrentId]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerManager eventsArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerManager trackerQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerManager systemInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerManager customHeaderDic]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMNetConfig startConfig]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMNetConfig curEnv]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMNetConfig registerDefaultsFromSettingsBundle]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerRequest requestType]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMCreateAndUpdateFPRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMCreateAndUpdateFPRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMCreateAndUpdateFPRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMCreateAndUpdateFPRequest changeSign]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerSystemInfo generateUA]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerSystemInfo qureyCarrierCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerSystemInfo cuidPass]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerSystemInfo checkIsWifiNewWork]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerSystemInfo netPoint]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerSystemInfo osName]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerSystemInfo osVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerSystemInfo deviceModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerSystemInfo appVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerSystemInfo SDKVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerSystemInfo carrierCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerSystemInfo netWork]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerSystemInfo systemInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerFileCache hasCachedForFileName:ext:]", 2)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerFileCache readFileDataFromCacheForFileName:ext:withFinshiedBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerFileCache writeFileToCacheWithFileData:fileName:ext:withFinshiedBlock:]", 4)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerFileCache writingFilePathForName:withExt:]", 2)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerFileCache fileNameForName:withExt:]", 2)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerFileCache cachedFilePathForName:withExt:]", 2)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerFileCache cachePathForFileCachedName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerFileCache createPathIfNecessary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerFileCache removeSpecifiedFileForName:ext:]", 2)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerFileCache cachePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMTrackerFileCache ioQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRiskTokenRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRiskTokenRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRiskTokenRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMReachability reachabilityWithHostName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDRIMReachability reachabilityWithHostname:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDRIMReachability reachabilityWithAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDRIMReachability reachabilityForInternetConnection]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMReachability reachabilityForLocalWiFi]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMReachability startNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMReachability stopNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMReachability connectionRequired]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMReachability currentReachabilityStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMReachability reachabilityFlags]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMReachability currentReachabilityString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMReachability currentReachabilityFlags]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMReachability reachabilityChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMReachability reachableBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMReachability unreachableBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMReachability reachableOnWWAN]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMReachability reachabilityRef]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMReachability reachabilitySerialQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMReachability reachabilityObject]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMClassIvarInfo typeEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMClassMethodInfo typeEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMClassMethodInfo returnTypeEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMClassMethodInfo argumentTypeEncodings]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMClassPropertyInfo typeEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMClassPropertyInfo ivarName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMClassInfo _update]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMClassInfo classInfoWithClass:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDRIMClassInfo classInfoWithClassName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMClassInfo superCls]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMClassInfo metaCls]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMClassInfo superClassInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMClassInfo ivarInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMClassInfo methodInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMClassInfo propertyInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestData loadDefaultHTTPHeaders]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestData __dataCommonInit]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestData URIMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestData allParamters]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestData multiDataStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestData existMultiDataStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestData appendPartWithFileURL:name:fileName:mimeType:headerParamters:error:]", 6)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestData appendPartWithFileData:name:fileName:mimeType:headerParamters:error:]", 6)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestData paramterForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestData removeHTTPHeaderForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestData BDRIMn_errorWithCode:message:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestData stringEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestData serverURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRequestData httpHeaders]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSDKAppearance statusBarStyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSDKAppearance oldStatusBarStyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSDKAppearance bdRIMNavBackNormalImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSDKAppearance bdRIMNavBackHighlightImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSDKAppearance bdRIMNavBgImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSDKAppearance bdRIMNavGobackTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSDKAppearance bdRIMNavBacktitleEdgeInset]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSDKAppearance bdRIMNavBackimageEdgeInset]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMSDKAppearance negativeSpace]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressHUD handleGraceTimer:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressHUD animationFinished:finished:context:]", 3)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressHUD launchExecution]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressHUD updateIndicators]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressHUD layoutSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressHUD registerForKVO]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressHUD unregisterFromKVO]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressHUD observableKeypaths]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressHUD observeValueForKeyPath:ofObject:change:context:]", 4)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressHUD registerForNotifications]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressHUD unregisterFromNotifications]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressHUD deviceOrientationDidChange:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressHUD animationType]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressHUD labelText]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressHUD xOffset]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressHUD yOffset]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressHUD dimBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressHUD taskInProgress]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressHUD graceTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressIndicator updateDots:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressIndicator dotCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressIndicator dotViews]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressIndicator dotColors]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMResponseSerializer __responseCommonInit]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMResponseSerializer decodeWithWithResponse:data:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDRIMResponseSerializer serializerBlocks]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMLittleProgressHUD addSubLayers]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMLittleProgressHUD addTextLayer]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMLittleProgressHUD addIndicatorLayer]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMLittleProgressHUD indicatorLayer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRisklistSearchRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRisklistSearchRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMRisklistSearchRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMNetworkClient shareNetworkClient]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMNetworkClient postWithRequest:progress:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDRIMNetworkClient cancelRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMNetworkClient cancelAllRequests]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMChannelConfig shareConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMChannelConfig sdkVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMChannelConfig sdkChannel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSSKeychainQuery save:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSSKeychainQuery deleteItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSSKeychainQuery fetchAll:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSSKeychainQuery fetch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSSKeychainQuery passwordObject]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDRIMSSKeychainQuery errorWithCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSSKeychainQuery passwordData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSSKeychainQuery accessGroup]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMSSKeychainQuery synchronizationMode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPMultiDataStream hasData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPMultiDataStream appendBodyPart:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPMultiDataStream hasBytesAvailable]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPMultiDataStream propertyForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPMultiDataStream scheduleInRunLoop:forMode:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPMultiDataStream removeFromRunLoop:forMode:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPMultiDataStream contentLength]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPMultiDataStream _scheduleInCFRunLoop:forMode:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPMultiDataStream _unscheduleFromCFRunLoop:forMode:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPMultiDataStream _setCFClientFlags:callback:context:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPMultiDataStream streamStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPMultiDataStream streamError]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPMultiDataStream stringEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPBodyPart commonInit]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPBodyPart hasBytesAvailable]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPBodyPart stringForHeaders]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPBodyPart headersData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPBodyPart encapsulationBoundaryData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPBodyPart finalBoundaryData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPBodyPart contentLength]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPBodyPart transitionToNextStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPBodyPart streamError]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPBodyPart stringEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPBodyPart hasInitialBoundary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMHTTPBodyPart hasFinalBoundary]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMOCRIDCardLogic sharedLogic]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMOCRIDCardLogic pushOCRIDCardControllerWithParams:resultBlock:withRootVC:]", 3)}, 0);
setTimeout(function(){hookObjC("-[RIMOCRIDCardLogic detectIDCardWithCardSide:images:callback:]", 3)}, 0);
setTimeout(function(){hookObjC("-[RIMOCRIDCardLogic cancelDetectIDCardRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMOCRIDCardLogic uploadIDCardWithFrontImage:backImage:callback:]", 3)}, 0);
setTimeout(function(){hookObjC("-[RIMOCRIDCardLogic checkIdcardInfoWith:ocrContent:editContent:callback:]", 4)}, 0);
setTimeout(function(){hookObjC("-[RIMOCRIDCardLogic OCRScanIDCardCancel]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMOCRIDCardLogic OCRScanIDCardSuccessed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMOCRIDCardLogic toEditWithInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMOCRIDCardLogic uploadIDCardSuccess:frontImage:backImage:]", 3)}, 0);
setTimeout(function(){hookObjC("-[RIMOCRIDCardLogic editIdCardInfoComplete:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMOCRIDCardLogic finishBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMOCRIDCardLogic decryptResponse:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMOCRIDCardLogic rootVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMOCRIDCardLogic rootOutVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMOCRIDCardLogic publicParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMOCRIDCardLogic needCompleteImg]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMOCRIDCardLogic noEdit]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMOCRIDCardLogic finishBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMOCRIDCardLogic detectRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMUploadDetectRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMUploadDetectRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMUploadDetectRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMUploadDetectRequest transferImage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMUploadDetectRequest id_card_side]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMUploadDetectRequest front_image]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMUploadDetectRequest back_image]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMUploadDetectRequest img_source]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMDetectIDCardRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMDetectIDCardRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMDetectIDCardRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMDetectIDCardRequest id_card_side]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMDetectIDCardRequest img_source]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMIdcardInfoCheckRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMIdcardInfoCheckRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMIdcardInfoCheckRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMIdcardInfoCheckRequest transferDicToString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMIdcardInfoCheckRequest transferImage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDRIMIdcardInfoCheckRequest ocr_content]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMIdcardInfoCheckRequest edit_content]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMIdcardInfoCheckRequest front_image]", 0)}, 0);
setTimeout(function(){hookObjC("+[BarcodeAdaptor sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BarcodeAdaptor canWork]", 0)}, 0);
setTimeout(function(){hookObjC("-[BarcodeAdaptor readBarcode:ROIRect:barcodeConf:maxsize:barcodeResult:num:]", 6)}, 0);
setTimeout(function(){hookObjC("-[BarcodeAdaptor releaseBarcode:num:]", 2)}, 0);
setTimeout(function(){hookObjC("+[RIMBiometricDeviceHelper deviceModel]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMBiometricDeviceHelper systemVersion]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMBiometricError errorWithCode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[RIMBiometricError errorMsgWithCode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[RIMBiometricError prettyNetworkErrorWithSourceError:]", 1)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogVideoQuestion questionWithDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogVideoQuestion callbackKey]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogVideoReviewInfo infoWithDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogVideoReviewInfo reviewResult]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMProgressHUD cancelHandler]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAdapter sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogAdapter checkConfiguration]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogAdapter presentWithVC:argument:handler:]", 3)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogAdapter pushWithVC:argument:handler:]", 3)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogAdapter biometricType]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogAdapter sharedRemoteConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMFaceRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMFaceRequest requestType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMFaceRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMFaceRequest fileData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMFaceRequest fileName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDRIMFaceRequest mimeType]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMBiometricHandler callbackCancel]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMBiometricHandler callbackFailureWithBeforePageFlag:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogArgument processId]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogArgument generateProcessId]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogArgument argumentWithDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogArgument queryStringToDic:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogArgument commonInit]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogArgument spParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogArgument transParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogArgument recogType]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogArgument idCardName]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogArgument idCardNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogArgument bankMobile]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogArgument authToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogArgument serviceType]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogArgument customTextForRecogFailed]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogArgument singleSubPro]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogArgument zidDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogArgument reqTimes]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogError errorWithCode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogError errorMsgWithCode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceHTTPService sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceHTTPService releaseInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService postWithURL:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService postWithURL:parameters:cookies:success:failure:]", 5)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService postWithURL:parameters:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService postWithURL:parameters:cookies:completion:]", 4)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService postFileWithURL:fileData:mimeType:parameters:success:failure:]", 6)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService postFileWithURL:fileData:mimeType:parameters:progress:success:failure:]", 7)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService postWithURL:parameters:cookies:retryTimes:success:failure:]", 6)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService postWithURL:parameters:cookies:retryTimes:onCompletion:]", 5)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService postFileWithURL:fileData:mimeType:parameters:retryTimes:progress:success:failure:]", 8)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService postFileWithURL:fileData:mimeType:parameters:retryTimes:success:failure:]", 7)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService handlePostResponse:data:error:success:failure:]", 5)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService handlePostResponse:data:error:completion:]", 4)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService handleGetResponse:data:error:success:failure:]", 5)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService handleGetResponse:data:error:completion:]", 4)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService URLByReplaceHostForURL:retryTimes:]", 2)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService executeRequest:onCompletion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService executeUploadWithRequest:progress:onCompletion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService requestWithURL:parameters:method:]", 3)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService requestWithURL:parameters:cookies:method:]", 4)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService requestForUploadFileWithURL:fileData:mimeType:params:retryingNumberOfTimes:]", 5)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService generateaNonceSign:]", 1)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceHTTPService wcpEncoded]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceHTTPService fetchSystemInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService addCommonParamters]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService signParameters:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService genSig:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService dataEncodedWithDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService stringEncodedWithDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:]", 5)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService URLSession:task:didCompleteWithError:]", 3)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService URLSession:didReceiveChallenge:completionHandler:]", 3)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService httpServiceConfiguration]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService acceptableStatusCodes]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService httpSession]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService httpUploadSession]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService uploadQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPService taskProgressHandlerKeyedByTaskHash]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceServiceConfiguration defaultRetryIPArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceServiceConfiguration defaultConfiguration]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceServiceConfiguration configurationWithSignKey:customUserAgent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceServiceConfiguration allowsRetry]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceServiceConfiguration allowsIPRetry]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceServiceConfiguration retryTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceServiceConfiguration retryIPArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceServiceConfiguration signKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceServiceConfiguration customUserAgent]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceServiceConfiguration userAgentWithSdkName:sdkVersion:]", 2)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceServiceConfiguration userAgentWithAppName:appVersion:sdkName:sdkVersion:]", 4)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogResult resultWithDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogResult toDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogResult toDictionaryNotRetCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogResult credentialKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogResult contrastSucceed]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogResult forceSwitch]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogResult forceRecordVideo]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogResult videoUploaded]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogResult origFaceImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMBiometricService sendLogWithName:parameters:]", 2)}, 0);
setTimeout(function(){hookObjC("+[RIMBiometricService interfaceUserAgent]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMBiometricService appendBasicParameters:]", 1)}, 0);
setTimeout(function(){hookObjC("+[RIMBiometricService appendArgumentParameters:argument:]", 2)}, 0);
setTimeout(function(){hookObjC("+[RIMBiometricManager adapterForType:]", 1)}, 0);
setTimeout(function(){hookObjC("+[RIMBiometricConfiguration configurationWithTpl:appKey:appid:environment:sapiCuid:]", 5)}, 0);
setTimeout(function(){hookObjC("-[RIMBiometricConfiguration appKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMBiometricConfiguration faceAPIKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMBiometricConfiguration faceLicensePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMBiometricConfiguration voiceProductID]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMBiometricConfiguration voiceServiceURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMBiometricConfiguration enableAutoClosePage]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMBiometricConfiguration sapiCuid]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMBiometricResult toDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMBiometricResult errNo]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMBiometricResult userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceHTTPManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceHTTPManager releaseInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPManager postWithURL:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPManager postWithURL:parameters:cookies:success:failure:]", 5)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPManager postWithURL:parameters:cookies:retryTimes:success:failure:]", 6)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPManager postFileWithURL:fileData:mimeType:parameters:progress:success:failure:]", 7)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPManager postFileWithURL:fileData:mimeType:parameters:retryTimes:progress:success:failure:]", 8)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPManager requestForUploadFileWithURL:fileData:mimeType:params:retryingNumberOfTimes:]", 5)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPManager requestWithURL:parameters:cookies:method:]", 4)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPManager URLByReplaceHostForURL:retryTimes:]", 2)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPManager dataEncodedWithDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPManager stringEncodedWithDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceHTTPManager httpServiceConfiguration]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogURLHelper passportURLStringWithPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogURLHelper asyncGetPortraitURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogURLHelper contrastFaceImageURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogURLHelper uploadFaceVideoURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogURLHelper queryVideoReviewURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogURLHelper sendEvent]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogURLHelper asyncFaceDetectURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogURLHelper sendFaceOrigImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogURLHelper speechSignGetPortraitURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogURLHelper speechSignFaceMatchURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogURLHelper speechSignAudiovideOuploadURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogRemoteConfiguration shareIntance]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogRemoteConfiguration remoteConfigInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogRemoteConfiguration firstLiveActionCheckTimeoutInterval]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogRemoteConfiguration firstLiveAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogRemoteConfiguration switchRecordVideo]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogRemoteConfiguration recordVideoSubproList]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogRemoteConfiguration illumThr]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogRemoteConfiguration trackInterval]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogRemoteConfiguration detectInterval]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogRemoteConfiguration cropFaceRatio]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogRemoteConfiguration uploadImageCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogRemoteConfiguration reportType]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogRemoteConfiguration customSPConfig]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogService shareInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogService appendFaceRecogParams:argument:]", 2)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogService asyncGetPortraitWithArgument:successHandler:failureHandler:]", 3)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogService contrastFaceWithArgument:data:imageDigest:isLiveness:successHandler:failureHandler:]", 6)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogService uploadFaceVideoWithArgument:data:questionCallbackKey:livenessCallbackKey:progress:successHandler:failureHandler:]", 7)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogService queryVideoReviewWithArgument:successHandler:failureHandler:]", 3)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogService interfaceUserAgent]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogService appendBasicParameters:]", 1)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogService appendArgumentParameters:argument:]", 2)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogService speechGetPortraitWithArgument:successHandler:failureHandler:]", 3)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogService speechContrastFaceWithArgument:data:imageDigest:isLiveness:successHandler:failureHandler:]", 6)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogService transferImage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogService sendFaceRecogLogWithErrorCode:argument:otherParams:]", 3)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogService sendFaceLogWithArgument:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RIMFaceRecogService uploadFaceWithArgument:image:]", 2)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils imageWithName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils cancelImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils nosoundImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils soundImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils faceBeginImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils faceReadyImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils faceGridImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils faceRecognizedImage1]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils faceRecognizedImage2]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils faceRecognizedImage3]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils faceRecognizedImage4]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils scanFaceImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils scanFaceMaskImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils warningIconImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils number1Image]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils number2Image]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils number3Image]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils guideBackImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils successImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils templateFaceImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils shieldLoadingInnerImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils shieldLoadingOuterImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils shieldImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils faceLittleBallImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils faceVerticalLineImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils faceHorizontalLineImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils faceCloseImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils faceCompleteRecordVideoImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils faceRerecordVideoImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils faceWomanImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils uploadCancelImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils uploadCancelPressImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils uploadSureImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils uploadSurePressImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils putFaceAudio]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils blinkAudio]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils mouthAudio]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils faceTooCloseTipsAudio]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils faceTooFarTipsAudio]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils nodAudio]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils foundFaceAudio]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils recogizingFaceAudio]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils scanFaceAudio]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils audioWithName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils speechPutInFaceAudio]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils speechFaceTooCloseTipsAudio]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils speechFaceTooFarTipsAudio]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils speechArgumentAudio]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMFaceRecogAssetUtils audioWithName:extension:]", 2)}, 0);
setTimeout(function(){hookObjC("+[RIMBiometricManager defaultManager]", 0)}, 0);
setTimeout(function(){hookObjC("+[RIMBiometricManager checkConfiguration:]", 1)}, 0);
setTimeout(function(){hookObjC("+[RIMBiometricHandler handlerWithEnableAutoClosePage:success:failure:]", 3)}, 0);
setTimeout(function(){hookObjC("-[RIMBiometricHandler enableAutoClosePage]", 0)}, 0);
setTimeout(function(){hookObjC("+[BPushOpenUDID _setDict:forPasteboard:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BPushOpenUDID _getDictFromPasteboard:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPushOpenUDID _generateFreshOpenUDID]", 0)}, 0);
setTimeout(function(){hookObjC("+[BPushOpenUDID valueWithError:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPushRSA stripPublicKeyHeader:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPushRSA stripPrivateKeyHeader:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPushRSA addPublicKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPushRSA addPrivateKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPushRSA encryptData:withKeyRef:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BPushRSA encryptString:privateKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BPushRSA encryptData:privateKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BPushRSA decryptData:withKeyRef:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BPushRSA decryptString:privateKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BPushRSA decryptData:privateKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BPushRSA encryptString:publicKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BPushRSA encryptData:publicKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BPushRSA decryptString:publicKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BPushRSA decryptData:publicKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BPushUncaughtExceptionHandler sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[BPushUncaughtExceptionHandler delaySetExceptionHandler]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushUncaughtExceptionHandler saveException:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BPushUncaughtExceptionHandler filePathForTs:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BPushUncaughtExceptionHandler crashLogDirectoryPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushUncaughtExceptionHandler crashLogFromBPush]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushUncaughtExceptionHandler shouldReport]", 0)}, 0);
setTimeout(function(){hookObjC("+[BPushReachability reachabilityWithHostName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPushReachability reachabilityWithAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPushReachability reachabilityForInternetConnection]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushReachability startNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushReachability stopNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushReachability networkStatusForFlags:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BPushReachability connectionRequired]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushReachability currentReachabilityStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushConfigManager configKeyForType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BPushConfigManager clearConfigCacheFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushSettingManager clearSettingCacheFile]", 0)}, 0);
setTimeout(function(){hookObjC("+[BPushBase64 encodeData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPushBase64 decodeData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPushBase64 encodeBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BPushBase64 decodeBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BPushBase64 stringByEncodingData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPushBase64 stringByEncodingBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BPushBase64 decodeString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPushBase64 webSafeEncodeData:padded:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BPushBase64 webSafeDecodeData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPushBase64 webSafeEncodeBytes:length:padded:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BPushBase64 webSafeDecodeBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BPushBase64 stringByWebSafeEncodingData:padded:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BPushBase64 stringByWebSafeEncodingBytes:length:padded:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BPushBase64 webSafeDecodeString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPushBase64 baseEncode:length:charset:padded:]", 4)}, 0);
setTimeout(function(){hookObjC("+[BPushBase64 baseDecode:length:charset:requirePadding:]", 4)}, 0);
setTimeout(function(){hookObjC("+[BPushBase64 baseEncode:srcLen:destBytes:destLen:charset:padded:]", 6)}, 0);
setTimeout(function(){hookObjC("+[BPushBase64 baseDecode:srcLen:destBytes:destLen:charset:requirePadding:]", 6)}, 0);
setTimeout(function(){hookObjC("-[BPushNetworkInfoData providerName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushStaticsHelper logData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushStaticsHelper generateEneryptData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushStaticsHelper generateZipData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushStaticsHelper generateProtocolVersionData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushStaticsHelper generateCommonData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushStaticsHelper generateUserDevice]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushStaticsHelper generateUserNetwork]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushStaticsHelper generateChannelInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushStaticsHelper generateAppinfoData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushStaticsHelper generateUserActionData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushStaticsHelper staticsType]", 0)}, 0);
setTimeout(function(){hookObjC("+[BPushStatisticsManager shareInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[BPushStatisticsManager addAction:WithStatisticsType:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BPushStatisticsManager sendLogWithStatisticsType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BPushStatisticsManager _addAction:WithStatisticsType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BPushStatisticsManager sendWithStatisticsType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BPushStatisticsManager clearWithStatisticsType:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPushBehavior BehaviorFromCache:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPushBehavior BehaviorFromDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BPushBehavior dumpCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushBehavior netStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushGzipCompressor closeStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushGzipCompressor compressBytes:length:shouldFinish:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BPushGzipCompressor compressData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BPushGzipCompressor streamReady]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushLocationManager locationManager:didUpdateLocations:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BPushLocationManager locationManager:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BPushLocationManager locationCallBack]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushAlertBehavior toDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushAlertBehavior msgLength]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushApiBehavior toDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushApiBehavior requestId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushApiBehavior errorCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushCrashBehavior toDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushCrashBehavior crash_stack]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushIdfaLcationUpload generateUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushIdfaLcationUpload HttpBody]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushIdfaLcationUpload methodName]", 0)}, 0);
setTimeout(function(){hookObjC("+[BPushBaseManager defaultManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushRequest generateUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushRequest generalParamString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushRequest methodName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushRequest apiKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushBindRequest HttpBody]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushBindRequest deviceToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushUnbindRequest HttpBody]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushSetTagRequest HttpBody]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushBaseRequest generateParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushBaseRequest generateUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushBaseRequest handleResult:callBack:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BPushBaseRequest handleError:callBack:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BPushBaseRequest send:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BPushBaseRequest connection:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BPushBaseRequest connection:didReceiveData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BPushBaseRequest connectionDidFinishLoading:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BPushBaseRequest connection:willSendRequestForAuthenticationChallenge:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BPushBaseRequest HttpBody]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushBaseRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushBaseRequest responseData]", 0)}, 0);
setTimeout(function(){hookObjC("+[BPushErrorHandler errorMsgOfCode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPushErrorHandler errorWithCode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPushErrorHandler errorWithCode:andMsg:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BPushDelTagRequest HttpBody]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushListTagRequest HttpBody]", 0)}, 0);
setTimeout(function(){hookObjC("-[BPushLogRequest generateUrl]", 0)}, 0);
setTimeout(function(){hookObjC("+[BPushUtility sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[BPushUtility _setupDirectory]", 0)}, 0);
setTimeout(function(){hookObjC("+[BPushUtility enableStats]", 0)}, 0);
setTimeout(function(){hookObjC("+[BPushUtility disableStats]", 0)}, 0);
setTimeout(function(){hookObjC("+[BPushUtility GetOpenUDID]", 0)}, 0);
setTimeout(function(){hookObjC("+[BPushUtility GetUniqueDeviceID]", 0)}, 0);
setTimeout(function(){hookObjC("+[BPushUtility md5:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPushUtility URLEncode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPushUtility rsaEncryptNsstring:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPushUtility RSAencryptDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BPushUtility locationManager]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduHiShareLib registerApp:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduHiShareLib shareRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduHiShareLib handleOpenURL:delegate:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BaiduHiShareLib canOpenBaiduHi]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduHiShareLib openBaiduHi]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduHiUrlRequest encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduHiUrlRequest linkUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduHiUrlRequest thumbUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduHiUrlRequest thumbData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduHiPictureRequest encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduHiPictureRequest imageData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduHiResponse encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduHiUrlResponse encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduHiPictureResponse encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIDIFeatureInfo infoWithDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIFeatureInfo dictionaryForStorage]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIFeatureInfo deviceIndexs]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIFeatureInfo idIndexs]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIFeatureInfo preventDuplicate]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfoCS fetchInfoWithCollectMode:completionHandler:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfoCS csWithCompletionHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfoCS loadCSDataWithCompletionHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIInternalWeiXinPlugin handleFailureWithErrorCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIInternalWeiXinPlugin handleSuccessWithMKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIInternalWeiXinPlugin wxScope]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIInternalWeiXinPlugin wxAppId]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIBase64 encodeData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIBase64 decodeData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIBase64 encodeBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPIBase64 decodeBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPIBase64 stringByEncodingData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIBase64 stringByEncodingBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPIBase64 decodeString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIBase64 webSafeEncodeData:padded:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPIBase64 webSafeDecodeData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIBase64 webSafeEncodeBytes:length:padded:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPIBase64 webSafeDecodeBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPIBase64 stringByWebSafeEncodingData:padded:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPIBase64 stringByWebSafeEncodingBytes:length:padded:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPIBase64 webSafeDecodeString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIBase64 baseEncode:length:charset:padded:]", 4)}, 0);
setTimeout(function(){hookObjC("+[SAPIBase64 baseDecode:length:charset:requirePadding:]", 4)}, 0);
setTimeout(function(){hookObjC("+[SAPIBase64 baseEncode:srcLen:destBytes:destLen:charset:padded:]", 6)}, 0);
setTimeout(function(){hookObjC("+[SAPIBase64 baseDecode:srcLen:destBytes:destLen:charset:requirePadding:]", 6)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService syncLoginModelInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService transPtokenIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService syncPtokenIfPossible:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService syncPtokenIfPossible:includedLocal:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService openSelectShareMode]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService handleSilenceLoginSucceed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService readCurrentLoginModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService updateCurrentLoginModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService saveCurrentLoginModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService removeCurrentLoginModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService readLocalLoginModelList]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService addLocalLoginModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService removeLocalLoginModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService removeAllLocalLoginModels]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService addSharedLoginModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService updateSharedLoginModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService readSharedLoginModels]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService readSharedModelInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService readAllSharedLoginModels]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService readAllSharedModelInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService removeSharedLoginModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService removeAllSharedLoginModels]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService addPtokenWithInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService addPtoken:forBduss:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService deletePtokenForBduss:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService addLocalPtokenWithInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService deleteLocalPtokenForBduss:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService localPtokenForBduss:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService addStokenListWithInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService updateTPLStokenPairs:bduss:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService tplStokenPairsForBduss:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService stokenForBduss:targetTPL:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService ptokenForBduss:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService ptokenInKeychainForBduss:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService deleteStokenForBduss:targetTPLList:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService fetchDictionaryForAccount:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService fetchArrayForAccount:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService fetchObjectForAccount:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService saveObject:forAccount:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService removeAllPtokenInKeychain]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService readAllPtokenInKeychain]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService realAllStokenInKeychain]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService removeAllStokenInKeychain]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService addPtokenAndStokenList:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService saveLoginActionInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService readLoginActionInfoByUid:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPILoginShareService sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService applicationWillResignActive]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService autoSilenceLogin]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService teamIdentifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService accessGroup]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService SAPIUDID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService createUDID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService generateUDID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService removeUDIDFromUserDefaults]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService fetchUDIDFromUserDefaults]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService fetchUDIDFromKeyChain]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService saveSapiIdfa:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService fetchSapiIdfa]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService removeIdfaInKeychain]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService keychainQueryWithService:account:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService checkWhetherAppIsRestored]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService upgradeCUIDToDeviceOnly]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService saveDeviceInfoReportDateForName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService readDeviceInfoReportDateForName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService saveFaceLoginLivingUname:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService readFaceLoginLivingUname]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService saveFaceLoginInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService readFaceLoginInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService appGroupID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService shouldSyncLoginModelInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService shouldIgnoreCachedPtokens]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService shouldIgnoreCachedKeychainPtokens]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICookieManager deletePtoken]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICookieManager deleteBdussFromCookie]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICookieManager deleteCuidFromCookie]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICookieManager persistentBdussFromCookies:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPICookieManager deleteBindBdussCookie]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICookieManager deletePassportCookies]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICookieManager deleteHistoryCookie]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICookieManager deleteCookieWithDomain:name:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPICookieManager syncPassport]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper wappassURLStringWithPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper passportURLStringWithPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper passportDomain]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper wappassDomain]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper nsclickDomain]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper cdnDomain]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper addBaseQueryToURL:otherQuery:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper addBaseQueryToURLString:otherQuery:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper appendSAPIBasicParams:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper cdnURLStringWithPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper nsclickURLString]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper cacheConfigURLString]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper accountCenterURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper accountSecurityCenterURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper accountNormalizationURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper fillAccountURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper startLoginURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper ssoLoginURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper afterAuthURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper fetchPhoneNumInitURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper dispatchConfigURLWithVersion:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper cityQueryURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper qrcodeLoginApp2PCURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper qrcodeLoginPC2AppURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper uploadPortraitURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper smsGetLoginURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper dynamicPassURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper applyRegCodeURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper phoneRegVerifyURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper regQuickURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper enhancedReloginURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper reloginURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper fillUnameURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper voiceLoginURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper voiceSwitchURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper voiceVerifyURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper voiceLuckNumUpdateURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper faceRegURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper faceLoginURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper faceUpdateURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper faceDeleteURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLHelper faceLoginCheckURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICookieManager createCookieWithName:value:domain:path:expiresDate:secure:]", 6)}, 0);
setTimeout(function(){hookObjC("+[SAPICookieManager createCookieWithName:value:domain:path:expiresDate:secure:httpOnly:]", 7)}, 0);
setTimeout(function(){hookObjC("+[SAPIBloomFilter bloomFilterWithHexString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIBloomFilter commonInit]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIBloomFilter contains:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIBloomFilter hash:capacity:seed:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAPIBloomFilter bitVector]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIBloomFilter hashSeeds]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfoAccelerometer fetchInfoWithCollectMode:completionHandler:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPIDIDeviceInfo infoWithDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDeviceInfo osVersions]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIHTTPService sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPService postWithInterface:params:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPService postWithInterface:params:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPService postWithExternalInterface:params:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPService postFileWithInterface:fileData:mimeType:params:success:failure:]", 6)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPService cancelAllRequests]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPService requestForUploadFileWithURL:fileData:mimeType:params:retryingNumberOfTimes:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPService postWithInterface:params:retryingNumberOfTimes:success:failure:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPService postWithExternalInterface:params:retryingNumberOfTimes:completion:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPService postFileWithURL:fileData:mimeType:params:retryingNumberOfTimes:success:failure:]", 7)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPService genSig:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPService handleConnectionError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPService sendLogForCertExpiredWithConnectionError:underlyingErrorCode:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPService enableRetry]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPService generateSignForParams:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPILoginManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager cancenlAllRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager loginWithUsername:password:captcha:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager loginWithUsername:password:captcha:extraParams:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager registerWithMobile:password:verifyCode:success:failure:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager registerWithMobile:password:verifyCode:extraParams:success:failure:]", 6)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager quickRegisterWithUsername:password:captcha:needCaptcha:success:failure:]", 6)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager quickRegisterWithUsername:password:captcha:extraParams:needCaptcha:success:failure:]", 7)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager configureLoginParamsWithUsername:password:captcha:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager addBaseParamsWith:interface:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager handleLoginSucceedInfo:success:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager handleLoginFailure:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager resetLoginAdditionParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager saveLoginActionInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager stringByReplaceHostForURLString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager genSig:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager generateUUID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager switchToNativeInterfaceForLoginBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager accountType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager enableNoPwdRegister]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager captchaStr]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager captchaSign]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager shouldResetAccountType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager startCheckingDate]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager upwardRegisterTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager upwardRegisterSMS]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager upwardRegisterSucceedBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager upwardRegisterFailedBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager reloginWithUsername:password:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager reloginIfNeededWithUsername:password:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager loginWithMobile:dpass:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager loginWithMobile:dpass:extraParams:success:failure:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager registerBySendSMS:extraParams:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager registerBySendSMS:timeout:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager registerBySendSMS:timeout:extraParams:success:failure:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginManager startCheckUpwardRegisterWithExtraParams:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPClient postPath:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPClient requestWithMethod:path:parameters:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPClient cancelAllRequests]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPClient executeRequest:success:failure:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPClient dataEncodedWith:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPClient stringEncodedWith:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPClient userAgent]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPClient requestQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIHTTPClient baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIReachability reachabilityWithHostName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIReachability reachabilityWithAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIReachability reachabilityForInternetConnection]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIReachability startNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIReachability stopNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIReachability connectionRequired]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIReachability currentReachabilityStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIReachability networkStatusForFlags:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIInvokeCommand paramsInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIInvokeCommand callBackId]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIRegisterService registerAtOnceWithSMSContent:onCompletion:onError:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAPIRegisterService cancelRequest]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIEventCenter eventCenterWithObserverEvent:delegate:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIEventCenter observerAllKnownEvent]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIEventCenter observerSysEvent]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIEventCenter applicationWillTerminate:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIEventCenter addObserverForEvent:target:selector:object:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAPIEventCenter handleEventNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIEventCenter postNotificationForEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIEventCenter postNotificationForEvent:userInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPIEventCenter notificationNameForEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIEventCenter observerEvents]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIEventCenter eventTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIEventCenter startAppTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIEventCenter stopAppTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIEventCenter handleTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIEventCenter validateFrequencyEvent]", 0)}, 0);
setTimeout(function(){hookObjC("+[SapiError errorWithCode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SapiError errorMsgWithCode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIDIIDInfo infoWithDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfoAL fetchInfoWithCollectMode:completionHandler:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfoAL syncInfoActiveWithCompletionHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIEncryptionHelper encryptString:certFilePath:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIEncryptionHelper encryptStringBaseOnPSCS1PaddingWithSrcStr:cert:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIEncryptionHelper encryptStringBaseOnPSCS1PaddingHexWithSrcStr:cert:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIEncryptionHelper encryptString:cert:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIEncryptionHelper encryptParamInfo:certFilePath:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIEncryptionHelper encryptParamInfo:cert:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIEncryptionHelper saveCert:certFilePath:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIEncryptionHelper AES128Decrypt:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIEncryptionHelper AES128DecryptToData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIEncryptionHelper AES128Encrypt:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIEncryptionHelper AES128EncryptToData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIEncryptionHelper paddingBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIEncryptionHelper encryptAESData:key:iv:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAPIEncryptionHelper decryptAESData:key:iv:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAPIEncryptionHelper reverse:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIEncryptionHelper createFileIfNotExist:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIEncryptionHelper sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIEncryptionHelper AESKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIEncryptionHelper random32String]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIEncryptionHelper xorDecryptedString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIEncryptionHelper xorEncryptedString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIEncryptionHelper aesEncryptWithPaddingZero:aesKey:aesIV:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLFactory passportDomain]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLFactory wappassDomain]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIURLFactory resetFactory]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfo fetchInfoWithCollectMode:completionHandler:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfo completeWithInfo:error:completionHandler:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfo errorWithType:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfo formatWithArray:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfo formatWithArray:invisibleSymbolIndex:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfo invisibleSymbolIndexToString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfo collectModeToString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfo infoType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfo psName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfo preventDuplicate]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIKeychain passwordForService:account:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPIKeychain passwordForService:account:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPIKeychain passwordDataForService:account:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPIKeychain passwordDataForService:account:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPIKeychain deletePasswordForService:account:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPIKeychain deletePasswordForService:account:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPIKeychain allAccounts]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIKeychain allAccounts:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIKeychain accountsForService:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIKeychain accountsForService:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPIKeychain accessibilityType]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIEncryptorAES generateIv]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIEncryptorAES encryptData:key:iv:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPIEncryptorAES decryptData:key:iv:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPIEncryptorAES encryptString:keyString:ivString:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPIEncryptorAES decryptData:keyString:ivString:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPIEncryptorAES encryptDataFromObject:keyString:ivString:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPIEncryptorAES decryptObjectFromData:keyString:ivString:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPIEncryptorAES encryptedLocalPdata:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIEncryptorAES decryptedLocalPtoken:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIEncryptorAES decryptedLocalPtokenWithDefaultCUID:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIEncryptorAES loadAESForLocalPdata]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIEncryptorAES encryptedLocalModelInfoString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIEncryptorAES decryptedLocalModelInfoString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIEncryptorAES loadAESForLocalModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfoPN fetchInfoWithCollectMode:completionHandler:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfoPN syncInfoNativeWithCompletionHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService deleteStokenForBduss:targetTPLList:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService confirmLoginWithAppToPCWithCmd:sign:onCompletion:onError:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService loginFromAppToPCwithLoginModel:cmd:sign:onCompletion:onError:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService loginFromPCToAppWithCmd:sign:onCompletion:onError:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService uploadPortrait:mimeType:loginModel:onCompletion:onError:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService fillUname:loginModel:onCompletion:onError:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService syncLoginModelWithBduss:ptoken:app:onCompletion:onError:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService loginWithLoginModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService unsharedLoginWithLoginModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService fillUnameWithLoginModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService logout:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService reloginWithUid:onCompletion:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService reloginWithUid:success:failure:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService reloginWithUid:bduss:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService loginWithUid:encryptedPass:onCompletion:onError:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService readLoginActionInfoByUid:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService saveLoginActionInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService clearAllRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService reloginWithUsername:password:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService reloginIfNeededWithUsername:password:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService refreshCaptchaForSMSLoginOnCompletion:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService loginWithMobile:dpass:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService registerBySendSMS:timeout:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService web2NativeLoginSuccess:failure:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService realWeb2NativeLoginSuccess:failure:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService web2NativeLoginWithLoginModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService callbackWeb2NativeLoginSucceedWithLoginModel:success:failure:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService native2WebLogin]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService loginQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService saveCurrentLoginModelInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService readCurrentLoginModelInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService removeCurrentLoginModelInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService saveLocalLoginModelInfos:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService readLocalLoginModelInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService removeAllLocalLoginModelInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService handleLocalLoginModelUpgrade]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService localLoginModelHasUpgradeSucceed]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService saveLocalPtokenDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService removeLocalPtokenDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService readLocalPtokenDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService handleLocalPtokenUpgrade]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService syncAppGroupUserDefault]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService appGroupShareUserDefault]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService saveCurrentLoginModelInfoStringToAppGroup:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService removeCurrentLoginModelInfoFromAppGroup]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService saveLocalLoginModelInfoStringToAppGroup:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService removeAllLocalLoginModelInfosFromAppGroup]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService updateLocalStokenDictionaryWithNewStokenInfoList:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService saveLocalStokenDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService readLocalStokenDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService deleteLocalStokenForBduss:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginShareService removeLocalStokenDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIKeychainQuery save:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIKeychainQuery deleteItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIKeychainQuery fetchAll:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIKeychainQuery fetch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIKeychainQuery passwordObject]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIKeychainQuery errorWithCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIKeychainQuery passwordData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIKeychainQuery accessGroup]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIKeychainQuery synchronizationMode]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIKeychainQuery accessibilityType]", 0)}, 0);
setTimeout(function(){hookObjC("+[PASSRouter canHandleQRCodeContent:]", 1)}, 0);
setTimeout(function(){hookObjC("+[PASSRouter handleQRCodeContent:rootVC:presentLoginVCHandler:]", 3)}, 0);
setTimeout(function(){hookObjC("+[PASSRouter openAppealWithURLString:rootVC:presentLoginVCHandler:]", 3)}, 0);
setTimeout(function(){hookObjC("+[PASSRouter openLivenessWithURLString:rootVC:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager checkNativeURLType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager checkWhetherAppealURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager checkWhetherLivenessURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfoCommon fetchInfoWithCollectMode:completionHandler:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginPlugin loginSucceed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginPlugin loginWithExistedAccount:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginPlugin cancelAllRequest]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPILoginPlugin sharedPlugin]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPILoginParamManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginParamManager shareStrategy]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginParamManager httpsEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginParamManager preFetchTPLList]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginParamManager sofireSDKEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginParamManager fetchPhoneNumberInterval]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginParamManager configStepSecond]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginParamManager configPlan]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginParamManager smsFaceLoginEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginParamManager shareLivingUnameEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginParamManager faceLoginCheckEnabledString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginParamManager faceLoginCheckEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginParamManager wxAppId]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginParamManager globalShareStrategy]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginParamManager specificShareStrategy]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginParamManager onePasswordEnabledString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginParamManager httpsEnabledString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginParamManager prioritySilentLoginTPLs]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginParamManager loginCookieDeviceInfoKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginParamManager sofireSDKEnabledString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginParamManager smsFaceLoginEnabledString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginParamManager shareLivingUnameEnabledString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfoWifi fetchInfoWithCollectMode:completionHandler:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfoMagnetometer fetchInfoWithCollectMode:completionHandler:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPICacheService sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPICacheService memoryWarningReceived:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPICacheService loadCachePage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPICacheService checkCachePageHash:moduleId:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPICacheService syncCachePage]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPICacheService clearCachePage]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPICacheService syncCacheStatusOnCompletion:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPICacheService syncCacheStatusWithHTTPS:onCompletion:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAPICacheService syncAllWebContent]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPICacheService syncWebContentByDownloadUrl:module:hash:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAPICacheService createFileIfDoesntExist:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPICacheService sendHTTPSFailureLogWithConnectionError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPICacheService cacheQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPICacheService localCacheStatusInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPICacheService latestCacheStatusInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPICacheService cachePageInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfoGPS fetchInfoWithCollectMode:completionHandler:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoFactory createDeviceInfoWithType:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIDIDispatchCenter sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter generateAppGrayIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter generateAvaliableDeviceInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter checkDailyConfigNeedUpdate]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter updateDIDispatchConfigIfNeededWithCompletionHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter updateDispatchConfigImmediatelyWithCompletionHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter headDIDispatchConfigWithCompletionHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter updateUserInfoIfNeededWithCompletionHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter checkFeatures:idKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter checkFeatureGray:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter checkFeatureProducts:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter checkFeatureDevices:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter checkFeatureIds:idKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter saveHitFeatures:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter updateDeviceInfoConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter handleConfigField:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter diDispatchCenterQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter dispatchCenterSession]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter eventCenter]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter avaliableDeviceInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter readAppGray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter saveAppGray:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter saveDIFeatures:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter readDIFeatures]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter clearDIFeatures]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter handleEvent:userInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter fetchAndReportDeviceInfos:event:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter reportDeviceInfo:infoType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter realReportDeviceInfoWithParams:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter divideBigDeviceInfoContent:piecesCount:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter preventDuplicateReportForFrequencyEvent:deviceInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter queryCurrentCityWithCompletionHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIDIDispatchCenter packageDeviceInfoList:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIDIDispatchCenter calculateEncryptedInfoLength:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter encryptReportDeviceInfos:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDIDispatchCenter decryptConfigContent:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIDIDispatchCenter aesKey]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDIDispatchCenter aesIV]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDIDispatchCenter randomStringWithLength:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIDIDispatchCenter currentTimestamp]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIPlugin defaultCommand:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIPlugin toCallBackSuccess:callBackId:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIPlugin toCallBackError:callBackId:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIPlugin toCallBackSuccessWithCommand:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIPlugin toCallBackErrorWithCommand:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIPlugin toCallBackError:command:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIPlugin evalJS:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIPlugin runInBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfoGyro fetchInfoWithCollectMode:completionHandler:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager currentLoginModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager localLoginModelList]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager sharedLoginModelList]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager clearAllSharedLoginModels]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager loginWithLoginModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager clearLoginOptions]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager addLoginOption:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager clearAllRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager syncCacheOnCompletion:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager clearCachePage]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager enforceBindingURLWithToken:adtext:adhref:returnURL:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager accountBindingURLWithToken:adtext:adhref:returnURL:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager mainLoginUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager loginURLWithLoginType:extraParams:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager enhancedShareLoginURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager smsLoginUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager bindMobileUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager bindEmailUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager rebindMobileUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager rebindEmailUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager unbindMobileUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager unbindEmailUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager checkQuickCallbackAfterExecuteBind:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager handleMobileBindConflictIfNeeded:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager normalizeAccountUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager accountRecordIndexUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager changePasswordUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager addSmsAnchorTologinUrl:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager addLoginAnchorToLoginUrl:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager addAnchor:LoginUrl:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager addBaseInfoQuery:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager addBaseQuery:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager baseLoginUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager mainRegistUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager registerURLWithExtraParams:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager sinaLoginUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager qqLoginUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager qqWeiboLoginUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager ffanOauthLoginURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager forgetPwdUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager sinaSSOLoginUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager weixinLoginURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager qrcodeLoginApp2PcUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager qrcodeLoginPc2AppUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager loginService]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager registerService]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager loginShareService]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIMainManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager loginSucceed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager unsharedLoginSucceed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager loginFail:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager fillUnameSucceed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager oauthLoginSucceed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager registVerifiedSucceed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager logoutSucceed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager safeSyncExecuteOnMainQueue:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager persistentModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager optionList]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager optionTypeList]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager voiceProductId]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager inputPlaceholderPhoneNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager cacheEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager deviceIdEncryptKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager packageSign]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager resetSilentShareLogin]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager fastRegSMSChannel]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager updateStuff]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager checkVersionWithEnvironmentType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager SAPICUID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager loginExtraInfoFromUserInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager transPtokenIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager handleStokenUpgraded]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager handleCookieUpgrade]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager handleDeleteCookieIssue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager appName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager SDKI18NString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager startSSDKEngineWithCompletion:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager checkSSDKArgument]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager activeSSDKWithEventID:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager reachabilityChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager applicationDidEnterBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager applicationDidBecomeActive]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager wxScope]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager preQueryFaceLoginInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager onePasswordEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager environmentType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager shareBindMode]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager loginShareMode]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager loginOptionHidden]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager quickUserLogin]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager quickLoginUserName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager voicePrintLogining]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager fastRegText]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager skinUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager simplifyAccountNomailization]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager quickCallbackAfterExecuteBind]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager silentShareOnUpgrade]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager supportNoPwdRegister]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager handleBindMobileConflict]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager supportForeignMobile]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager supportVoiceVerifyOnSMSLogin]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager enabledHTTPSOffline]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager enableSyncH5LoginStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager naH5SyncStrategy]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager naH5SyncCallbackStrategy]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager useIFrame]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager i18nType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager biometricOptions]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager baiduMapCuid]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager appGroupID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager wxAppId]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager ssdkAppKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager ssdkSecretKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager ssdkInitalCompletion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager hostAppCUID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager shouldCheckAppRestored]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager supportFaceLogin]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager syncPageQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager tplOrEnvironmentTypeSetted]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager ssdkHasInitial]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager internetReachability]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager zidForEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager addPisdiToParams:event:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager checkSAPIParamsAvaliable]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager checkNetworkStatusViaWWAN]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPIMainManager currentNetworkStatus]", 0)}, 0);
setTimeout(function(){hookObjC("+[PASSAssetManager passNavBackImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[PASSAssetManager passBdBearLogoImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[PASSAssetManager imageWithName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[PASSAssetManager passportKitBundleResourceWithName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPILocationHelper sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILocationHelper lastKnownLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILocationHelper updateCurrentLocationIfAuthorized]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILocationHelper locationManager:didUpdateLocations:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPILocationHelper locationManager:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPILocationHelper safeExecuteOnMainThread:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILocationHelper locationManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILocationHelper cacheLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILocationHelper locationStringForDeviceInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIInternalDefines thirdBindValueForMode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfoGateWayAccessPN fetchInfoWithCollectMode:completionHandler:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfoGateWayAccessPN fetchPhoneNumberInfoFromGateWayWithCompletionHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfoGateWayAccessPN unableToFetchPNWithCompletionHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfoGateWayAccessPN tianYiGateWayAuthWithResultInfo:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfoGateWayAccessPN gateWayAuthResultWithResultInfo:completionHandler:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfoGateWayAccessPN otherGateWayAuthWithResultInfo:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfoGateWayAccessPN HMACSha1:data:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPIDeviceInfoGateWayAccessPN hexStringToData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILogService logBaseParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILogService silentLoginLog]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILogService enhancedLogForItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILogService queryFromDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPILogService sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILogService logQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILogService nameArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILogService situationArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILogService sendDeviceInfoLog]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILogService sendLogoutLog]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILogService sendOnePasswordAutoSubmitLog]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILogService sendSSLErrInterfaceLogWithErrCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILogService sendSSLErrConfigWithErrCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILogService sendSSLErrDateCancelLog]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILogService sendSSLErrDateSettingLog]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILogService sendNativeOverrideWebLog]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILogService sendBackupRecoveryLogWithAppCUID:keychainCUID:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPILogService sendLogForName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILogService sendLogForName:extraParams:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPILogService appendBaseParamsForDispatch:pid:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPILogger logWithClass:function:line:format:]", 4)}, 0);
setTimeout(function(){hookObjC("+[SAPICookieObserver sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPICookieObserver manualSync]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPICookieObserver addCookieChangedObserver]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPICookieObserver removeCookieChangedObserver]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPICookieObserver cookieDidChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPICookieObserver web2NativeLoginWithLoginModel:ptoken:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPICookieObserver handleInvalidCookiePtoken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPICookieObserver internalObserverEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPICookieObserver lastCookieBduss]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIUtils defaultSAPIPath]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIUtils pathForModuleId:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIUtils moduleIdForURL:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIUtils bundleModuleNameForModuleId:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIUtils purifyURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService handleUserInfo:onCompletion:onError:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService updateCurrentLoginModelIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService handleLoginWithModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService handleLoginWithModel:extraInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService handleUnshareLoginWithModel:extraInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService handleLoginFailureWithError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService genSig:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService trim4Uid:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPILoginService queryFaceLoginInfoWithLivingUname:success:failure:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper deviceInfoStringWithInterface:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper generateDeviceInfoWithPlainString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper generateIV]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper plainDeviceInfoWithInterface:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper packageName]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper appVersion]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper sdkVersion]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper deviceModel]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper systemVersion]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper systemType]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper sharedUidCount]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper sharedUids]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper usedTimes]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper currentLoginUid]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper currentAcbd]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper deviceType]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper macAddress]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper cpuType]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper systemUptime]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper gpsLocation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper packageList]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper localIPAddress]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper deviceName]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper bdMapLocation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper deviceSN]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper deviceUUID]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper virtualMachine]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper clientIP]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper gatewayIP]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper outerIP]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper proxyIP]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper usbDebug]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper mtjCuid]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper baiduMapCuid]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper paddingBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper deviceInfoForLogin]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper interfaceForLogin]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper deviceInfoStringForCookie]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper retrieveDeviceInfoForKeys:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper deviceInfoKeyMapper]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper safeReadIDFAString]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper pisDeviceInfoStringWithZID:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPIDeviceInfoHelper ssdkZID]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduMTJOpenUDID _setDict:forPasteboard:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BaiduMTJOpenUDID _getDictFromPasteboard:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduMTJOpenUDID _generateFreshOpenUDID]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduMTJOpenUDID valueWithError:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduMTJMobStatAESEncryption originalData:AES256EncryptWithKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BaiduMTJMobStatAESEncryption originalData:AES256DecryptWithKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BaiduMTJMobStatAESEncryption originalData:AES256CBCEncryptWithKey:ivector:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BaiduMTJMobStatAESEncryption originalData:AES256CBCDecryptWithKey:ivector:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BaiduMTJMobStatAESEncryption base64DataFormString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduMTJMobStatAESEncryption base64StringFromData:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BaiduMTJMobStatAESEncryption randomString]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduMTJMobStatAESEncryption SHAString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduMTJUDID adString]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSRequestCodeSigner sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSRequestCodeSigner queryStringDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSRequestCodeSigner MD5:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSRequestCodeSigner productToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSRequestCodeSigner requestCodeSignForParamerter:withToken:postData:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSDNSProxyPlugin dnsOptimumIpForDomian:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileHelper createFolderByPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileHelper deleteFolderByPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileHelper createFileByPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileHelper deleteFileByPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileHelper createFileByPathWithData:filedata:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileHelper truncationTwoDecimalPlaces:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileHelper removeFolder:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileHelper deleteSubFileAtPath:fromDate:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSLog addLog:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSLogger singtonLogger]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger deviceString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger createPostFileQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger applicationDidEnterBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger applicationWillEnterForeground]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger timerFired:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger addSkipCompBackupAttribute:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger asyncPostLogs]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger postLogs]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger postFile:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger writeToFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger stringFromDate:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger addLog:ActionExt:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger addLog:ActionExt:Category:noteDic:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger pageStart:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger pageEnd:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger pageStart:noteDic:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger pageEnd:noteDic:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger commonParameters]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger addEncry:withMethod:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger addChannel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger addTerminalType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger addDeviceType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger addCityID:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger addCoordinate:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger addMac:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger addIDFA:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger addVersion:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger addCommon:withMethod:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger beforeSendRequest:withMethod:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger userBduss]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger currentCoordinate]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger cityID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSLogger terminalType]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSUILogHelper sharedHelper]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSUILogHelper addSchemeCTAG:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSUILogHelper addSource:key:value:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSUILogHelper addSource:key:value:reserved:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BNJSUILogHelper checkAndClearCTAGAndCopidOnExpires]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSUILogHelper clearCTAGAndCopidCookie]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSUILogHelper buildFinalCTAGArrayAndAddIntoCookie:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSUILogHelper logCTAGArrayFromBase64String:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSUILogHelper checkAndClearCopidCookie]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSUILogHelper checkAndClearCopidCookieForExpires:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSUILogHelper clearCTAGValueAndCookie]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSUILogHelper clearCopidCookie]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSUILogHelper deleteCookieForName:domain:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSUILogHelper addCTAGIntoCookie:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSUILogHelper lastModify]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSUILogHelper observerOfApplicationDidEnterBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSDraggingCoordinator _dropArea]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSDraggingCoordinator _conversationArea]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSDraggingCoordinator _destinationEdgeForReleasePointInCurrentState:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSDraggingCoordinator _destinationPointForReleasePoint:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSDraggingCoordinator snappingEdge]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSDraggingCoordinator edgePointDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSResourceRelocateURLProtocol canInitWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSResourceRelocateURLProtocol canonicalRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSResourceRelocateURLProtocol startLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSResourceRelocateURLProtocol stopLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSResourceRelocateURLProtocol shareSessionManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSResourceRelocateURLProtocol startLoadingByHTTP:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSResourceRelocateURLProtocol dataTask]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSLocalStorageProvider sharedProvider]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSLocalStorageProvider removeLocalStorageItem:complete:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSLocalStorageProvider localStorageCache]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiNuoComponent sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiNuoComponent startWithScheme:appKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiNuoComponent startWithScheme:appKey:environment:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BaiNuoComponent configScheme:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiNuoComponent webKitPreLoaded]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiNuoComponent addBaseProvider]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiNuoComponent addHybirdProviders:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiNuoComponent loadCompConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiNuoComponent openURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiNuoComponent canOpenURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiNuoComponent addJSAPIWithHybirdProviders:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiNuoComponent addJSAPIWithServiceName:hybirdProvider:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiNuoComponent replaceSchemeHost:newHost:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiNuoComponent cleanCompCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiNuoComponent needSupportScreenRotate:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiNuoComponent reloadComponentDCPSEnvironment:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiNuoComponent addSchemeProvider:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiNuoComponent reloadHybridFrameWork]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiNuoComponent appKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiNuoComponent schemeManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSSideMenu menuIsVertical]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSSideMenu pointInside:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSSideMenu layoutSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSSideMenu animateLayer:withKeyPath:to:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSSideMenu itemSpacing]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSSideMenu animationDuration]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSSideMenu menuPosition]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJStatisticProvider addLog:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJStatisticProvider addEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJStatisticProvider addCtag:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSUserDefaultsHelper userDefaultsKeyWithKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSUserDefaultsHelper valueForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSUserDefaultsHelper boolForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSUserDefaultsHelper integerForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSUserDefaultsHelper doubleForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSServerInfo sharedInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSServerInfo refreshServerAddressWithString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSServerInfo serverPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSServerInfo serverArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSRefreshControl layoutSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSRefreshControl originalEdgeInsets]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSRefreshControl cSpinner]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSRefreshControl labelState]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSJavaScriptHelper defaultHelper]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSJSServiceDispatcher handleMessage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSJSServiceDispatcher extractInfoWithParams:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSJSServiceDispatcher logMessageHandle]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSJSServiceDispatcher hasPermission]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSJSServiceDispatcher finalCompid]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSJSServiceDispatcher handleNoPerssion]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSJSServiceDispatcher handleRegistedAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSJSServiceDispatcher handleAnyOtherService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSJSServiceDispatcher callback:withRetValue:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSJSServiceDispatcher responseback:withRetValue:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSJSServiceDispatcher serviceName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSJSServiceDispatcher callbackId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSCompHTTPResponseSerializer objectFromResponseData:withRequest:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSCompHTTPResponseSerializer shouldCacheResponseDataByObjcet:withRequest:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation urlSessionQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation unzip:toPath:usetime:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation unzipCompPackage:copytime:unziptime:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation ErrorMessage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation doCompleteCallback:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation operationDidStart]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation doLoadBundledComp]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation doLoadRemoteComp]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation configureComponentPackageAsyncDownloadWithURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation observeValueForKeyPath:ofObject:change:context:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation handleDownloadError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation handleDownloadData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation erroCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation errorDescription:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation cancelWithoutCallback]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation compInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation completeCallback]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation errorTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation connectionManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation urlResponse]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation urlCompeletedSemaphore]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation downloadError]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation downloadTask]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadOperation downloadProgress]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPCompRequestEventPlugin httpDispatcher:onRequestOpertion:emitEvent:withRequest:data:object:error:]", 7)}, 0);
setTimeout(function(){hookObjC("-[BNJSIOS7StyleSegment segmetnSelectBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSIOS7StyleSegment itemCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSIOS7StyleSegment selectedIndex]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSCompHTTPRequestSerializer doSignWithParameters:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSCompHTTPRequestSerializer requestURLStringByBaseURL:withRequest:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSCompHTTPRequestSerializer httpURLWithBaseURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSCompHTTPRequestSerializer requestHeadersByRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSCompHTTPRequestSerializer requestParametersByBaseURL:withRequest:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSCompHTTPRequestSerializer excludeParameterKeys]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSCompHTTPRequestSerializer naserverDefaultParameters]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSCompHTTPRequestSerializer commonParametersCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSCompHTTPRequestSerializer excludeCommonParameterKeys]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSNativeAPIDispatcher nativAPIVersion:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSNativeAPIDispatcher version:isOlderThan:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSNativeAPIDispatcher version:isNewerThan:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSNativeAPIDispatcher version:isEqualTo:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSNativeAPIDispatcher version:isEqualOrOlderThan:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSNativeAPIDispatcher version:isEqualOrNewerThan:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSWebPImageFilter needWebPImageFilter:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSWebPImageFilter componentSupportWebPProxy:imageURL:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSWebPImageFilter analysisCompidFromUserAgent:userAgent:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSNetworkAPICache sharedCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPAPIClient httpRequestForURL:viaHTTPS:httpMethod:httpHeaders:withParameters:success:failure:]", 7)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPAPIClient httpMultipartFormRequestForURL:viaHTTPS:httpMethod:httpHeaders:withParameters:constructingBodyWithBlock:success:failure:]", 8)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPAPIClient httpRequestForURL:viaHTTPS:httpMethod:httpHeaders:httpBody:success:failure:]", 7)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPAPIClient httpRequestForURL:viaHTTPS:httpMethod:withParameters:success:failure:]", 6)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPAPIClient httpMultipartFormRequestForURL:viaHTTPS:httpMethod:withParameters:constructingBodyWithBlock:success:failure:]", 7)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPAPIClient securityPolicy:isTrustIp:domian:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPAPIClient httpsBaseURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSNetworkAPIHelper defaultHelper]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSNetworkAPIHelper finalParametersFromRequestModel:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSNetworkAPIHelper defaultSessionManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSNetworkAPIHelper responseTimestamp]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSNetworkAPIHelper calculateQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSNewNetWorkProvider postNARequest:complete:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSNewNetWorkProvider doSignWithSource:customerId:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSNewNetWorkProvider doSignWithParameters:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSNewNetWorkProvider newGETMethod:complete:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSNewNetWorkProvider newPOSTMethod:complete:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSNewNetWorkProvider addHTPPHeaderUA:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSNewNetWorkProvider requestNuomiAPI:skipHTTPS:params:requestType:originParams:responseType:cachePolicy:complete:]", 8)}, 0);
setTimeout(function(){hookObjC("-[BNJSNewNetWorkProvider glaxyServiceAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSNativeService sharedService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSNativeService cleanNativeServices]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSNativeService allNativeServices]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSNativeService registeredServiceName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSNativeService replaceAction:withActionName:withActionProvider:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSNativeService hasRegistedAction:withActionName:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSNativeService nativeServices]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJStatisticHelper addCompPageStateStatisticLog:noteInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJStatisticHelper addCompPageSpeedStatisticLog:noteInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJStatisticHelper addCompNetworkStatisticLog:noteInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJStatisticHelper addCompJSBTimerStatisticLog:noteInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJStatisticHelper addCompUpdateStatisticLog:noteInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJStatisticHelper addCompPageE2EStatisticLog:noteInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJStatisticHelper addCompPageLandedTimerStatisticLog:noteInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJStatisticHelper addLog:ActionExt:Category:noteDic:]", 4)}, 0);
setTimeout(function(){hookObjC("+[BNJStatisticHelper pageDrop:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJStatisticHelper pageDrop:noteDic:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJStatisticHelper addSource:key:value:reserved:]", 4)}, 0);
setTimeout(function(){hookObjC("+[BNJStatisticHelper clearCTAGAndCopidCookie]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJStatisticHelper addHomeEntryCookieWithSource:key:value:reserved:]", 4)}, 0);
setTimeout(function(){hookObjC("+[BNJStatisticHelper clearHomeEntryCookie]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJStatisticHelper webPageStart:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJStatisticHelper webPageEnd:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJStatisticHelper pageStart:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJStatisticHelper pageEnd:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJStatisticHelper pageStart:noteDic:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJStatisticHelper pageEnd:noteDic:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager absoluteDirectories]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager absoluteDirectoryForPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager absolutePath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager assertPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager attributeOfItemAtPath:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager attributeOfItemAtPath:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager attributesOfItemAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager attributesOfItemAtPath:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager createDirectoriesForFileAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager createDirectoriesForFileAtPath:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager createDirectoriesForPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager createDirectoriesForPath:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager createFileAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager createFileAtPath:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager createFileAtPath:withContent:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager createFileAtPath:withContent:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager creationDateOfItemAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager creationDateOfItemAtPath:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager emptyCachesDirectory]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager emptyTemporaryDirectory]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager existsItemAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager listDirectoriesInDirectoryAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager listDirectoriesInDirectoryAtPath:deep:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager listFilesInDirectoryAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager listFilesInDirectoryAtPath:deep:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager listFilesInDirectoryAtPath:withExtension:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager listFilesInDirectoryAtPath:withExtension:deep:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager listFilesInDirectoryAtPath:withPrefix:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager listFilesInDirectoryAtPath:withPrefix:deep:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager listFilesInDirectoryAtPath:withSuffix:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager listFilesInDirectoryAtPath:withSuffix:deep:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager listItemsInDirectoryAtPath:deep:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager moveItemAtPath:toPath:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager moveItemAtPath:toPath:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager pathForApplicationSupportDirectory]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager pathForApplicationSupportDirectoryWithPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager pathForCachesDirectory]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager pathForCachesDirectoryWithPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager pathForDocumentsDirectory]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager pathForDocumentsDirectoryWithPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager pathForLibraryDirectory]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager pathForLibraryDirectoryWithPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager pathForMainBundleDirectory]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager pathForMainBundleDirectoryWithPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager pathForPlistNamed:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager pathForTemporaryDirectory]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager pathForTemporaryDirectoryWithPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager readFileAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager readFileAtPath:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager readFileAtPathAsArray:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager readFileAtPathAsCustomModel:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager readFileAtPathAsData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager readFileAtPathAsData:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager readFileAtPathAsDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager readFileAtPathAsImage:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager readFileAtPathAsImage:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager readFileAtPathAsMutableArray:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager readFileAtPathAsMutableData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager readFileAtPathAsMutableData:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager readFileAtPathAsMutableDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager readFileAtPathAsString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager readFileAtPathAsString:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager removeFilesInDirectoryAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager removeFilesInDirectoryAtPath:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager removeFilesInDirectoryAtPath:withExtension:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager removeFilesInDirectoryAtPath:withExtension:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager removeFilesInDirectoryAtPath:withPrefix:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager removeFilesInDirectoryAtPath:withPrefix:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager removeFilesInDirectoryAtPath:withSuffix:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager removeFilesInDirectoryAtPath:withSuffix:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager removeItemsInDirectoryAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager removeItemsInDirectoryAtPath:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager removeItemAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager removeItemAtPath:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager removeItemsAtPaths:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager removeItemsAtPaths:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager renameItemAtPath:withName:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager renameItemAtPath:withName:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager urlForItemAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager writeFileAtPath:content:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager writeFileAtPath:content:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager metadataOfImageAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager exifDataOfImageAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager tiffDataOfImageAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager xattrOfItemAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager xattrOfItemAtPath:getValueForKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager xattrOfItemAtPath:hasValueForKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager xattrOfItemAtPath:removeValueForKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSFileManager xattrOfItemAtPath:setValue:forKey:]", 3)}, 0);
setTimeout(function(){hookObjC("-[ALAssetsGroup enumerateAssetsReverseKOrdered:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSDeviceProvider callTelPhone:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSDeviceProvider safePostNotification:object:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSWebPImageManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSWebPImageManager originImageUrlStrFromWebPImageUrl:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSWebPImageManager downloadImageWithURL:completed:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSWebPImageManager downloadImageUsingHTTPSWithURL:completed:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSWebPImageManager downloadImageWithURL:progress:completed:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSWebPImageManager downloadImageWithURL:progress:viaHTTPS:completed:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BNJSWebPImageManager HandleLogWithError:webPImageURL:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSWebPImageManager logSuccessTransformWithImageURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSWebPImageManager logFailTransformWithImageURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSWebPImageManager webPImageUrlFromOriginUrl:viaHTTPS:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSWebPImageManager queryDictWithOriginImageUrl:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSWebPImageManager cancelAll]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSWebPImageManager sdWebImageManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeProvider canOpenURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeProvider openURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeProvider redirectScheme:host:queryDictionary:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPRequestEventPlugin httpDispatcher:onRequestOpertion:emitEvent:withRequest:data:object:error:]", 7)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPRequestEventPlugin requestEventWillStartHandle:request:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPRequestEventPlugin requestEventDidStartHandle:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPRequestEventPlugin requestEventDidReceiveResponseHandle:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPRequestEventPlugin requestEventDidFinishReceiveDataHandle:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPRequestEventPlugin requestEventSuccessHandle:responseData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPRequestEventPlugin requestEventResponseSerializationSuccessHandle:operation:request:responseData:modelObject:]", 5)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPRequestEventPlugin requestEventFailHandle:operation:request:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPRequestEventPlugin requestEventResponseSerializationErrorHandle:operation:request:responseData:modelObject:error:]", 6)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPRequestEventPlugin checkHttpResponseStatusCode:errorCode:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPRequestEventPlugin postParametersDictionayToString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPRequestEventPlugin loggerData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPRequestEventPlugin speedHelper]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole mainWindow]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole resetLog]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole saveSettings]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole findAndResignFirstResponder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole infoAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole onscreenFrame]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole offscreenFrame]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole consoleShown]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole consoleHidden]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole keyboardWillShow:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole keyboardWillHide:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole logOnMainThread:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole textFieldDidEndEditing:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole textFieldShouldReturn:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole textFieldShouldClear:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole URLEncodedString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSConsole sharedConsole]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSConsole log:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSConsole info:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSConsole warn:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSConsole error:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSConsole crash:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSConsole log:args:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSConsole info:args:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSConsole warn:args:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSConsole error:args:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSConsole crash:args:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole saveLogToDisk]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole logLevel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole simulatorTouchesToShow]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole deviceTouchesToShow]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole simulatorShakeToShow]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole deviceShakeToShow]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole infoString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole inputPlaceholderString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole logSubmissionEmail]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole indicatorStyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConsole inputField]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSComponentCardManager shareManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentCardManager cardUrl:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentCardManager downloadComponentCardSuccess:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentCardManager downloadComponentCardFail:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentCardManager downloadComponentConfigFail:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentCardManager doCallback:compId:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentCardManager componentCardBlockDic]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSSchemeManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeManager handlerComponentAction:params:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeManager openNewComponentPage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeManager compNeedsLogin:params:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeManager hasConfigScheme:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeManager fetchRealScheme:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeManager reMappingScheme:newScheme:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeManager handlerScheme:withHandler:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeManager registeredHandlerScheme:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeManager canOpenURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeManager openURLInternal:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeManager openURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeManager ultimateUrl:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeManager openPageUrl:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeManager resetSchemePrefix:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeManager registerScheme:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeManager schemePrefix]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeManager schemeProvider]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeManager supportedScheme]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeManager handlerSchemeDitionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSSchemeManager remappingSchemeDitionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSCompNetworkAPIHelper defaultHelper]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSCompNetworkAPIHelper GET:serverType:respType:hybirdParams:isViaGlaxy:isViaHTTPS:success:failure:]", 8)}, 0);
setTimeout(function(){hookObjC("-[BNJSCompNetworkAPIHelper GET:serverType:respType:hybirdParams:withHeaders:withCachePolicy:onCache:isViaGlaxy:isViaHTTPS:success:failure:]", 11)}, 0);
setTimeout(function(){hookObjC("-[BNJSCompNetworkAPIHelper GET:serverType:respType:hybirdParams:withParameters:withHeaders:withCachePolicy:onCache:isViaGlaxy:isViaHTTPS:success:failure:]", 12)}, 0);
setTimeout(function(){hookObjC("-[BNJSCompNetworkAPIHelper POST:serverType:hybirdParams:withParameters:withHeaders:withBody:respType:isViaGlaxy:isViaHTTPS:success:failure:]", 11)}, 0);
setTimeout(function(){hookObjC("-[BNJSCompNetworkAPIHelper POST:serverType:hybirdParams:withParameters:withHeaders:withBody:respType:withCachePolicy:onCache:isViaGlaxy:isViaHTTPS:success:failure:]", 13)}, 0);
setTimeout(function(){hookObjC("-[BNJSCompNetworkAPIHelper request:httpMethod:serverType:hybirdParams:withParameters:withHeaders:withBody:respType:withCachePolicy:onCache:isViaGlaxy:isViaHTTPS:success:failure:]", 14)}, 0);
setTimeout(function(){hookObjC("-[BNJSCompNetworkAPIHelper finalParametersFromParameters:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSCompNetworkAPIHelper finalComponentParametersFrom:withComponentParamseters:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager addSkipCompBackupAttribute:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager loadCompConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager updateCompPageConfig:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager updateLocalValue:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager updateInUseValue:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager updateForCurrentValueWithModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager compLocalConfigPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager retainCountForComp:version:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager tryNotifyUserComponentHasNewVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager safePostNotification:object:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager safeDoCallback:result:urlString:compInfo:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager removeUselessLocalPackageWithCards:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager archiveLocalCompent]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager downloadedComp:comp:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager loadCompConfigFailed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager loadCompConfigSuccess:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager reloadFullComponentWithId:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager changeOperationQueuePriority:callback:isCard:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager cancelAndReloadDownloadOperation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager updateCompConfigModelForLazyLoad:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager cleanupOverduedCompPackage]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSComponentPackageManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager pageUrl:withPage:callback:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager cardUrl:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager updateCompOpenTimestampWithCompName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager openedComp:version:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager closedComp:version:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager loadWebCompConfigWithCache:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager loadWebCompConfigWithCache:becauseOfMissingCompID:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager pageNeedLogin:withPage:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager compVersionByCompId:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager pageUrl:inComponent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager cleanCompCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager fileManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager compHandleFileQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager compDictionaryRemote]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager compDictionaryInUse]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager uselessFolders]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager compConfigState]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager compConfigFileQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager compDictionaryLocal]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager compIdArrayForCurrent]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager compDictionaryForCurrent]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager compPageDictionaryInUse]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager compInUseRetainCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager compPageDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager loadWebCompConfigOperation]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageManager cancelCleanup]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSComponentBundledPackageManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentBundledPackageManager addBundledComponent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentBundledPackageManager bundledComponents]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPSSecurityPolicy evaluateServerTrust:forDomain:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPSSecurityPolicy dnsProxyDomain]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSProtocolHelper obtainCompidFromUserAgent:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSComponentPackageLoadQueue sharedQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadQueue addTask:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentPackageLoadQueue cancelTask:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSBase64 encodeData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSBase64 decodeData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSBase64 encodeBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSBase64 decodeBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSBase64 stringByEncodingData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSBase64 stringByEncodingBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSBase64 decodeString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSBase64 webSafeEncodeData:padded:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSBase64 webSafeDecodeData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSBase64 webSafeEncodeBytes:length:padded:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BNJSBase64 webSafeDecodeBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSBase64 stringByWebSafeEncodingData:padded:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSBase64 stringByWebSafeEncodingBytes:length:padded:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BNJSBase64 webSafeDecodeString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSBase64 baseEncode:length:charset:padded:]", 4)}, 0);
setTimeout(function(){hookObjC("+[BNJSBase64 baseDecode:length:charset:requirePadding:]", 4)}, 0);
setTimeout(function(){hookObjC("+[BNJSBase64 baseEncode:srcLen:destBytes:destLen:charset:padded:]", 6)}, 0);
setTimeout(function(){hookObjC("+[BNJSBase64 baseDecode:srcLen:destBytes:destLen:charset:requirePadding:]", 6)}, 0);
setTimeout(function(){hookObjC("+[BNJSCompNetworkDataHelper dictionaryFromResponseData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSCompNetworkDataHelper dictionaryAdjustFromResponseDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSNetworkDataHelper dictionaryFromResponseData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSNetworkDataHelper dictionaryAdjustFromResponseDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSConfigService defaultService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService loadSidList]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService loadCategoryListFilter]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService selectCityID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService locationCoordinate]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService enableDNSProxy]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService appKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService appVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService appChannel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService sidList]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService bundleIdForApplyAppKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService networkConfigProvider]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService compConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService notOpenWhenCompNotExistAndNotWifi]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService supportRotate]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService openAccess]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService addWifiPublic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService startSheme]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService schemeHandler]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService categroyListModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService disableNop]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService disableHttps]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService webPProxy]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSConfigService dnsProxyProvider]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSNetworkProvider postRequest:complete:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSNetworkProvider postNARequest:complete:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSNetworkProvider doSignWithSource:customerId:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSNetworkProvider doSignWithParameters:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSNetworkProvider addHTPPHeaderUA:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSNetworkProvider nopSeverceAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSNetworkProvider nopSeverceAddressPath]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSDownloader downloadData:withProgrogressBlock:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSDownloader startDownloadData:withProgrogressBlock:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSDownloader waitForDowloadToFinishLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSDownloader backgroundSession]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSDownloader URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:]", 5)}, 0);
setTimeout(function(){hookObjC("-[BNJSDownloader URLSession:downloadTask:didFinishDownloadingToURL:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSDownloader URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BNJSDownloader URLSession:task:didCompleteWithError:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSDownloader URLSessionDidFinishEventsForBackgroundURLSession:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSDownloader downloadTask]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSDownloader downloadProgressBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSDownloader downloadData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSDownloader downloadDidFinishLoading]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSSecurityManager defaultSecutity]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSSecurityManager loadLocalSecruityConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSSecurityManager writeLocalSecruityConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSSecurityManager reloadComponentSecutity:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSSecurityManager securityArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSSecurityManager securityComps]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSDNSProxyProvider checkIpMapExpireOnSendRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSDNSProxyProvider optimumIpForDomain:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSDNSProxyProvider addIp:withDomain:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSDNSProxyProvider addIpIntoFailurePool:withDomain:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSDNSProxyProvider clearIpMap]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSDNSProxyProvider renewIpMap]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSCookieHelper urlCookieWithURLString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSCookieHelper urlCookieWithURL:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSCookieHelper httpCookieWithName:value:domain:path:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPResponseSerializer objectFromResponseData:withRequest:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPResponseSerializer shouldCacheResponseDataByObjcet:withRequest:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSGTMBase64 encodeData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSGTMBase64 decodeData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSGTMBase64 encodeBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSGTMBase64 decodeBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSGTMBase64 stringByEncodingData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSGTMBase64 stringByEncodingBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSGTMBase64 decodeString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSGTMBase64 webSafeEncodeData:padded:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSGTMBase64 webSafeDecodeData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSGTMBase64 webSafeEncodeBytes:length:padded:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BNJSGTMBase64 webSafeDecodeBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSGTMBase64 stringByWebSafeEncodingData:padded:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSGTMBase64 stringByWebSafeEncodingBytes:length:padded:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BNJSGTMBase64 webSafeDecodeString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSGTMBase64 baseEncode:length:charset:padded:]", 4)}, 0);
setTimeout(function(){hookObjC("+[BNJSGTMBase64 baseDecode:length:charset:requirePadding:]", 4)}, 0);
setTimeout(function(){hookObjC("+[BNJSGTMBase64 baseEncode:srcLen:destBytes:destLen:charset:padded:]", 6)}, 0);
setTimeout(function(){hookObjC("+[BNJSGTMBase64 baseDecode:srcLen:destBytes:destLen:charset:requirePadding:]", 6)}, 0);
setTimeout(function(){hookObjC("-[BNJSNetworkConfigProvider netWorkUsingHTTPSProtocol]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSNetworkConfigProvider addHTTPSRequestFailureCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSNetworkConfigProvider configNopEnable]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSNetworkConfigProvider usingNopForBaseURL:path:nopMethod:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BNJSWebViewPageMessageUidManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSWebViewPageMessageUidManager generatePageMessageUid]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSWebViewPageMessageUidManager addListener:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSWebViewPageMessageUidManager removeListener:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSWebViewPageMessageUidManager lastListenerExcept:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPSConfigPlugin usingHTTPS]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPSConfigPlugin addCountOnHTTPSRequestFailure:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPRequestSerializer doSignWithParameters:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPRequestSerializer requestURLStringByBaseURL:withRequest:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPRequestSerializer requestHeadersByRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPRequestSerializer requestParametersByBaseURL:withRequest:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPRequestSerializer excludeParameterKeys]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSHTTPRequestSerializer naserverDefaultParameters]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPRequestSerializer commonParametersCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSHTTPRequestSerializer excludeCommonParameterKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSComponentCardProvider load:complete:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache cachePathForGroup:inPath:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache cachePathForKey:inPath:withGroup:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache defaultCachePathForGroup:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache defaultCachePathForKey:withGroup:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache cachedFileNameForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache storeCachedData:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache storeCachedData:forKey:withGroup:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache storeCachedData:forKey:complete:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache storeCachedData:forKey:toDisk:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache storeCachedData:forKey:withGroup:toDisk:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache storeCachedData:forKey:withGroup:toDisk:complete:]", 5)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache diskCacheDataExistsForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache diskCacheDataExistsForKey:withGroup:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache queryDiskCacheForKey:done:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache queryDiskCacheForKey:withGroup:done:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache cachedDataFromMemoryForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache cachedDataFromDiskForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache cachedDataFromDiskForKey:withGroup:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache lastModifyDateOfCacheDataForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache lastModifyDateOfCacheDataForKey:withGroup:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache removeCachedDataForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache removeCachedDataForKey:complete:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache removeCachedDataForKey:fromDisk:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache removeCachedDataFromDiskForGroup:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache removeCachedDataForKey:withGroup:fromDisk:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache removeCachedDataForKey:withGroup:fromDisk:complete:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache clearMemory]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache clearAllDiskCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache clearAllDiskCacheWithCompletionBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache backgroundCleanDisk]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache usingMemoryCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache memoryCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache diskCachePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache customPaths]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache fileManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSCache ioQueue]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSDNSProxyHelper sharedHelper]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSDNSProxyHelper optimumIpForDomain:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSDNSProxyHelper addIp:withDomain:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSDNSProxyHelper addFailureCounter:withDomain:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSDNSProxyHelper addIpIntoFailurePool:withDomain:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BNJSDNSProxyHelper clearIpMap]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSDNSProxyHelper renewIpMap]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSDNSProxyHelper doOnApplicationResume]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSDNSProxyHelper checkIpMapExpireOnSendRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSDNSProxyHelper mapURLToIpAdress:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BNJSDNSProxyHelper lastRenewDate]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSDNSProxyHelper cacheDomainIpMap]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSDNSProxyHelper cacheFailureIpPool]", 0)}, 0);
setTimeout(function(){hookObjC("-[BNJSDNSProxyHelper cacheAllDomainIpMap]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSCommonFun connectedWifiSSID:mac:sig:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BNJSCommonFun commonFilterPublicParams:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSOpenUDID _setDict:forPasteboard:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BNJSOpenUDID _getDictFromPasteboard:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BNJSOpenUDID _generateFreshOpenUDID]", 0)}, 0);
setTimeout(function(){hookObjC("+[BNJSOpenUDID valueWithError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatRSAEncryptor loadPublicKeyFromData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatRSAEncryptor loadPrivateKeyFromData:password:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatRSAEncryptor rsaEncryptString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatRSAEncryptor rsaEncryptData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatRSAEncryptor rsaDecryptString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatRSAEncryptor rsaDecryptData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatRSAEncryptor rsaSHA1VerifyData:withSignature:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatPv endWithExtraInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatPv descriptionDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatObject descriptionDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatSession deletePageViews]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatSession descriptionDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatException descriptionDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatExtraInfo descriptionDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatPr descriptionArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatPr sessionArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager asyncGetLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager locationManager:didUpdateToLocation:fromLocation:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager locationManager:didUpdateLocations:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager locationManager:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BaiduMobStatLogManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager checkGetLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager encryData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager gzipInflate:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager gzipDeflate:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager checkHeaderBeforeSendLog:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager putLocationInfomation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager _syncPutLocation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager putSession:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager syncPutSession:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager putEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager syncPutEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager putException:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager putSingleException:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager syncPutSingleException:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager sendLog:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager _syncSendAllLog]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager _syncSendLog:loadHeaderInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager syncSaveLogToOld:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager saveLogToOldAndCreatNewLog:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager saveLogToOld:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager lastSendTimestamp]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager logSentIndexPerSession]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatLogManager resetLogSentIndexPerSession]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduMobStatDeviceInfo totalDiskSpace]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduMobStatDeviceInfo SIStatu]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduMobStatDeviceInfo deviceName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatEx descriptionArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatEx exceptionArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduMobStatAESEncryption originalData:AES256EncryptWithKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BaiduMobStatAESEncryption originalData:AES256DecryptWithKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BaiduMobStatAESEncryption originalData:AES256CBCEncryptWithKey:ivector:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BaiduMobStatAESEncryption originalData:AES256CBCDecryptWithKey:ivector:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BaiduMobStatAESEncryption base64DataFormString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduMobStatAESEncryption base64StringFromData:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BaiduMobStatAESEncryption randomString]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduMobStatAESEncryption SHAString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduMobStatReachability reachabilityWithHostName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduMobStatReachability reachabilityWithAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduMobStatReachability reachabilityForInternetConnection]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatReachability startNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatReachability stopNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatReachability networkStatusForFlags:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatReachability connectionRequired]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatReachability currentReachabilityStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatEv descriptionArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatEv eventArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatExceptionHandler handleException:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduMobStatExceptionHandler registerUncaughtExceptionHandler]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduMobStatExceptionHandler unregisterUncaughtExceptionHandler]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduOpenUDID _setDict:forPasteboard:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BaiduOpenUDID _getDictFromPasteboard:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduOpenUDID _generateFreshOpenUDID]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduOpenUDID valueWithError:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduMobStatRequestManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatRequestManager startWithAppKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatRequestManager configFilePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatRequestManager newConfigDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatRequestManager doConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatRequestManager updateConfigRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatRequestManager sendConfigRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatRequestManager connection:canAuthenticateAgainstProtectionSpace:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatRequestManager connection:willSendRequestForAuthenticationChallenge:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatRequestManager connection:didReceiveResponse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatRequestManager connection:didReceiveData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatRequestManager connectionDidFinishLoading:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatRequestManager connection:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatRequestManager appKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatRequestManager SHAString]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduUDID macAddress]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduUDID adString]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduUDID vdString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatHe descriptionDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduMobStatEvent descriptionDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderDetailsRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderDetailsRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderDetailsRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderDetailsRequest order_id_unique]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMyTradeAssociatedOrderlist updateWithModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMyTradeAssociatedOrderlist orderDetail]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSHA1MD5 md5:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSHA1MD5 sha1:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalance balance_trans_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalance balance_select_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalance balance_jump_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTextField canPerformAction:withSender:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTextField placeholderRectForBounds:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTextField placeHolderInsets]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTextField textFieldMenuVisible]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCommonChargeRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCommonChargeRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCommonChargeRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCommonChargeRequest channelNum]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCommonChargeRequest order_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCommonChargeRequest phone_number]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCommonChargeRequest charge_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPassfreeSendSMSRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPassfreeSendSMSRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBSCPayResultAuthInfo need_verify]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBSCPayResultAuthInfo display_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBSCPayResultInfo score_tip]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBSCPayResultInfo bank_send_trans_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBSCPayResultInfo auth_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationFactory createLauncherApplication]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationFactory createWithName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationFactory createWithConfig:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCSendSMSSendInfo sp_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCSendSMSSendInfo order_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCSendSMSSendInfo pay_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCSendSMSSendInfo pay_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBindCardRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBindCardRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBindCardRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBindCardRequest cardInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBindCardRequest request_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBindCardRequest backEndServiceTypeMark]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletTrackerImplV2 sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 dealEvent]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 aspect:conditionProcessProperty:config:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 aspect:conditionProcessArguments:config:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 hookByConfig:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 dictionaryForConfig:chooseCondition:specValue:aspect:conditionObjec:]", 5)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 requestStart:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 handleRequest:isStart:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 requestFinished:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 requestFailed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 findConfigForRequestUrlPath:endPath:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 findConfigForRequest:endPath:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 triggerTrackerPoint]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 enterTrackerPayEvent]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 addEventByEventName:eventValues:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 addEventByEventName:eventValues:abType:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 didAddEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 didfinishLaunching:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 didEnterBackground:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 didBecomeActive:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 didUpdatedStrategy:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 trackerManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 csManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 configRequestMaps]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 requestDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 trackerQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 tmpVistedPage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerImplV2 aspectIdentifiers]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCommonLogicConstant pathOfSettingsBundleContent]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCommonLogicConstant registerDefaultsFromSettingsBundle]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCommonLogicConstant shareConstant]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCommonLogicConstant encodeURL:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCommonLogicConstant toStringWithObj:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCommonLogicConstant toClass:obj:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCommonLogicConstant loadPayApiHost]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCommonLogicConstant payApiHttpsHost]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCommonLogicConstant lifeApiHttpsHost]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCommonLogicConstant polymerPayApiHttpsHost]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCommonLogicConstant scanBarcodeShortURLHost]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCommonLogicConstant payApiHttpHost]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferArriveType type_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferArriveType type_value]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferArriveType type_arrive_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferArriveType type_arrive_msg_hl]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletTransferArriveInfo modelContainerPropertyGenericClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferArriveInfo arrive_explain]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferArriveInfo maintain_explain]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferArriveInfo arrive_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferArriveInfo default_type_value]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferArriveInfo choose_explain]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTRequestOperation onError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWTRequestOperation onSuccess:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWTRequestOperation loadCookiesTORequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWTRequestOperation requestID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTRequestOperation successBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTRequestOperation failureBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerPage uploadDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerPage pageName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerPage pageType]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletOTPManager xorEncryptForPlainText:key:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWalletOTPManager xorDecryptForEncryption:key:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWalletOTPManager bdWalletSaveOTPToken:uid:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWalletOTPManager bdWalletGetOTPToken:keyChainSeed:keyChainKey:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BDWalletOTPManager bdWalletSaveOTPInfo:uid:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWalletOTPManager bdWalletGetOTPInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletOTPManager bdWalletIsExistOTPInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletOTPManager bdwalletCleanOTPInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletOTPManager bdWalletUpdatePolicyDomainState:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletOTPManager bdWalletGetPolicyDomainState]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCollectionCodeLogic sharedLogic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionCodeLogic cancelCollectionQRCodeRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionCodeLogic cancelRecvListRequest]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCollectionCodeLogic loginIdmd5]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCollectionCodeLogic writeCacheCollectionQRCode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCollectionCodeLogic readCacheCollectionQRCodeWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCollectionCodeLogic hasCachedCollectionQRCode]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCollectionCodeLogic removeCollectionQRCodeCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionCodeLogic recvListRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletServiceManager registerServiceFromConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletServiceManager registerService:forName:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletServiceManager registerService:forName:lazyLoading:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletServiceManager unregisterServiceForName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletServiceManager findServiceByName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletServiceManager startReadyService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletServiceManager serviceMap]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo orderInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo bindParamInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo requestType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo sp_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo order_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo total_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo mobile_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo mobile_lock_idt]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo noise_value]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo without_pay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo goodsDesc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo goodsName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo goods_category]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo order_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo h5CashDeskUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo cashdesk_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo deposit_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo discount_flag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo pay_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo activity_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo coupon_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo postInfoDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo couponArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo promotion_txt]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo sp_company]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo amount_user_pay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo hasDiscount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo discountArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo easyPayDict]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo first_sp_id_tpl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo sp_uno]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo trans_need_to_pay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo seller_user_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo cashierType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo needAdvancePay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo payPostInfoItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo spInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo sessionItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo sp_voice_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo verify_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo session_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo pure_sign]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo sp_user_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo contract_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletOrderInfo backEndServiceTypeMark]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBankCardProtocolInfo lastSeparator]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBankCardProtocolInfo bankCardProtocolInfoItemArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFindPasswordGetVcodeRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFindPasswordGetVcodeRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFindPasswordGetVcodeRequest card_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFindPasswordGetVcodeRequest accounBankCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletConfigURLImpl skipDocumentDirectoryBackupToiCloud]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletConfigURLImpl useCrashCollectURLHost:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletConfigURLImpl usePublic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletConfigURLImpl useCustom:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletConfigURLImpl useTure]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletConfigURLImpl registerDefaultsFromSettingsBundle]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPasswordManager checkMobilePassword:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPasswordManager modifyMobilePassword:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPasswordManager resetMobileBySMSPassword:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPasswordManager resetMobilePassword:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPasswordManager verifyMobilePassword:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPasswordManager checkPCPassword:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPasswordManager cancelCheckPCPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPasswordManager realnameCheckPasswordwithRequest:withBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPasswordManager cancelRealNameCheckPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic shouldUpdatedDefaultPay:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic defaultPayModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic changePayCallbackDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic changePayMethodParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic currentPayType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic currentCardNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic currentBankCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic changePayMethodExtendParam]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic validateDefaultPayTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic loadingDone]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic requestGetPayMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic requestGetPayMethodWithCardNo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic payBankName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic payBankCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic payBankNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic payBankIconURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic requestedDefaultPay:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic currentDefaultPaySatte]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic defaultPayDataWithState:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic hasNoQuota]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic easyPayCardSignleQuota]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic balancePaySingleQuota]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic spCardQuota]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic singleLimit]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic singleBalanceLimit]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic dayQuota]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic dayQuotaBalance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic monthLimit]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic monthBalanceLimit]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic productQuota]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic productQuotaExplain]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic spBalanceQuota]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic starkAccountBalanceLimit]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic floatWithString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic jumpToStarkAccountUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic fengKongXianEWithAmount:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic tongDaoXianEAlertWithAmount:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic xianETipDataWithAmount:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic riskManagAmount:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic bankCardManagAmount:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic xianEURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic easyPayCard]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic balancePay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic payModeUpdateBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic defaultPayState]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic hasRequested]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferPayModeLogic defaultPayTimer]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletCheckNetwork checkNetWorkIsOk]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletCheckNetwork checkIsWifiNewWork]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletCheckNetwork checkNetworkStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayMobilePasswordModifyRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayMobilePasswordModifyRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayMobilePasswordModifyRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayMobilePasswordModifyRequest passwordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterFPSetingServiceImpl createService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterFPSetingServiceImpl enterFingerprintSettingWithRootController:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponListRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponListRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponListRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponListRequest pageIndex]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponListRequest filterState]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSendSMSByODPRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSendSMSByODPRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSendSMSByODPRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSendSMSByODPRequest sp_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSendSMSByODPRequest order_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSendSMSByODPRequest pay_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSendSMSByODPRequest session_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_CloseBScanCRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_CloseBScanCRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_CloseBScanCRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest needCheckVcode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest request_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest card_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest true_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest identity_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest identity_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest phone_number]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest card_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest valid_date]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest channel_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest without_pay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest need_cvv2]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest need_phone_num]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest need_valid_date]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest sp_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest order_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest total_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest sub_bank_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest balance_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest easypay_channel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest activity_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest coupon_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest pay_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest balance_pay_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest composite_flag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest hd_tag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest session_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest session_content]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest card_no_bind]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest session_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest pure_sign]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest source_flag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckCardInfoRequest backEndServiceTypeMark]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceWithdrawApplyQueryRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceWithdrawApplyQueryRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWKeyboardProxy removeKeyboardNotification]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWKeyboardProxy addKeyboardNotification]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWKeyboardProxy keyboardWillShow:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWKeyboardProxy keyboardWillHide:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWKeyboardProxy keyboardNotiSelector:isShow:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWKeyboardProxy keyboardBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferOrderResponse jump_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferOrderResponse err_field]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayWebHandler handleURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayWebHandler handleNotifySuccessWithInfos:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayWebHandler paySuccess]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayWebHandler resultInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionCodeLogic enterColloctionCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionCodeLogic startCollectionCodeApplication:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionCodeLogic statisticsRealnameWindow]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionCodeLogic statisticsRealnameWindowGo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionCodeLogic statisticsRealnameWindowCancel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderListRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderListRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderListRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderListRequest sendInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionRecvListRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionRecvListRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionRecvListRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSchemePayInfo valueForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSchemePayInfo ordreInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSchemePayInfo bgImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSchemePayInfo originAppUserInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSchemePayInfo originAppInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferIdentifyCardInfoResult bank_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferIdentifyCardInfoResult bank_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferIdentifyCardInfoResult bank_code_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferIdentifyCardInfoResult cardNo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferIdentifyCardResult card_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferIdentifyCardResult arrive_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletDigestResult resText]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletDigest digestUsingAlgorithm:data:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletDigest MD5:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletDigest SHA1:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletDigest SHA224:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletDigest SHA256:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletDigest SHA384:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletDigest SHA512:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletIdentityCodeVerifyRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletIdentityCodeVerifyRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletIdentityCodeVerifyRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletIdentityCodeVerifyRequest true_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletIdentityCodeVerifyRequest certificate_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerEvent uploadContent]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerEvent updateContentByRequest:isStart:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerEvent eventType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerEvent pageId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerEvent eventId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerEvent requestPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerEvent endPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerEvent eventValueQuery]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerEvent requestValueQuery]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerEvent internalDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayActiveCompleteRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayActiveCompleteRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayActiveCompleteRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayActiveCompleteRequest cardInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferRecvActionRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferRecvActionRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferRecvActionRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferRecvActionRequest sendInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPaymentResultSaveFeedbackInfo trans_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPaymentResultSaveFeedbackInfo tag_list]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToAccountCheckNameRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToAccountCheckNameRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToAccountCheckNameRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToAccountCheckNameRequest check_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferUpdateRecvNaRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferUpdateRecvNaRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferUpdateRecvNaRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferUpdateRecvNaRequest order_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferUpdateRecvNaRequest transfer_state]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterFreePasswordSetingServiceImpl createService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterFreePasswordSetingServiceImpl enterFreePasswordSettingWithRootController:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterFreePasswordSetingServiceImpl RequestPassFreeInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterFreePasswordSetingServiceImpl refreshData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterFreePasswordSetingServiceImpl beginRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterFreePasswordSetingServiceImpl passwordManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterFreePasswordSetingServiceImpl rootVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterFreePasswordSetingServiceImpl fromFreePassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterFreePasswordSetingServiceImpl hasPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterFreePasswordSetingServiceImpl managerPasswordVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterFreePasswordSetingServiceImpl bindArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterFreePasswordSetingServiceImpl userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletFPSettingUtil checkDeviceFingerprintContext]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletFPSettingUtil fingerprintInfoIsExist:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletFPSettingUtil closeFingerPayIsExist]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletFPSettingUtil verify:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWalletFPSettingUtil policyDeviceOwnerUNLock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletFPSettingUtil openFingerprintPay:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWalletFPSettingUtil closeFingerprintPay:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWalletFPSettingUtil updateTouchIDLoaclState]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo userName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo displayName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo trueName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo identityCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo identityType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo mobileNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo hasPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo mobilePassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo can_use_pcpwd_verify]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo user_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo can_bind_card_flag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo bank_card_detect_enabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo applyCreditCardArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo bandCardArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo pay_type_default]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo login_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo need_pay_password]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo passfree_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo passfree_selected]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo fromPCSettingPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo balance_support_status]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo balance_unsupport_reason]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo enable_fingerprint]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo f_token_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo f_serial_num]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo nameDisPlayType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo phoneDisPlayType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo identityCodePlayType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo detainmentDesc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo selected_card_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo stark_auth_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo stark_balance_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo stark_account_level]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo auth_status]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfo authorize_display_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletWeakTimerProxy timerFired:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletWeakTimerLifecycleTracker timerProxy]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSecurityCenterManager sharedSecurityCenterManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterManager cancelBizRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterManager queryPassfreeWithComplete:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterManager cancelSetPassfreeRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[ModifyMobilePasswordInfo mobile_pass]", 0)}, 0);
setTimeout(function(){hookObjC("-[ModifyMobilePasswordInfo mobile_pass_confirm]", 0)}, 0);
setTimeout(function(){hookObjC("-[ModifyMobilePasswordInfo sess_key]", 0)}, 0);
setTimeout(function(){hookObjC("-[ModifyMobilePasswordInfo sms_token]", 0)}, 0);
setTimeout(function(){hookObjC("-[ModifyMobilePasswordInfo cardInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[ModifyMobilePasswordInfo pc_pwd]", 0)}, 0);
setTimeout(function(){hookObjC("-[ModifyMobilePasswordInfo backEndServiceTypeMark]", 0)}, 0);
setTimeout(function(){hookObjC("-[ModifyMobilePasswordInfo backEndRequestTypeMark]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletOfflineBScanCOTPManager bdWalletSaveOTPToken:keyChainToken:keyChainSeed:keyChainKey:]", 4)}, 0);
setTimeout(function(){hookObjC("+[BDWalletOfflineBScanCOTPManager bdWalletSaveOTPInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletOfflineBScanCOTPManager bdWalletGetOTPTokenCode]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletOfflineBScanCOTPManager bdwalletCleanOTPInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletOfflineBScanCOTPManager bdWalletIsExistOTPTokenCode]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletOfflineBScanCOTPManager bdWalletBScanCEncryptCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField customTextField]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField needShowSecurityKeyboard]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField becomeFirstResponder]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField resignFirstResponder]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField canBecomeFirstResponder]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField canPerformAction:withSender:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField placeholderRectForBounds:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField accessoryResignFirstResponder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField plainText]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField changeKeyBoardType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField dicToProperty:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField textRectForBounds:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField editingRectForBounds:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField observeValueForKeyPath:ofObject:change:context:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField placeHolderInsets]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField forbidSecurityKeyboard]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField confirmBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField bText]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField bHolder]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField bRadius]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField bBorderRadius]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField waringBorder]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField numberPad]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField textFieldMenuVisible]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeboardTextField numberPadType]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletHttpRequest requestWithURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletHttpRequest requestStarted]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletHttpRequest requestFinished]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletHttpRequest failWithError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter figurePrintSwitchChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter verPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter beginRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter handleUserInfoResult:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter leaveWallet:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter closeFingerprintIsExist]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter handleCloseFingerprintResult:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter openFingerPrignt]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter openFingerprintPayWithVerfy]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter openFingerprintPay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter handleOpenFingerprintResult:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter BDWalletBindSuccessed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFigurePrintPresenter BDWalletResetPasswordSuccessed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassPresenter openPassFree]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassPresenter fetchUserInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassPresenter toExternalVerPassword:mobile:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassPresenter checkSMS:password:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassPresenter savePassFreeSettingsWithPassword:code:mobile:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassPresenter verificationComplete:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassPresenter normalizeAccount:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassPresenter threePassVer:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassPresenter leaveWallet:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassPresenter freePasswordSwitchChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassPresenter smsVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayComplianceAntiMoneyLaundering after_pay_identity]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayComplianceAntiMoneyLaundering auth_msg]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletAddressBookUtil formatedPhone:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAddressBookUtil didPeopleInfoWithController:withSelectingPerson:property:identifier:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAddressBookUtil addressBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAddressBookUtil hasRequestPression]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransCancelRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransCancelRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransCancelRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransCancelRequest sendInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletBScanCLogic sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletBScanCLogic allocWithZone:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic queryBScanCResult:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic cancelQueryBScanC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic openBScanC:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic cancelOpenBScanC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic createBScanC:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic cancelCreateBScanC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic pushBScanCPayResult:lastCode:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic cancelPushBScanCPayResult]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic closeBScanC:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic cancelCloseBScanC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic pushQueryRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic closeRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic createBScanCRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic openRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic queryRequest]", 0)}, 0);
setTimeout(function(){hookObjC("+[TrackerConfigFileAdapter sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[TrackerConfigFileAdapter detechVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[TrackerConfigFileAdapter currentConfigFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[TrackerConfigFileAdapter bundleConfigContent]", 0)}, 0);
setTimeout(function(){hookObjC("-[TrackerConfigFileAdapter tryToUpdateConfigWithFinishedBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TrackerConfigFileAdapter startDownloadConfigFile:withFinishedBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetMobileRechargePromotionRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetMobileRechargePromotionRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetMobileRechargePromotionRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetMobileRechargePromotionRequest promotion_img_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetMobileRechargePromotionRequest promotion_txt]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetMobileRechargePromotionRequest promotion_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetMobileRechargePromotionRequest promotion_detail_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest request_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest card_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest card_no_bind]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest source_flag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest first_sp_id_tpl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest sp_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest sp_uno]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest trans_need_to_pay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest seller_user_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest total_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest balance_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest need_calc_balance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest sub_bank_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest easypay_channel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest order_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest easypay_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest session_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest couponDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest session_content]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest activity_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest coupon_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest pure_sign]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayGetCardInfoRequest backEndServiceTypeMark]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPublicUtil applyConstraintByStringsAndOption:strArray:viewsDic:autoAdapter:option:]", 5)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealnameVerifySMSRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealnameVerifySMSRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealnameVerifySMSRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealnameVerifySMSRequest phone_vcode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetTransferToAccountInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetTransferToAccountInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetTransferToAccountInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest source_flag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest first_sp_id_tpl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest sp_uno]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest trans_need_to_pay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest seller_user_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest total_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest score_trans_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest score_pay_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest balance_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest need_calc_balance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest pay_quota_balance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest easypay_channel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest need_calc_umoney]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest umoney_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest card_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest pay_bank_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCalculatingMoneyRequest couponDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRootListItemObj ID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRootListItemObj s_icon]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRootListItemObj l_icon]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRootListItemObj hot_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRootListItemObj hot_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRootListItemObj hot_image]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCOfflineTokenRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCOfflineTokenRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCOfflineTokenRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCOfflineTokenRequest offlineToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCOfflineTokenRequest mobilePwd]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealnameCheckPasswordRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealnameCheckPasswordRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealnameCheckPasswordRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealnameCheckPasswordRequest true_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealnameCheckPasswordRequest certificate_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealnameCheckPasswordRequest mobile_pwd]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealnameCheckPasswordRequest confirm_mobile_pwd]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferResultRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferResultRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferResultRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferResultRequest order_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToBankUserNameCheckRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToBankUserNameCheckRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToBankUserNameCheckRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToBankUserNameCheckRequest payee_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToBankUserNameCheckRequest payee_bank_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToBankUserNameCheckRequest payee_bank_num]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToBankUserNameCheckRequest id_tpl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToBankUserNameCheckRequest payer_bank_num]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSSKeychainQuery save:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSSKeychainQuery deleteItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSSKeychainQuery fetchAll:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSSKeychainQuery fetch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSSKeychainQuery passwordObject]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSSKeychainQuery errorWithCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSSKeychainQuery passwordData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSSKeychainQuery accessGroup]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSSKeychainQuery synchronizationMode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPointsRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPointsRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPointsRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferDeleteRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferDeleteRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferDeleteRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferDeleteRequest id_tpl]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletRealNameAuthManager allocWithZone:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager doPrePasshWithRootVC:params:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager doRNAuthWithRootVC:authGrade:params:block:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager enterAuthLogic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager enterRealNameAuthWhenRealFailed]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager realNameFailedWithError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager enterRealNameVerifyPassword:currentVC:withisSendSMS:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager realNameCheckPass:withBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager enterCertificateCheck:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager shouldFinishAfterStep1WithErrorCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager shouldFinishAfterStep2]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager shouldFinishAfterStep3]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager shouldEnterStep2]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager shouldEnterStep3]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager shouldEnterResultPage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager tryToEnterStep2]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager tryToEnterStep3]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager enterCardInfoCheck:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager enterManualAuditWithCurrentVC:sender:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager enterRealResultWithCurrentVC:sender:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager paserUserModelWithContent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager cancelLeaveRealNameAuth:isExitNav:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager successedLeaveRealNameAuth:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager confirmBankCardFinished]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager authApplyFinished]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager idScanSuccessComplete:withOpposite:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager cleanPayMainManagerData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager cleanRealNameData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager handleSkipFromStep:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager authInParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager rootVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager currentVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager curAuthUserModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager realNameBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager idScan]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameAuthManager nciicAuthErrorCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFPCloseOtpRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFPCloseOtpRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFPCloseOtpRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletTrackerNewEvent makeWithPageStartByPageName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletTrackerNewEvent makeWithPageBackByPageName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletTrackerNewEvent makeWithPageEndByPageName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletTrackerNewEvent makeWithPagePushByPageName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletTrackerNewEvent makeWithDic:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewEvent uploadContent]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewEvent addEventValue:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewEvent addEventValue:withIndex:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewEvent addEventValues:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewEvent eventKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewEvent eventValues]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewEvent eventLinkedWay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewEvent increId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewEvent abType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMobileRechargePayResultRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMobileRechargePayResultRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMobileRechargePayResultRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMobileRechargePayResultRequest chargeType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMobileRechargePayResultRequest orderNo]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWConnectApplication shareApplication]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWConnectApplication urlSchemePrefix]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWConnectApplication valueForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWConnectApplication dictionaryWithAllValues]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWConnectApplication urlScheme]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWConnectApplication sdkVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWConnectApplication appId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWConnectApplication urlSchemePrifix]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPrePassInfo modelCustomTransformFromDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPrePassInfo needStep]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPrePassInfo process_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPrePassInfo need_step]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPrePassInfo ret_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPrePassInfo last_step]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPrePassInfo step_cfg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPrePassInfo title_item_cfg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPrePassInfo def_skip_tips]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPrePassInfo not_ex_skip_tips]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerContext findContextValueByKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerContext clearKeyAndValues]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerContext internalDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransAccountCancelRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransAccountCancelRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransAccountCancelRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransAccountCancelRequest sendInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBootLoader startForSafePayOnly]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_QueryBScanCRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_QueryBScanCRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_QueryBScanCRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletBalanceManager allocWithZone:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletBalanceManager sharedBalanceManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceManager requestWithdrawDataWithCompletion:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceManager cancleWithdrawDataRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceManager requestStartWithdrawWithAmount:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceManager cancleStartWithdrawRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceManager requestRechargeQuotaWithAmount:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceManager cancleBalanceQuotaRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceManager requestRechargePromptWithCompletion:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceManager withdrawApplyQueryReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceManager startWithDrawRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceManager rechargeQuotaRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBSCPayBScanCRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBSCPayBScanCRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBSCPayBScanCRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBSCPayBScanCRequest payInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBSCPayBScanCRequest trans_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 becomeFirstResponder]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 removeTextFiled]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 resetTitleLength:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 resetTitleOringY:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 resetTitleOriginX:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 changeTextFieldToSecurityTextField]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 textField:shouldChangeCharactersInRange:replacementString:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 textFieldDidBeginEditing:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 textFieldDidEndEditing:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 textFieldShouldClear:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 needHideKeyBoard]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 clearTextField]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 focusTextField]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 textFieldShouldReturn:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 resultText]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 addTextFieldChangeNotification]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 removeTextFieldChangeNotification]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 textFieldChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 observeValueForKeyPath:ofObject:change:context:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 didChange:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 cardNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 bankUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 clearBankInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 detailTextField]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 titleText]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 detailText]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 detailAttributeText]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferInputViewV2 menuVisible]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayMobilePasswordCheckRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayMobilePasswordCheckRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayMobilePasswordCheckRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayMobilePasswordCheckRequest passwordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPrivacyServiceImpl privacyOpenKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPrivacyServiceImpl resetShowMark:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPrivacyServiceImpl clearPrivacySecurity]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPrivacyServiceImpl resetPrivacySecurity:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPrivacyServiceImpl fetchLoginID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPrivacyServiceImpl privacyService]", 0)}, 0);
setTimeout(function(){hookObjC("+[AileenLogger logContent:toFileName:]", 2)}, 0);
setTimeout(function(){hookObjC("+[LXNetKit sendAsynchronousSessionUrl:HTTPMethod:param:complate:field:]", 5)}, 0);
setTimeout(function(){hookObjC("+[LXNetKit sendAsynchronousUrlString:HTTPMethod:param:complate:field:]", 5)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletUserInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletUserInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletUserInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletUserInfoRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletUserInfoRequest orderInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletUserInfoRequest pay_type_default]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderListSendInfo order_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderListSendInfo through_data]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSecurityKeyboardConfig numberPadFrame]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSecurityKeyboardConfig numberPadBackgroundImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSecurityKeyboardConfig accessoryFrame]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSecurityKeyboardConfig accessoryLogoFrameWithAccessoryFrame:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSecurityKeyboardConfig accessoryIconFirstImge]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSecurityKeyboardConfig accessoryIconSecondImge]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSecurityKeyboardConfig accessoryTitleFrameWithAccessoryFrame:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSecurityKeyboardConfig accessoryArrFrameWithAccessoryFrame:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSecurityKeyboardConfig accessoryArrImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSecurityKeyboardConfig accessoryTitleName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBindResult activity_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBindResult retMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBindResult card_no]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWallet_BScanCManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCManager halfVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCManager sdkRootController]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletLivenessUtil shareInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletLivenessUtil accessLivenessWithParams:rootVC:finishBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletLivenessUtil statLivingResultSuccess]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletLivenessUtil statLivingResultFailWithCode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletGetIPAddress BDWallet_IPAdressFromDomain:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletGetIPAddress BDWallet_GetIPAddresses]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletGetIPAddress BDWallet_GetIPAddressWithPreferedTypes:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletGetIPAddress BDWallet_GetIPAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletGetIPAddress BDWallet_GetIPAddressv4]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletGetIPAddress whatismyipdotcom:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletGetIPAddress localWiFiIPAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAccountInfo balance_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAccountInfo freeze_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAccountInfo virtual_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAccountInfo can_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAccountInfo available_withdraw_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAccountInfo recv_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAccountInfo recv_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAccountInfo score_num]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAccountInfo can_cash]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAccountInfo return_cash_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAccountInfo return_cash_content]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_AudioRecordManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_AudioRecordManager checkMicrophoneAuthorityInRecording]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_AudioRecordManager startRecording:successBlock:failedBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_AudioRecordManager stopRecording]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_AudioRecordManager callbackPCMAudioData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_AudioRecordManager audioData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_AudioRecordManager audioQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_AudioRecordManager audioPCMData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_AudioRecordManager curRecordID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletVcodeResultInfo resultCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletVcodeResultInfo resultDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletVcodeResultInfo retMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletOpenBScanCSendInfo mobilePwd]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCheckCardInfoResult cardInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCheckCardInfoResult sms_length]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCheckCardInfoResult sms_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCheckCardInfoResult send_sms_phone]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCheckCardInfoResult orgAoumtItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCheckCardInfoResult errContent]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCheckCardInfoResult retMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCheckCardInfoResult riskControl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPureSignAuthorizeInfo pure_sign]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPureSignAuthorizeInfo source_flag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPureSignAuthorizeInfo sp_logo_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPureSignAuthorizeInfo sp_company_title]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPureSignAuthorizeInfo authorize_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPureSignAuthorizeInfo detail_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPureSignAuthorizeInfo agreement_info]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletCustomServiceManager allocWithZone:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletCustomServiceManager customServiceManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCustomServiceManager saveCustomServiceInfo:csType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCustomServiceManager removeCustomServiceItemForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCustomServiceManager csDict]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetReAuthUserInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetReAuthUserInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetReAuthUserInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayConfigPayMethodInfo modelContainerPropertyGenericClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigPayMethodInfo paymethod_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigPayMethodInfo sorted_list]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigPayMethodInfoDetail pay_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigPayMethodInfoDetail account_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigPayMethodInfoDetail card_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigPayMethodInfoDetail bank_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassCreditMap select_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassInfoDetail has_mobile_pwd]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassInfoDetail passfree_flag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassInfoDetail passfree_button_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassInfoDetail need_check_sms]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayConfigFreePassInfoDetail passfree_credit_map]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBalanceRechargePromptRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBalanceRechargePromptRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBalanceRechargePromptRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderDelRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderDelRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderDelRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderDelRequest order_id_unique]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDFPCreateOtpRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDFPCreateOtpRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDFPCreateOtpRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDFPCreateOtpRequest mobile_pwd]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCollectionRecvListResult modelContainerPropertyGenericClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionRecvListResult total_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferBankQueryResult hot_bank]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletScanBarcodeWhiteListRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletScanBarcodeWhiteListRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletScanBarcodeWhiteListRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletNetworkClient shareNetworkClient]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletNetworkClient cancelRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletNetworkClient cancelUniqueRequest:isParamUnique:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletNetworkClient cancelAllRequests]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletNetworkClient requestHashKey:isParamUnique:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletNetworkClient addRecord:isParamUnique:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletNetworkClient removeRecord:isParamUnique:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletNetworkClient clientRecord]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletNetworkClient requestQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletWithdrawInfo pay_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletWithdrawInfo estimated_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletWithdrawInfo cash_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletWithdrawInfo redirect_business_succpage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetPassfreeRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetPassfreeRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetPassfreeRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetPassfreeRequest sendInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPassfreeRiskControlRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPassfreeRiskControlRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPassfreeRiskControlRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPassfreeRiskControlRequest passfree_status]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPassfreeRiskControlRequest passfree_credit]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameAuthApplyRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameAuthApplyRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameAuthApplyRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameAuthApplyRequest expireDateText]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_WalletModuleManager hasModeuleClass:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetTransferToAccountInfoResult payee_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetTransferToAccountInfoResult user_quota]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetTransferToAccountInfoResult quota_info_array]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetTransferToAccountInfoResult noticeItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferHeader itemPressed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferHeader headerType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferHeader interbank_offline_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTransferHeader interbank_offline_tips]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayMobilePasswordVerifyRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayMobilePasswordVerifyRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayMobilePasswordVerifyRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayMobilePasswordVerifyRequest passwordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetPassfreeSendInfo mobile_pwd]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetPassfreeSendInfo pwd_seed]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetPassfreeSendInfo passfree_status]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetPassfreeSendInfo passfree_credit]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetPassfreeSendInfo sms_vcode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFPStatusInfo fingerprintStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckPCPasswordRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckPCPasswordRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckPCPasswordRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckPCPasswordRequest passwordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCSendSMSRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCSendSMSRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCSendSMSRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCSendSMSRequest sendInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWConstAppearance sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWConstAppearance separateWeight]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayVerifiedSMSRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayVerifiedSMSRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayVerifiedSMSRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayVerifiedSMSRequest vcodeInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayVerifiedSMSRequest backEndServiceTypeMark]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayVerifiedSMSRequest backEndRequestTypeMark]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWSDKAppearance statusBarStyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWSDKAppearance oldStatusBarStyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWSDKAppearance bdWalletNavBackNormalImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWSDKAppearance bdWalletNavBackHighlightImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWSDKAppearance bdWalletNavBgImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWSDKAppearance bdWalletNavGobackTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWSDKAppearance bdWalletNavBacktitleEdgeInset]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWSDKAppearance bdWalletNavBackimageEdgeInset]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWSDKAppearance negativeSpace]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionGetQRCodeRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionGetQRCodeRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionGetQRCodeRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionGetQRCodeRequest recv_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionGetQRCodeRequest recv_remark]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager loadUploadUrlFromSettings]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager addEvent:needSyncToFile:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager addEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager bdussFromAPP]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager refreshEvents]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager headerDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager currentSyncContentByEvents:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager currentUploadContentByEvents:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager syncMemeDataToFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager syncFileDataToMem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager triggerUploadDataByEvents:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager generatAutoIncrentId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager uploadUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager eventsArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWTrackerCSManager trackerQueue]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletEncrypt encrypt:key:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletEncrypt decrypt:key:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletEncrypt safePayGetPW]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletEncrypt safePayEncrypt:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletEncrypt safePayDecrypt:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletEncrypt safePayLocalDecrypt:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletEncrypt safePayLocalEncrypt:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletEncrypt safePayMD5:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletEncrypt safePaySeed]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletEncrypt safepayCapitalString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayResetPasswordBySMSRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayResetPasswordBySMSRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayResetPasswordBySMSRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayResetPasswordBySMSRequest passwordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetTransferInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetTransferInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetTransferInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletMobileRechargeManager sharedMobileRechargeManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMobileRechargeManager fetchPromotionInfo:complete:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMobileRechargeManager fetchChargeInfo:complete:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMobileRechargeManager fetchCommonChargeInfo:complete:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMobileRechargeManager fetchMobileNoOfAccount:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMobileRechargeManager cancelMobileRechargeRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMobileRechargeManager promotionReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMobileRechargeManager commonRechargeReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCAuthInfo need_verify]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCAuthInfo display_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCPayResult pay_detail_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCPayResult discount_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCPayResult discount_prefix]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCPayResult order_prefix]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCPayResult total_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCPayResult coupon_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCPayResult coupon_find_prompt]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCPayResult cash_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCPayResult paytype_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCTransInfo sp_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCTransInfo order_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCTransInfo total_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCTransInfo pay_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCTransInfo discount_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCTransInfo goods_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCTransInfo score_tip]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCTransInfo paytype_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCTransInfo pay_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCResult trans_status]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCResult trans_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCResult trans_err_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCResult auth_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCResult pay_result]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCResult retCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletQueryBScanCResult retMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSendSMSRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSendSMSRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSendSMSRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSendSMSRequest card_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSendSMSRequest phone_number]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSubmitTransferOrderResult jump_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSubmitTransferOrderResult cashdesk_return]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerContextConfig validContextConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerContextConfig className]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerContextConfig selectorName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerContextConfig contextKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerContextConfig contextDefaultValue]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWTNetClient shareClient]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTNetClient cancelRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager activeComplete:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager bindCard:requestType:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager createCheckCardInfoRequestElements:cardInfo:orderInfo:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager checkCardInfo:payInfo:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager cancelCheckCardInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager cancelGetCardInfoRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager cancelBankListRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager buildGetCardInfoRequest:payInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager requestGetParamsString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager checkFindPasswordVerificationCode:withBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager queryCardBinByCardNO:cardInfoRequestType:withBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager sendSMS:token:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager cancelSendSMS]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager createBankExtraSmsRequest:payInfoDic:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager sendSMSByBankExtra:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager sendSMSByODP:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager cancelsendSMSByODP]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager transferSendSMS:withNum:withToken:block:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager queryBandCardArrayForFindPwdWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager realnameSendSmswithRequest:withBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager cancelRealnameSendSms]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager realnameVerifySmsWithRequest:withBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager cancelRealNameVerifySms]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager cardSignWithRequest:withBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager cancelCardSignRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager cancelFindPwdBankListRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager frontSelectPayMethodRequest:withBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager passFreeRequest:withBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager fetchDirectUserInfo:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager checkCardInfoReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager bankListReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager cardSignRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayBankCardManager findPwdBankListReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest request_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest card_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest card_no_bind]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest session_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest front_bank_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest true_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest certificate_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest certificate_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest verify_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest valid_date]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest sms_vcode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest session_content]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest sp_voice_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCardSignRequest verify_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultRiskControlGuidance prompt_head]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultRiskControlGuidance prompt_body]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletTrackerUtil calculateDpi]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSoftToken bdWalletLoadFromSecureString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSoftToken destroyTempMemory]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSoftToken generateOTPForCounter:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSoftToken bdWalletGetCurrentCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSoftToken bdWalletGetSerialNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSoftToken padding:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSoftToken BytesToInt:::]", 3)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletSafePayLogic sharedLogic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayLogic bankCardManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayLogic passwordManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayLogic payManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayLogic orderManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_BScanCBaseRequest encodeURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletStartWithdrawlRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletStartWithdrawlRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletTradeOderDetailsResult modelContainerPropertyGenericClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOderDetailsResult trans_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPasswordManagerServiceImpl createService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPasswordManagerServiceImpl enterPasswordWithRootController:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPasswordManagerServiceImpl beginRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPasswordManagerServiceImpl leaveWallet:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPasswordManagerServiceImpl BDWalletBindSuccessed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPasswordManagerServiceImpl BDWalletResetPasswordSuccessed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPasswordManagerServiceImpl refreshData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPasswordManagerServiceImpl BDWalletSDKLoginSuccessedWithLoginType:token:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPasswordManagerServiceImpl BDWalletSDKLoginFailedWithErrorCode:errorMsg:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPasswordManagerServiceImpl passwordService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityCenterPasswordManagerServiceImpl showingLoadingController]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameImgUploadRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameImgUploadRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameImgUploadRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameImgUploadRequest typeForImageData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameImgUploadRequest front_or_back]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameImgUploadRequest dataImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletChannelQuota single_limit]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletChannelQuota day_limit]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletChannelQuota month_limit]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBSCPayInfo sp_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBSCPayInfo order_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBSCPayInfo pay_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBSCPayInfo mobile_pwd]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBSCPayInfo sms_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest card_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest true_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest certificate_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest certificate_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest card_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest valid_date]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest sp_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest order_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest total_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest balance_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest pay_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest composite_flag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest front_bank_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest verify_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayBankExtraSmsRequest pay_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerBaseEvent uploadContent]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerBaseEvent pageId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerBaseEvent eventId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCalculatingMoneyResult userConsumptionInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest requestType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest requestUseGBK]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletRequest encodeURL:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletRequest base64forData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest sendHttpRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest handleReusltCode]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletRequest wcpEncoded]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest sendHttpSecretRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest addNonceSign:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest retMsg]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletRequest DicTOjsonString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletRequest fetchSystemInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletRequest logRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletRequest formatParameter:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest resaveSessionIDAndSessionUri]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest sessionID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest resultCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest resultDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest protocolType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest addDefaultParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest timeoutSeconds]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequest preventingTampering]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSaveFeedbackRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSaveFeedbackRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSaveFeedbackRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSaveFeedbackRequest feedbackInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponDetailRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponDetailRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponDetailRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponDetailRequest couponModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponDetailRequest resultCoupon]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAuthStateRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAuthStateRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAuthStateRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAuthStateRequest needMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerConfig validEventConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerConfig className]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerConfig selectorName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerConfig eventId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerConfig eventValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerConfig readContextValues]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerConfig cancelWhenKeyNull]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerConfig readInstanceProperties]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerConfig readArguments]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerConfig hookAfter]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy updateStrategy]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy restoreConfigFromDefaults]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy useDefaultStrategy]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy parserStrategyConfig:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy updateTimers]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy timerTriggerWifiUpload:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy timerTrigger3GUpload:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy shouldUploadImmediatelyByEventKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy shouldUploadImmediatelyByCSEventKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy shouldIgnoreEventKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy tryToUpdateStrategy:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy immediatelyKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy neverReportKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy wifiTriggerMinutes]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy mobile3GTriggerMinutes]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy csImmediatelyKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy csCacheCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy csCacheSecs]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy wifiTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy mobileNetTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerUploadStrategy basicInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_PushBSCanCPayResultRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_PushBSCanCPayResultRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_PushBSCanCPayResultRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_PushBSCanCPayResultRequest lastPaycode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFindPwdBankCardListRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFindPwdBankCardListRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFindPwdBankCardListRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFindPwdBankCardListRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletAddCardManager allocWithZone:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletAddCardManager addCardManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletAddCardManager fetchCustomServiceParams:serviceType:requestType:Complete:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletAddCardManager dataStreamAddCardReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCSendSMSResult send_sms_by_bfb]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCSendSMSResult sms_pattern]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCSendSMSResult sms_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCSendSMSResult sms_length]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPadWithEnterKey updateFrame]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassIvarInfo typeEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassMethodInfo typeEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassMethodInfo returnTypeEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassMethodInfo argumentTypeEncodings]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassPropertyInfo typeEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassPropertyInfo ivarName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassInfo _update]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWTClassInfo classInfoWithClass:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWTClassInfo classInfoWithClassName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassInfo superCls]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassInfo metaCls]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassInfo superClassInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassInfo ivarInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassInfo methodInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTClassInfo propertyInfos]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSSKeychain passwordForService:account:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSSKeychain passwordForService:account:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSSKeychain deletePasswordForService:account:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSSKeychain deletePasswordForService:account:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSSKeychain allAccounts]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSSKeychain accountsForService:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSSKeychain accessibilityType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetTransferInfoResult hot_bank]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetTransferInfoResult user_quota]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetTransferInfoResult quota_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetTransferInfoResult noticeItem]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCreateBScanCPay modelContainerPropertyGenericClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCreateBScanCResult bscBankArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCreateBScanCResult selectedCardNo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCreateBScanCResult pay_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCreateBScanCResult pay_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCreateBScanCResult more_card]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFocusItemObj ID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFocusItemObj imageName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFrontSelectpayMethodRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFrontSelectpayMethodRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFrontSelectpayMethodRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletMemoryCache defaultCache]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletMemoryCache cacheForOwner:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCache containsKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCache addArray:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCache addArray:forKey:dependency:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCache objectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCache removeObjectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCache cacheItemForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCache addDenpendency:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCache cacheItems]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletMyTradeCommonLogic priceDescWithBehav:goodsAmount:hsaUnit:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplyCreditCardInfo imageUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager rePayOrderInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager resetData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletRechargeEnterWithOrderInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletBSCPayMainEnterWithBigAmountItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager createCashDeskWithBSCItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager supportFingerPrintPay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletBSCPayMainEnterSuccessWithSmallAmountItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletBSCPayMainEnterWithSMSItem:CompletionBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager fixBugsBscnScreenHightlightWhenExitSDK]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletPayMainEnterWithPreOrderInfo:userResultInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletPayMainEnterWithOrderInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletPayMainEnterWithOrderInfo:isHalfPre:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletPayWithOrderInfo:isHalfPre:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager sdkRootController]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager goBackFromPasswordVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager goBackFromPayBindCardVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager goBackFromPayIntoDetailVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager cancelDoPayExternalNotice:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager cancelDoPay:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager BDWalletPayMySuccessed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager delayNotify:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager BDWalletPayMyFailed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager BDWalletPayWithdrawComplete:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager BDWalletPayMyBindCardSuccessed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager BDWalletPayMyBindCardFailed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager BDWalletPayMyResetPasswordSuccessed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager BDWalletPayMyResetPasswordFailed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager BDWalletPaySetPasswordWithPCPasswordAndPay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager BDWalletPaySetPasswordWithPCPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager leaveBDWalletPaySDKWithSDKRootController:withData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager dimissPresentVC:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager leaveBDWalletPaySDKWithSDKRootController:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager doUserInfoRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager updatePayInfoAfterUser:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager afterUserInfoRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager doRealNameAuth:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager endPayAndNotify:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager sendDoPayCancelNotificationWithPayCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager orderErrorHandle:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager confirmOrderInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager enterCardElementsUpdateCardInfoWithParams:rootVC:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager reloadBankCardItemDataByNeedCompleteInfo:bankCardItem:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager enterCardInfoUpdateVC:payPwd:needComplete:withPayItem:extendParam:withRootVC:]", 6)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager confirmPayLogic:payItem:animated:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager toPayUpdateLogicData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager payEntranceLogic:payItem:animated:isNeedPopToRoot:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager confirmEntrance:payItem:animated:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager needCompositePay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager checkHalfPasswordWithPasswordType:block:withRootVC:animated:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager checkPasswordWithPasswordType:block:withRootVC:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager nopassCardListOrAddCard:payItem:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager hasPassCardCompleteOrAddCardLogic:payItem:animated:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager addCard]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager addcardWithRootVC:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager addcardWithRootVC:lightAppParams:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager addcardInsideWithRootVC:isCheckPasswordInHalfScreen:withLightAppParams:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager checkPasswordToBankCardWithVC:isCheckPasswordInHalfScreen:withLightAppParams:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager enterPureSign:payItem:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager addCardAndPayWithMethodsOfPayItem:withRootVC:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager createCardListVC:payItem:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager createCashDesk:withRootVC:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager createCashDesk:withRootVC:animated:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager addCardPayFromVC:withPayItem:animated:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager forgotPasswordWithVC:withRootVC:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager forgotPasswordWithVC:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager activeCompleteWithVC:cardInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager completePayWithVC:withCardInfo:withPayItem:animated:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager externalSetMobilePayPasswordWithRootVC:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager externalVerPasswordWithRootVC:resetRootVC:verificationType:block:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager externalVerPasswordWithRootVC:verificationType:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager externalModifyPasswordWithRootVC:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager externalEnterPaymentResultVCWithRootVC:resultType:payDesc:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager externalEnterSMSVerificationVcodeVCWithRootVC:token:transdDi:recvCardNum:recvPhoneNumber:withBlock:]", 6)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager passFreeEnterSMSVerificationVcodeVCWithRootVC:phoneNumber:withBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager doBindCard:withBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bindUserInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager doVerifyCardElement:withBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager verfiyCardElement:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager closeCashier]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager closeCashierAndNotif:returnMsg:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager miniStartPageDopay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager createConfirmOrderInfoVC:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager paramsToUserInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager orderInfoStringToItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletPayMainEnterWithPreHalfScreenOrderInfo:userResultParams:params:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletPayMethods:extendParam:withBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager resetPayItemStatus:extend:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletRechargeRealName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdWalletPayReorder]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager complianceAuthSuccessed]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager complianceAuthFailed:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager smsGoBack]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager dealThirdPartyAuthorizationLogin:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager loginWithThirdPartyAuthorizationLoginError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager doReorder]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager fetchDirectUserInfoWithParram:Block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager statisticsNameNotMatchToConfirm]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager statisticsNameNotMatchToCancel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager leaveBDWalletPaySDKAnimate]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager orderInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bindWithoutPay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager intoType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager withdraw_sp_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager deposit_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager postInfoDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdwallet_mobilePassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager navRoot]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager payPostInfoItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager spItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager consumptionItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager openPayType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager orgAoumtItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bscNeedCallback]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager halfVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager authorizePayItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager originAppUserInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager originAppInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager currentSchemeUserInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager miscItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager forgetParentVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager externBindResultBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdwallet_isSetMobilePayPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager verifyCardElementBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager frontSelectPayblock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager hasBindedCard]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdwallet_completeCardFlag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager completeCardRecord]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager orderInfoEncode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdwallet_promotion_txt]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager externalVerPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bankListController]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager bdwallet_isPopPayOperateBank]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager requestType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager authorizeCashDeskVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayMainManager presentPayVCInside]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic serviceDefaultPayTypeUpdatePayItem:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic canToPayCashDeskOnceWithPayItem:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic updateCompositeTypeDataWithItem:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic updateBalanceEnoughDataWithItem:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic updateEasyDataWithItem:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic updateHasMoneyDataWithItem:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic updateBankStatus:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic updateOrderAmountInfoWithOldItem:withUser:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic checkCoupon:withComposite:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic checkCardListActivty:withCardList:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic firstAvailableCards:judgeSelectedComplete:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic enterCardElementsByCardRequestType:cardInfo:withRootVC:withMethodsOfPayItem:]", 4)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic enterCardElementsByCardRequestType:cardInfo:withRootVC:withMethodsOfPayItem:withLightAppParams:]", 5)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic enterCardListByCardRequestType:cardInfo:withRootVC:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic currentPayTypeDescWithPayItem:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic currentPayTypeDescIsNonePayType:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic currentPaySupportFingerWithPayItem:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic currentPaySupportFaceID]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic currentPaySupportFree]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic needPayMoney:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPayLogicPulic currentPayVerType:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletMyTradeLogic sharedLogic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMyTradeLogic cancelTransAccount:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMyTradeLogic cancelTradeRequest:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMyTradeLogic recvAction:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMyTradeLogic tradeQuery:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMyTradeLogic orderDel:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMyTradeLogic orderDetail:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMyTradeLogic cancelTradeQuery]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMyTradeLogic queryRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferSendInfo recv_card_num]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferSendInfo sms_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletAddCardRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletAddCardRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletAddCardRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletAddCardRequest paramsDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletAddCardRequest requestType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplication rootController]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferSendSMSRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferSendSMSRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferSendSMSRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferSendSMSRequest recv_card_num]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo orderInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo cardInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo passwordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo postInfoDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo livenessCallbackKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo livenessCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo need_bind_card]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo passwordType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo postParamString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo first_sp_id_tpl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo sp_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo sp_uno]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo trans_need_to_pay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo seller_user_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo total_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo score_trans_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo score_pay_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo balance_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo balance_pay_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo consumptionItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo sub_bank_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo requestType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo intoType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo use_vcode_to_pay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo credit_rate]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo stage_number]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo each_repayment]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo easypay_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo pay_quota_balance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayInfo couponID]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletRiskControlLogic shareInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRiskControlLogic statShowReAuthLiveness]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_NJKWebViewProgress startProgress]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_NJKWebViewProgress incrementProgress]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_NJKWebViewProgress completeProgress]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_NJKWebViewProgress checkIfRPCURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_NJKWebViewProgress respondsToSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_NJKWebViewProgress methodSignatureForSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_NJKWebViewProgress forwardInvocation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_NJKWebViewProgress loadingCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_NJKWebViewProgress currentURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFindPasswordCheckVcodeRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFindPasswordCheckVcodeRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFindPasswordCheckVcodeRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFindPasswordCheckVcodeRequest card_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletFindPasswordCheckVcodeRequest sms_vcode]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWSchemeEngine shareEngine]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWSchemeEngine registerHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWSchemeEngine registerApp:scheme:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWSchemeEngine cacheConnectionForWaitingResponse:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWSchemeEngine application:openURL:sourceApplication:annotation:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BWSchemeEngine handleRequest:WithParameters:sourceApp:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletInterfaceRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletInterfaceRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletInterfaceRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletInterfaceRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferPayeeListRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferPayeeListRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferPayeeListRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayUnBindCardRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayUnBindCardRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayUnBindCardRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayUnBindCardRequest card_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayUnBindCardRequest phone_number]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayUnBindCardRequest mobile_pass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayDoPayRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayDoPayRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayDoPayRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayDoPayRequest requestType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayDoPayRequest payInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayDoPayRequest doPayRequestDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfoComplete true_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfoComplete certificate_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfoComplete certificate_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfoComplete valid_date]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo cardName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo card_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo cardNoBind]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo bind_flag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo needComplete]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo needCompleteDate]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo needCompleteCvv]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo needCompletePhone]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo needCompleteName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo needCompleteIdentify]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo needCompleteIdentifyType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo cardType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo channel_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo must_bank_sms]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo pay_need_sms_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo card_required_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo card_item_required]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo bankCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo bankName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo bankImageUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo bankBackgroundUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo accountBankCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo sub_bank_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo phone_number]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo identity_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo valid_date]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo trueName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo identity_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo unbund_card_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo unbund_card_enabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo vertifyCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo mobile_pass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo mobile_pass_confirm]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo needCheckVcode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo use_check_algo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo amount_before_channel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo card_algorithm_check]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo card_algorithm_check_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo protocolInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo bank_card_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo card_state]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo find_pwd_by_sms]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo unsupport_find_pwd_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo needOneCentBind]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo oneCentBindDesc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo sp_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo order_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo supportIdentityTypes]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo type_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo single_quota]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo channelQuota]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo mapItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo card_no_required]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo verify_code_required]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCardInfo certificate_code_required]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPaySetPwdWithPCPwdRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPaySetPwdWithPCPwdRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPaySetPwdWithPCPwdRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPaySetPwdWithPCPwdRequest passwordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_OpenBScanCRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_OpenBScanCRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_OpenBScanCRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_OpenBScanCRequest sendInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetChargeInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetChargeInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetChargeInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetChargeInfoRequest areaOperator]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetChargeInfoRequest priceArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetChargeInfoRequest mobile_num]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSchemeCoder encodeWithScheme:method:params:error:]", 4)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSchemeCoder decodeWithInfo:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 loadUploadUrlFromSettings]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 bdussFromAPP]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 headerDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 currentUploadContentByEvents:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 currentSyncFileContentByEvents:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 syncMemeDataToFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 syncFileDataToMem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 triggerUploadData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 triggerUploadDataByEvents:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 needUploadTrackerDataByEvents:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 generatAutoIncrentId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 uploadUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 eventsArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 trackerTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerManagerV2 trackerQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetAuthUserInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetAuthUserInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetAuthUserInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayResetPasswordRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayResetPasswordRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayResetPasswordRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayResetPasswordRequest passwordInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletPointsMananger sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPointsMananger fetchPointsDetail:complete:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPointsMananger cancelPointRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPointsMananger cashBackReq]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSystemInfo shareSystemInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo stringInBase64FromData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo app_version]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSystemInfo macAddressMD5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo loadData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo updateCurrentNetPoint]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo detailNetPoint]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo diskCapacity]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo startNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo stopNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo networkChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo cuid_pass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo service_line]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo createUuid]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSystemInfo CUID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo FP]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo createAndUpdateFp]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo stopUpdatingLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo deviceMachine]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo locationManager:didUpdateLocations:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo locationManager:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo termType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo netPoint]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo displayName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo bundleId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo locationManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo netWork]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo reachabilityRef]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo reachabilitySerialQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSystemInfo reachabilityObject]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletFPAuthenticator checkTouchIDContext]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletFPAuthenticator verify:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWalletFPAuthenticator policyDeviceOwnerUNLock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletFPAuthenticator systemEvaluatedPolicyDomainState]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerCondition propertyName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerCondition conditionValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerCondition eventId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerCondition eventIdQuery]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerCondition eventValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerCondition readConditionObjectProperties]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_CreateBScanCRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_CreateBScanCRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_CreateBScanCRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_CreateBScanCRequest sendInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletTransaferLogic sharedLogic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic cancelGetTransferInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic cancelGetTransferToAccountInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic submitTransferToBankOrder:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic submitTransferToAccountOrder:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic transferBankQuery:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic cancelTransferBankQuery]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic identifyCardInfo:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic cancelIdentifyCardInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic cancelGetPayeeList]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic cancelDeleteTransfer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic identifyCardAndNameWithPayeeName:bankCode:cardNo:payCardNo:idTpl:block:]", 6)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic cancelIdentifyCardAndName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic cancelGetPayMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic preCheckAccountWithUserName:fromHistory:idTpl:block:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic checkAccountName:account:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic requestOrderResultWithNotify:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic deleteTransferListItemWithIdTpl:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic updateTransferRecvStateWithQRCode:orderNo:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletTransaferLogic loginIdmd5]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletTransaferLogic readCacheTransferHistoryWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletTransaferLogic writeCacheTransferHistory:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletTransaferLogic mergeAndWriteTransferHistory:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic transferBankQueryReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic payeeListReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic transToAccountInfoReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic transToBankUserNameCheckRequestReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransaferLogic deleteRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBalanceDetailRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBalanceDetailRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBalanceDetailRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBalanceDetailRequest balance_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBalanceDetailRequest total_count]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBalanceDetailRequest transInfoItemArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletFileCache sharedCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache cachedFileCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache cachedFilesName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache hasCachedForFileName:ext:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache readFileDataFromCacheForFileName:ext:withFinshiedBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache writeFileToCacheWithFileData:fileName:ext:withFinshiedBlock:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache renameCachedFileWithOriginFileName:originFileExt:toNewFileName:newFileExt:finshiedBlock:]", 5)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache cachePathForFileCachedName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache cachedFilePathForName:withExt:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache writingFilePathForName:withExt:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache fileNameForName:withExt:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache createPathIfNecessary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache cachePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache purgeCaches]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache clearDiskCacheIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletFileCache clearDiskCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache removeExpiredFiles]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache removeSpecifiedFileForName:ext:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache disableDiskCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletFileCache ioQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetMobileNoOfAccountRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetMobileNoOfAccountRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetMobileNoOfAccountRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPaymentResultFeedbackInfo modelContainerPropertyGenericClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPaymentResultFeedbackInfo question_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPaymentResultFeedbackInfo score_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPaymentResultFeedbackInfo entry_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPaymentResultFeedbackInfo entry_uri]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletScanBarcodeManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletScanBarcodeManager fetchScanBarcodeWhiteList:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletScanBarcodeManager fetchScanBarcodeShortUrl:WithBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletScanBarcodeManager cancelRequests]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletMemoryCacheManager shareManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCacheManager cacheForOwner:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCacheManager touchKey:inCache:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCacheManager findMetaByKey:andCache:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCacheManager removeMeta:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCacheManager didReceiveMemoryWarning:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCacheManager memoryCache:didAddKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCacheManager memoryCache:didReadKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCacheManager memoryCache:didRemoveKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCacheManager cacheMap]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletMemoryCacheManager cacheMetas]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle dealDetectionResult:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle saveData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle predicateWithRegular:Result:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle containHostSpecialSymbolInUrl:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle dealShortUrl:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle dealUrl:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle dealPlainText:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle dealOrder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle dealNativeInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle dealError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle dealTransferInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle fetchScanBarcodeShortUrl:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle fetchScanBarcodeShortUrlCallback:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle scanedResult]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBarcodeResultHandle shortUrlModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletWebViewDocumentVCDismissInjection flagPresentDocumentVC]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletContext sharedContext]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletContext currentApplication]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletContext startApplication:params:animated:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletContext exitApplication]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletContext findServiceByName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletContext registerService:forName:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletContext unregisterServiceForName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletContext exitAllApplication]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletContext statusBarStyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletContext applicationManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletContext serviceManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletServiceInfo lazyLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletChannelBankListRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletChannelBankListRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletChannelBankListRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletChannelBankListRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletChannelBankListRequest paramsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletChannelBankListRequest sp_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletChannelBankListRequest request_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletChannelBankListRequest backEndServiceTypeMark]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletScanBarcodeShortUrlRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletScanBarcodeShortUrlRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletScanBarcodeShortUrlRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletScanBarcodeShortUrlRequest shortUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletIdentifyIDPhotoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletIdentifyIDPhotoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletIdentifyIDPhotoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletIdentifyIDPhotoRequest imageString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTFindPasswordCheckVCodeRsp sms_token]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDPopoverCellInfo iconUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDPopoverCellInfo iconName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDPopoverCellInfo titleName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBankInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBankInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBankInfoRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBankInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBankInfoRequest cardNo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBankInfoRequest backEndServiceTypeMark]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBankInfoRequest backEndRequestTypeMark]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletDiscountInfo ID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletDiscountInfo activity_description]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletDiscountInfo seller_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletDiscountInfo final_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletDiscountInfo share_discount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewReqEvent updateContentByRequest:isStart:byConfig:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewReqEvent startPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewReqEvent endPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewReqEvent eventDur]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewReqEvent eventValueQuery]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewReqEvent requestValueQuery]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletTrackerNewReqEvent hashKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetPayMethodRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetPayMethodRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetPayMethodRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetPayMethodRequest requestInfoDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTRequest allParamters]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTRequest loadCommonParamters]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTRequest loadContractParamters]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTRequest httpMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTRequest stringEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTRequest responseStringEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTRequest requestBaseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTRequest responeObjectClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferIdentifyCardResponse bank_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferIdentifyCardResponse bank_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferIdentifyCardResponse big_logourl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferIdentifyCardResponse small_logourl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager startLauncherApplication]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager launcherApplication]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager applicationForName:params:createIfNotExists:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager startApplication:params:animated:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager currentApplication]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager exitApplication:animated:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager exitApplication:animated:options:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager applicationWillTerminate:animated:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager exitApplicationAtIndex:animated:options:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager exitAllApplication]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager applicationStack]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager applicationFactory]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletApplicationManager naviVC]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletRealNameRequstManager shareInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameRequstManager uploadImageWith:withCallBack:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameRequstManager cancelUploadImageRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameRequstManager authApplyWith:withCallBack:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRealNameRequstManager cancelAuthApplyRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderMenu type_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderMenu type_value]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeGoodsDetail sp_icon]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeGoodsDetail sp_title]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeGoodsDetail query_goods_url_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeGoodsDetail goods_url]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletTradeProgress modelContainerPropertyGenericClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeRefundRelateOrder query_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeRefundRelateOrder query_str]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletTradeTransData modelContainerPropertyGenericClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData goods_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData goods_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData goods_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData goods_details]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData link_button]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData order_id_unique]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData order_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData order_subtype]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData order_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData pay_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData pay_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData scene_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData state_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData sp_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData sp_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData service_title]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData service_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData trans_type_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData trans_di]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData relate_order]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData recv_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData recv_bank_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData recv_card_num]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData fee_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData off_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData received_flag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData recv_mobile]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData payee_recv_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData save_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData mobile_number]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransData pay_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPreDirctRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPreDirctRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPreDirctRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPreDirctRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPreDirctRequest orderInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetCardInfoResult cardInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetCardInfoResult easypay_amount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetCardInfoResult sms_length]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetCardInfoResult sms_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletGetCardInfoResult riskControl]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletAlertWindow shareInstance:title:message:confirmStr:confirmBlock:]", 5)}, 0);
setTimeout(function(){hookObjC("+[BDWalletAlertWindow shareInstance:title:message:confirmStr:cancelStr:confirmBlock:cancelBlock:]", 7)}, 0);
setTimeout(function(){hookObjC("+[BDWalletAlertWindow shareInstance:title:message:confirmStr:cancelStr:otherStr:confirmBlock:cancelBlock:otherBlock:]", 9)}, 0);
setTimeout(function(){hookObjC("+[BDWalletAlertWindow alertWindowHidden]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAlertWindow clearData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAlertWindow addAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAlertWindow addAlertAction:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAlertWindow confirmBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAlertWindow cancelBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAlertWindow otherBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAlertWindow confirmStr]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAlertWindow cancelStr]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAlertWindow otherStr]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSafePayViewManager safepay_createBorderField:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWalletSafePayViewManager safepay_applyBorderField:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CAGradientLayer bdwt_gradientLayerWithFrame:colors:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayRequest requestType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayRequest requestUseGBK]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequestAuthAppleySMSRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequestAuthAppleySMSRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequestAuthAppleySMSRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletRequestAuthAppleySMSRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletAuthStep modelCustomTransformFromDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWTFindPasswordCheckVcodeRequest requestBaseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTFindPasswordCheckVcodeRequest loadContractParamters]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTFindPasswordCheckVcodeRequest card_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTFindPasswordCheckVcodeRequest sms_vcode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic hasCachedKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic generateLocalCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic cachedBankArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic saveBankArray:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic clearCachedBankArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic saveOfflineToken:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic createOfflineTokenWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletBScanCLogic cancelOfflineTokenRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo resultCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo resultDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo retMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo order_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo bank_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo payTypeDesc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo errContent]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo use_vcode_to_pay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo orgAoumtItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo payResultShowInfoItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo riskControl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo payCompliance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo cardItemRequired]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo couponList]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo pay_result_page_promot_txt]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo pure_sign]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo contract_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPayResultInfo sign_success_tips]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletPopUtil keyWindow]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetUserOptionRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetUserOptionRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSetUserOptionRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[DZWeakProxy proxyWithTarget:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DZWeakProxy forwardingTargetForSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DZWeakProxy forwardInvocation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DZWeakProxy methodSignatureForSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DZWeakProxy respondsToSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DZWeakProxy conformsToProtocol:]", 1)}, 0);
setTimeout(function(){hookObjC("-[DZWeakProxy debugDescription]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferGetPayMethodRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferGetPayMethodRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferGetPayMethodRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferGetPayMethodRequest cardNo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletClient sendEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionGetQRCodeResult firstopen_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCollectionGetQRCodeResult qrcode_title]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletRunServiceOnce runAllService]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletRunServiceOnce configPath]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletTradeTransInfo modelContainerPropertyGenericClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransInfo group_di]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransInfo group_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeTransInfo trans_data]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletTradeOrderListResult modelContainerPropertyGenericClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderListResult order_type_menu]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderListResult trans_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTradeOrderListResult through_data]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSubmitTransferOrderRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSubmitTransferOrderRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSubmitTransferOrderRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSubmitTransferOrderRequest cashdeskParam]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletChannelBankListResult creditList]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletChannelBankListResult debitList]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_CommonWebViewTextInputStyle resetDefaultData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_CommonWebViewTextInputStyle paddingBottom]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSecurityCenterHomeRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSecurityCenterHomeRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSecurityCenterHomeRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSetPayOrderRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSetPayOrderRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSetPayOrderRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSetPayOrderRequest reqParamDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceRechargeQuotaRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceRechargeQuotaRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletCouponManager shareManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponManager deleteCouponWithCoupon:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponManager cancelRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponManager listRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCouponManager detailRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserResultInfo resultCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserResultInfo resultDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserResultInfo retMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserResultInfo userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserResultInfo orderInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserResultInfo accountInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserResultInfo miscItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserResultInfo authorizePayItem]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletUserInfoManager shareUserInfoManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager loginToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager sToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager sTokenAndBudss]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager logout:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager synFetchUserInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager fetchUserInfoWithPrams:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager fetchUserInfo:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager currentUserInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager updateCurrentUserInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager updateMemoryCacheUserInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager cancelUserInfoRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager onLoginChanaged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager firstAvailableCards:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager updateCookies]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager fetchVifyCardUserInfo:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager receiveCouponRequest:couponType:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletUserInfoManager currentRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferRecvCountRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferRecvCountRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferRecvCountRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager sendVcode:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager pay:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager bscPay:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager sendSMS:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager cancelSendSMSRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager postForPay:payResultInfo:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager createPostForPayRepeatTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager resetPostFoPayRepeatFlag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager buildCalculatingMoneyRequest:payInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager calculatingMoney:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager cancelCaluatingMoneyRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager doWithdraw:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager saveFeedback:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager repeatTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager repeatFlag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSafePayPayManager sendSMSRequest]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWalletMemoryCacheMeta metaWithKey:cache:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCreateAndUpdateFP requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCreateAndUpdateFP requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletCreateAndUpdateFP requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferBankQueryRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferBankQueryRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferBankQueryRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD handleGraceTimer:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD animationFinished:finished:context:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD launchExecution]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD updateIndicators]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD layoutSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD registerForKVO]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD unregisterFromKVO]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD observableKeypaths]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD observeValueForKeyPath:ofObject:change:context:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD registerForNotifications]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD unregisterFromNotifications]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD deviceOrientationDidChange:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD animationType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD labelText]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD xOffset]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD yOffset]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD dimBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD taskInProgress]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressHUD graceTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressIndicator updateDots:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressIndicator dotCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressIndicator dotViews]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletProgressIndicator dotColors]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPushNotificationImpl registerPushService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPushNotificationImpl applicationDidRegisterRemoteNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPushNotificationImpl applicationDidReceiveRemoteNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletPushNotificationImpl pushProviderServerURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPad layoutSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPad updateFrame]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPad addNotificationsObservers]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPad textDidBeginEditing:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPad textDidEndEditing:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPad changeText:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPad longPressGestureRecognizerAction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPad selectedRange:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPad exchangeRandWithUpdateFrame:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPad numberButtons]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletSecurityKeyboardNumberPad digitType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameConfirmBankCardRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameConfirmBankCardRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletRealNameConfirmBankCardRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceWithdrawalsRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceWithdrawalsRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceWithdrawalsRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletBalanceWithdrawalsRequest payInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckResultRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckResultRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckResultRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckResultRequest requestGetParamsString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletPayCheckResultRequest paramString]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletReceiveCouponRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletReceiveCouponRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletReceiveCouponRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletReceiveCouponRequest activity_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletReceiveCouponRequest activity_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletVcodeInfo payInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletVcodeInfo bindWithoutPay]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletMobileRechargeManager sharedMobileRechargeManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletMobileRechargeManager fetchMobileRechargeOrderNo:chargeType:complete:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWAspectTracker trackedClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAspectTracker selectorNames]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAspectTracker parentEntry]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWAspectIdentifier identifierWithSelector:object:options:block:error:]", 5)}, 0);
setTimeout(function(){hookObjC("-[BWAspectIdentifier invokeWithInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWAspectIdentifier blockSignature]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAspectsContainer hasAspects]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAspectsContainer addAspect:withOptions:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWAspectsContainer removeAspect:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWAspectsContainer beforeAspects]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAspectsContainer insteadAspects]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAspectsContainer afterAspects]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAspectInfo originalInvocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletLittleProgressHUD addSubLayers]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletLittleProgressHUD addTextLayer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletLittleProgressHUD addIndicatorLayer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWalletLittleProgressHUD indicatorLayer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferIdentifyBank requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferIdentifyBank requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferIdentifyBank requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferIdentifyBank cardInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSubmitTransferToAccountOrderRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSubmitTransferToAccountOrderRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSubmitTransferToAccountOrderRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletSubmitTransferToAccountOrderRequest cashdeskParam]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToAccountPrecheckRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToAccountPrecheckRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToAccountPrecheckRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToAccountPrecheckRequest from_payeelist]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletTransferToAccountPrecheckRequest id_tpl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletCryptoResult resText]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCrypto symmetricEncryptDataUsingAlgorithm:data:key:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCrypto symmetricDecryptDataUsingAlgorithm:data:key:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCrypto createCryptorUsingAlgorithm:data:key:isCrypted:]", 4)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCrypto rsaEncryptDataUsingData:publicKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BaiduWalletCrypto rsaDecryptDataUsingData:privateKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWTKeepAliveConfig modelCustomPropertyMapper]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTKeepAliveConfig nextGetPostSpace]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTKeepAliveConfig serverTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWallet_FileManager sharedFileManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_FileManager qRFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_Barcode charToInt:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_Barcode compute:withType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_Barcode addQuietZone:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_Barcode digitToBmpRenderer:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_Barcode oneDimBarcode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_Barcode qRBarcode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_Barcode oneDimCode]", 0)}, 0);
setTimeout(function(){hookObjC("+[BaiduWallet_GenBarcodes genBarcode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BaiduWallet_GenBarcodes genQRCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer verifyWithAPIKey:algorithmType:andLocalLicenceFile:]", 3)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer verifyWithToken:algorithmType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer verifyWithLicenseFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer verifyWithLicenseInMainBundle]", 0)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer verifyWithLicenseInDocDir]", 0)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer verifyLicenceWithFile:]", 1)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer verifyLicense:]", 1)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer verifyIdentityItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer decryptLicenseFile:]", 1)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer decryptLicense:]", 1)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer bundleId]", 0)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer licenseLoader:didSucceedWithLicenseData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer licenseLoader:didFailedWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer apiKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer localLicencePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer algorithmType]", 0)}, 0);
setTimeout(function(){hookObjC("-[IDLAuthorizer licenseLoader]", 0)}, 0);
setTimeout(function(){hookObjC("+[LICPathUtils documentRootPath]", 0)}, 0);
setTimeout(function(){hookObjC("+[LICPathUtils libraryRootPath]", 0)}, 0);
setTimeout(function(){hookObjC("+[LICPathUtils licensePath]", 0)}, 0);
setTimeout(function(){hookObjC("+[LICStringUtil trimWhitespaceOfString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[LICStringUtil URLEncodedString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[LicenseLoader loadLicenseWithAPIKey:algorithmType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[LicenseLoader identyWithApiKey:algorithmType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[LicenseLoader requestDataWithItendityStruct:]", 1)}, 0);
setTimeout(function(){hookObjC("+[PathUtils filePathInModelBundle:]", 1)}, 0);
setTimeout(function(){hookObjC("+[PathUtils modelRootPath]", 0)}, 0);
setTimeout(function(){hookObjC("+[PathUtils detectModelPath]", 0)}, 0);
setTimeout(function(){hookObjC("+[PathUtils alignModelPathWithType:]", 1)}, 0);
setTimeout(function(){hookObjC("+[PathUtils alignMeanPath]", 0)}, 0);
setTimeout(function(){hookObjC("+[PathUtils parsingModel3]", 0)}, 0);
setTimeout(function(){hookObjC("+[PathUtils parsingParam3]", 0)}, 0);
setTimeout(function(){hookObjC("+[PathUtils parsingModel7]", 0)}, 0);
setTimeout(function(){hookObjC("+[PathUtils parsingParam7]", 0)}, 0);
setTimeout(function(){hookObjC("+[PathUtils licensePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[LivenessState mouthStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[LivenessState yawAngles]", 0)}, 0);
setTimeout(function(){hookObjC("-[LivenessState pitchAngles]", 0)}, 0);
setTimeout(function(){hookObjC("+[FaceSDK sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK canWork]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK checkAlignModelInitWithType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK alignFaceInImage:withMethodType:andFaceRect:andOutputFaceShape:andNumOfPoints:andScore:]", 6)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK landmarkNumberWithType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK trackFaceInImage:withMethodType:andFaceShape:andNumOfPoints:andScore:]", 5)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK headPostEstimationWithFaceShape:andImgDataRowNum:andImgColumNum:andNumOfPoints:]", 4)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK headPostEstimationWithImage:andFaceShape:andNumOfPoints:]", 3)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK livenessDetectInImage:andFaceShape:andNumOfPoints:andFlag:andOutPutState:]", 5)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK sdmAlignModelInited]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK cdnnAlignModelInited]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK outlineParsingModelInited]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceSDK featureParsingModelInited]", 0)}, 0);
setTimeout(function(){hookObjC("+[FaceVerifier sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceVerifier canWork]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceVerifier cropFaceEnlargeRatio:]", 1)}, 0);
setTimeout(function(){hookObjC("-[FaceVerifier livenessState]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceVerifier trackedFaceInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceVerifier clearTrackedFaces]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceVerifier httpString]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceVerifier regImages]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceVerifier generateHttpStringWithAction:andUserName:andAppId:]", 3)}, 0);
setTimeout(function(){hookObjC("-[FaceVerifier prepareDataWithImage:andActionType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[FaceVerifier ptsFilePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[FaceVerifier alignModelInited]", 0)}, 0);
setTimeout(function(){hookObjC("+[IDLImageHelper newBitmapRGBA8ContextFromImage:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils md5HexDigest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils compressGZip:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils cpuUsageArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils cpuUsageInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils totalMemoryBytes]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils freeMemoryBytes]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils totalDiskSpaceBytes]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils freeDiskSpaceBytes]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils subDate:earlierDate:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils replaceUnicode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils utf8StringEncoding:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils formatStackFrame:frameIndex:report:lp64:]", 4)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils generateLiveReportWithThread]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabUtils phoneModel]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabConfig sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig appKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig appVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig debugEnable]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig onlyWifiUploadEnable]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig crashReportEnable]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig colloctCaughtExceptionEnable]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig catchANREnable]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig eventMonitorEnable]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig stackSymbolsEnable]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig anrToplimitTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig ANRTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig ANRMonitorInterval]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig exceptionMonitorInterval]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig buildNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig appUserName]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig allowFailureCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig CrashAttachLogDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig pagePathArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig logcatArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig eventArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabConfig urlArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabReachability reachabilityWithHostName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabReachability reachabilityWithAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabReachability reachabilityForInternetConnection]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabReachability startNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabReachability stopNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabReachability networkStatusForFlags:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabReachability connectionRequired]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabReachability currentReachabilityStatus]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabBaseData sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData recordId]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData batteryRate]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData appKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData osVN]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData appVN]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData appVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData sdkVN]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData appName]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData buildNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData cpuInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData diskInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData memoryInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData netType]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData pkgName]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData occurrencePage]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData appCurConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData usersCustom]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData developerName]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData networkInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData otherRunAppInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData clientIp]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabBaseData systemName]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabCrashReportOperate uploadCrashWithBaseURL:URI:parameters:crashFileFullPath:]", 4)}, 0);
setTimeout(function(){hookObjC("+[CrabCrashReportOperate uploadCaughtExceptionWithURL:URI:parameters:exceptionFileFullPath:]", 4)}, 0);
setTimeout(function(){hookObjC("+[CrabCrashReportOperate uploadCaughtException:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabCrashReportOperate uploadCrash:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabCrashReportOperate addNotificationCenterObserver:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabCrashReportOperate uploadLaunchCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabQueryStringPair URLEncodedStringValueWithEncoding:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabHTTPClient clientWithBaseURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient registerHTTPOperationClass:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient unregisterHTTPOperationClass:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient defaultValueForHeader:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient clearAuthorizationHeader]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient requestWithMethod:path:parameters:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient multipartFormRequestWithMethod:path:parameters:constructingBodyWithBlock:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient HTTPRequestOperationWithRequest:success:failure:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient enqueueHTTPRequestOperation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient cancelAllHTTPOperationsWithMethod:path:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient enqueueBatchOfHTTPRequestOperationsWithRequests:progressBlock:completionBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient enqueueBatchOfHTTPRequestOperations:progressBlock:completionBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient postPath:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient putPath:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient deletePath:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient patchPath:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient stringEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient parameterEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient registeredHTTPOperationClassNames]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient defaultHeaders]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPClient operationQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabMultipartFormData requestByFinalizingMultipartFormData]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabMultipartFormData appendBoundary]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabMultipartFormData appendPartWithHeaders:body:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CrabMultipartFormData appendPartWithFormData:name:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CrabMultipartFormData appendPartWithFileData:name:fileName:mimeType:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CrabMultipartFormData appendPartWithFileURL:name:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CrabMultipartFormData appendString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabMultipartFormData appendData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabMultipartFormData stringEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabMultipartFormData outputStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabMultipartFormData temporaryFilePath]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabOpenUDID _setDict:forPasteboard:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CrabOpenUDID _getDictFromPasteboard:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabOpenUDID _generateFreshOpenUDID]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabOpenUDID valueWithError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPRequestOperation hasAcceptableStatusCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPRequestOperation hasAcceptableContentType]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabHTTPRequestOperation acceptableStatusCodes]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabHTTPRequestOperation addAcceptableStatusCodes:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabHTTPRequestOperation acceptableContentTypes]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabHTTPRequestOperation addAcceptableContentTypes:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabHTTPRequestOperation canProcessRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPRequestOperation connection:didReceiveResponse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPRequestOperation HTTPError]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPRequestOperation successCallbackQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPRequestOperation failureCallbackQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPRequestOperation totalContentLength]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabHTTPRequestOperation offsetContentLength]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences saveCrabDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences removeCrabDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences saveObject:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences saveBool:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences saveInteger:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences boolForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences integerForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences dictionaryForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences objectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences removeObjectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences clearLaunchCount]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences addLaunchCount]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences addFailureCount:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences removeAllFailureCount]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences removeFailureCount:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences removeCrashFileParametersForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabSharedPreferences removeAllCrashFileParameters]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabANRMonitor sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabFileOperate createDirectoryOnDocumentWithSubDirectory:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabFileOperate productFileFullPathWithSubDirectory:fileName:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CrabFileOperate removeFile:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabFileOperate removeFileAndOtherData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabFileOperate handleCrashReportWithCrabDir:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabFileOperate handleUncaughtExceptionWithCrabDir:exception:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CrabFileOperate saveData:parameters:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CrabANRInfo sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabANRInfo anrType]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabANRInfo anrReason]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabANRInfo mainThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabANRInfo allThreads]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabANRInfo otherInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabHttpSender postData:baseUrl:path:]", 3)}, 0);
setTimeout(function(){hookObjC("+[CrabHttpSender postANRData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabHttpSender postExceptionData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabCoreNetStatus allocWithZone:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabCoreNetStatus sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabCoreNetStatus currentNetWorkStatus]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabCoreNetStatus currentNetWorkStatusString]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabCoreNetStatus telephonyNetworkInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabCoreNetStatus currentRaioAccess]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabCoreNetStatus statusWithRadioAccessTechnology]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabCoreNetStatus technology2GArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabCoreNetStatus technology3GArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabCoreNetStatus technology4GArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabCoreNetStatus coreNetworkStatusStringArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabThreadSafeArray addObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabThreadSafeArray removeObjectAtIndex:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabThreadSafeArray objectAtIndex:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabJSONRequestOperation responseJSON]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabJSONRequestOperation acceptableContentTypes]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabJSONRequestOperation canProcessRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabURLConnectionOperation networkRequestThreadEntryPoint:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CrabURLConnectionOperation networkRequestThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation inputStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation responseString]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation operationDidStart]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation cancelConnection]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation connection:canAuthenticateAgainstProtectionSpace:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation connection:didReceiveAuthenticationChallenge:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation connection:willSendRequest:redirectResponse:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation connection:didReceiveResponse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation connection:didReceiveData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation connectionDidFinishLoading:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation connection:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation connection:willCacheResponse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation runLoopModes]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation responseData]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation totalBytesRead]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation outputStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation backgroundTaskIdentifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation uploadProgress]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation downloadProgress]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation authenticationAgainstProtectionSpace]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation authenticationChallenge]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation cacheResponse]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabURLConnectionOperation redirectResponse]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabExceptionInfo sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabExceptionInfo exceptionType]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabExceptionInfo exceptionReason]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabExceptionInfo exceptionThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabExceptionInfo allThreads]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabExceptionInfo otherInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CrabExceptionInfo exceptionUserInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabEventMonitor sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabCustomLog logEnable]", 0)}, 0);
setTimeout(function(){hookObjC("+[CrabCustomLog detailLogEnbale]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBoby awakeFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFilterTramp blockBarb:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSFilterTramp analyzeArum:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSFilterTramp devChroseMarg:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSFilterTramp awakeBroom:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSFilterTramp blockCante]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFilterTramp sendTramp:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSFilterTramp fetchChince]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFilterTramp pickCoco]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFilterTramp touchLindo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFilterTramp fetchEveni:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSDKLib sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSDKLib pfmSzProptBroom]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSDKLib startSDKEngineWithCUID:hostAppCUID:appKey:secret:notifyHandler:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SSDKLib StartSDKEngineWithCUID:hostAppCUID:AppKey:Secret:CompletionNotify:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SSDKLib ActionHelperWithEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSFaniBusle sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFaniBusle startCally:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSFaniBusle generateDaffi:toFile:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSFaniBusle sendLaver:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSFaniBusle requestCone]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkurBusle touchBoby]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkurBusle touchMimosa:getAmary:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSLarkurBusle generateBroom]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkurBusle prefBoby:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSLarkurBusle encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSLarkurBusle globeLoist]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLindoLarkur prefHelper]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLindoLarkur fetchJesey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLindoLarkur larkurGuern]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLindoLarkur carnaAlpha]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLindoLarkur eveniArum]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSMarg requestFever:thread:buildFilter:context:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SSMarg sendAttr:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSArumCoco listLupin]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSArumCoco awakeFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSCocoLaver sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCocoLaver prefIris:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSCocoLaver awakeGayter]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCocoLaver requestCarna]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCocoLaver buildSymhub:fetchColu:awakeMarg:defaultValue:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SSCocoLaver prefTramp]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCocoLaver listHyacinth]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCocoLaver prefQinchu]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCocoLaver checkForta]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCocoLaver organizeMarg]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSSymhubBarb sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFlingo buildQinchu]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFlingo fetchFlame]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFlingo URLSession:didReceiveChallenge:completionHandler:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SSFaniBoby touchForta]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFaniBoby flyLisus]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFaniBoby sendGadu:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSFaniBoby objectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSFaniBoby serviceName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFaniBoby jeseyBusle]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSColu devBlueth]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSColu pickCone:callback:context:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SSColu organizeFlingo:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSGaduChince reachabilityWithHostName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSGaduChince sendForta:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSGaduChince reachabilityWithAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSGaduChince reachabilityForInternetConnection]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSGaduChince reachabilityForLocalWiFi]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince devCoco]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince organizeCoco]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince organizeChince]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince listCally]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince organizeLaver]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince connectionRequired]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince beatLoist]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince prepareCorner]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince currentReachabilityStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince awakeAttrLindo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince pickCally]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince checkFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince devColuAttr:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince attrGuern]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGaduChince canteBeller]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSCone sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCone analyzeDaffi]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCone beatFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCone blockTango]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCone blockLaver]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCone pickJesey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSQinchuGayter sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSChalo sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSChalo awakeFever:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSChalo generateAlpha]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSChalo awakeTramp]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSChalo startLaver:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSChalo touchFlameFani:generateBarb:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSChalo analyzeAfroca:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSChalo touchAttr:generateBarb:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSChalo flyDaffi:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSChalo analyzeBlee]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSChalo blockColu]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSChalo flyAttr]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLaver requestGadu]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLaver awakeFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLaver tangoGuerns]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBluethBloom generateLoist]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBluethBloom beatCoco]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBluethBloom awakeFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBluethBloom barbLaver]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSGrapeGrape sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGrapeGrape touchCante]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGrapeGrape analyzeTramp:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSGrapeGrape checkBoby:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSGrapeGrape fetchChince]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGrapeGrape flyColu]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGrapeGrape analyzeMimosa:startGlobe:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSGrapeGrape touchFortaLisus:startGlobe:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSBloom organizeFani]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBloom awakeFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBloom jeseyGlobe]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSAmaryEveni sendCoco:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSAmaryEveni prefGadu]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSAmaryEveni fetchAfroca]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSAmaryEveni analyzeFever]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSAmaryEveni sendDaffi]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSAmaryEveni prepareFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSAmaryEveni devFever]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSAmaryEveni listGayter]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBarbBlueth listTramp]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBarbBlueth awakeFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBarbBlueth symhubSymhub]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBarbBlueth gayterQinchu]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSFilterFever fetchBlee:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSLupin toString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLupin blockBeller]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLupin encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSLupin gayterAttr]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSArum sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSArum listCante:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSArum organizeFlame:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSArum checkEveni]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSArum fetchIris]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSPropt pickFlingo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSPropt requestLobaw]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSPropt blockSymhub]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSPropt alphaFever]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSPropt proptQinchu]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSPropt eveniFani]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSPropt bellerAlpha]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSPropt chaloDaffi]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSPropt barbBeller]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSPropt busleCone]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSPropt resultArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSGuern sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGuern appKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGuern attrSymhub]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGuern hyacinthLupin]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGuern coneCarna]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGuern jeseyDaffi]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGuern callyBloom]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGuern amaryIris]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGuern qinchuCorner]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGuern feverSymhub]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGuern proptGadu]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSGuern hostAppCUID]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSGayter listFlingo:carnaAlpha:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SSGayter startBloom:carnaAlpha:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SSGayter flyJesey:carnaAlpha:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSBlee buildQinchu]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBlee jeseyGlobe]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSMimosa sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSMimosa faniAfroca]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSMimosa flyGadu:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSMimosa fortaChalo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSCanteGayter sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCanteGayter prepareAmary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSBarb analyzeFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBarb awakeFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSColuQinchu sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSColuQinchu fetchTango]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSColuQinchu beatEveni]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSColuQinchu startFever]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLindo listBoby:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSLindo sendBoby:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSLindo buildTramp:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSLindo checkChalo:withCompletionBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSLindo generateMarg]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLindo organizePropt]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLindo blockGadu:prepareLaver:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSLindo devIris:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSLindo retryCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLindo cornerAlpha]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBluethArum generateMarg]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBluethArum buildQinchu]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBluethArum feverGrape]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSCarna sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCarna fetchAmary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCarna sendMimosa]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCarna beatFlame]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCarna fetchFilter]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSCarna touchHelper]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSAmaryJesey pickConeFlame:result:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSForta listFever]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSForta organizeJesey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSForta sendGadu:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSForta objectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSLisus sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLisus blockJesey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSLisus laverMimosa]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSIris touchArum:toIndex:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SSIris flyAlpha:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSEveniCarna prepareForta]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSEveniCarna requestBeller]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSEveniCarna blockFilter:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSEveniCarna analyzeChrose:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSEveniCarna generateBeller:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSEveniCarna requestCante:startCarna:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SSEveniCarna pickCante:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSEveniCarna touchCarna]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSChrose sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSChrose blockJesey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSChrose laverMimosa]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBusle analyzeBeller]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSBusle awakeFlingo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSFlameLindo touchBloom]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSFlameLindo buildBarb:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSFlameLindo touchLarkur:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSFlameLindo sendLaverTango]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFlameLindo hostName]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSQinchuPropt blockJesey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSQinchuPropt laverMimosa]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSLarkur sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkur awakeFilter]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkur trampCone]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkur larkurBroom]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkur afrocaPropt]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkur barbEveni]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkur bleeCally]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkur busleColu]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkur afrocaMarg]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkur filterLobaw]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkur hyacinthGuern]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLarkur flingoAttr]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFlameCally toString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFlameCally blockBeller]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFlameCally listJesey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFlameCally symhubBlee]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSFlameCally cornerQinchu]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSLoist checkCarna:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SSLoist sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[SSAttr sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSAttr blockBroom:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSAttr fetchChalo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSAttr analyzeLobaw:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SSAttr devTangoForta]", 0)}, 0);
setTimeout(function(){hookObjC("-[SSAttr touchLobawPropt]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychain passwordForService:account:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychain passwordForService:account:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychain passwordDataForService:account:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychain passwordDataForService:account:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychain deletePasswordForService:account:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychain deletePasswordForService:account:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychain allAccounts]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychain allAccounts:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychain accountsForService:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychain accountsForService:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychain accessibilityType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPICUIDKeychainQuery save:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPICUIDKeychainQuery deleteItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPICUIDKeychainQuery fetchAll:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPICUIDKeychainQuery fetch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPICUIDKeychainQuery passwordObject]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICUIDKeychainQuery errorWithCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAPICUIDKeychainQuery passwordData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPICUIDKeychainQuery accessGroup]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPICUIDKeychainQuery synchronizationMode]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAPICUIDKeychainQuery accessibilityType]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID createUDID]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID generateUDID]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID saveSapiIdfa:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID fetchSapiIdfa]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID keychainQueryWithService:account:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID accessGroup]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID teamIdentifier]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID safeReadIDFAString]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID xorDecryptedString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID stringWithBase64EncodedString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID dataWithBase64EncodedString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID encryptString:keyString:ivString:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID encryptData:key:iv:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID decryptData:keyString:ivString:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SAPICUID decryptData:key:iv:]", 3)}, 0);
setTimeout(function(){hookObjC("+[PLCrashSignalHandler sharedHandler]", 0)}, 0);
setTimeout(function(){hookObjC("+[PLCrashSignalHandler resetHandlers]", 0)}, 0);
setTimeout(function(){hookObjC("-[PLCrashSignalHandler registerHandlerWithSignal:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PLCrashSignalHandler registerHandlerForSignal:callback:context:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[PLCrashMachExceptionServer serverThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[PLCrashMachExceptionServer exceptionPortWithMask:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[PLCrashProcessInfo currentProcessInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[PLCrashProcessInfo processID]", 0)}, 0);
setTimeout(function(){hookObjC("-[PLCrashProcessInfo processName]", 0)}, 0);
setTimeout(function(){hookObjC("-[PLCrashProcessInfo parentProcessID]", 0)}, 0);
setTimeout(function(){hookObjC("+[PLCrashHostInfo currentHostInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[PLCrashHostInfo darwinVersion]", 0)}, 0);
setTimeout(function(){hookObjC("+[PLCrashMachExceptionPort exceptionPortsForTask:mask:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[PLCrashMachExceptionPort exceptionPortsForThread:mask:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PLCrashMachExceptionPort registerForTask:previousPortSet:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PLCrashMachExceptionPort registerForThread:previousPortSet:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PLCrashMachExceptionPort server_port]", 0)}, 0);
setTimeout(function(){hookObjC("-[PLCrashMachExceptionPortSet countByEnumeratingWithState:objects:count:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PLCrashMachExceptionPortSet asyncSafeRepresentation]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeCornerLogic shouldShowBusinessCorner:isDefaultData:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeCornerLogic shouldTabShowBusinessCorner:isDefaultData:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeCornerLogic updateBusinessCornerTimestamp:key:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeCornerLogic hasBusinessCorner:isDefaultData:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeCornerLogic businessCornerTimestampWithKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeCornerLogic loginIdMd5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadPushFlagRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadPushFlagRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadPushFlagRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadPushFlagRequest requestUseGBK]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadPushFlagRequest uploadResult]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadPushFlagRequest openFlag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD handleGraceTimer:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD animationFinished:finished:context:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD launchExecution]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD updateIndicators]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD layoutSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD registerForKVO]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD unregisterFromKVO]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD observableKeypaths]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD observeValueForKeyPath:ofObject:change:context:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD registerForNotifications]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD unregisterFromNotifications]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD deviceOrientationDidChange:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD animationType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD xOffset]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD yOffset]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD dimBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD graceTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD taskInProgress]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ProgressHUD labelText]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_MobStat startMobStat]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_MobStat logEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_MobStat eventStart:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_MobStat eventEnd:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_MobStat pageviewStartWithName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_MobStat pageviewEndWithName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_MobStat logEvent:eventLabels:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_MobStat crashCallBack]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceItemList loadLocalData]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_WalletServiceItemList deleteAllPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceItemList resultDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceItemList retMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceItemList front_page_md5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceItemList groupList]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceItemList pop_window_md5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceItemList pop_List]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceItemList skin_md5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceItemList skinModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceItemList couponModel]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_CreditTimeStampManager updateItemTimestampAt:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_ScreenLockServiceImp sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp createPasscodeBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp verifyPasscode:isReLogin:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp updatePasscodeBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp cleanPasscodeBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp hasPasscode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp touchIDIsOpen]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp configScreenLockVC:withFlag:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp updateUserInfoToVC:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp didUpdateAvatar:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp forgetTouchIDcode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp forgetPasscode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp handleResult:withFlag:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp checkBackgroundTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp createScreenLockCreationVC:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp closePasswordWindowFromVC:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp refreshStatusBar]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp userNickName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp closeLockWindow]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp rootVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp userInfoUpdated]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp hasVerifyVC]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp launchedByPayRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp passcodeMgr]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp resultBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp appLaunch]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp passwordWindow]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockServiceImp verifyVC]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_ScreenLockCreateConfirmVC ScreenLockCreateConfirmVCBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateConfirmVC gestureComplete:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateConfirmVC handleResult:andErrorInfo:errorText:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateConfirmVC hanldePasscodeError:andErrorInfo:errorText:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateConfirmVC activityFlag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateConfirmVC passcodeService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateConfirmVC tempPasscode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateConfirmVC userID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateConfirmVC completionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateConfirmVC statusBarstyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush uploadDeviceInfoToNetWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWAPush uploadUserLoginStateToNet:userId:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWAPush uploadPushFlagToNet:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWAPush cancelUploadPushFlagToNet]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush currentUploadPushFlagRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_PolymerPayBaseRequest requestUseGBK]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_PolymerPayBaseRequest handleReusltCode]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_WalletServiceRemindPrivacyLogic loginIdMd5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bainuoLogin:complte:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bainuoIsLogin:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bainuoAccountInfo:complte:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bainuoLogout:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bainuoGetMobile:complte:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount updateUserMobile:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bainuoFillMobile]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bindMobileSuccess:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bindMobileSuccessToUpdateUserMobile:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bindMobileCancel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bindMobileCancelDelay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bainuoGetSecretAccount:complte:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount didLogin]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount loginCancel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount didLogout]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount loginCompleteBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bindMobileBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAccount bindMobileSuccess]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC updateCouponStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC updateUserInfoStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC updateLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC serviceCardTipAnimaiton]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC addNotification]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC successLogin:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC enterRedirectPage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC updateUserInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC updateLocalEyeHideStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC refreshInfoAfterLoadData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC didLogout]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC updatePrivateStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC createServiceViews]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC refreshSkinImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC refreshSkinFailure]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC refreshStatusBarStyle:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC homePageRequestBegin]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC notificationLocationResult:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC reverseGeocodeIfNeed]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC loadData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC dealResult:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC requestVoicePrintState]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC resetJumpFlag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC jumpItem:serviceGroup:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC jumpGroup:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC jumpItem:serviceGroup:networkCheck:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC jumpGroup:networkCheck:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC loginAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC continueInSafari:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC enterGroup:networkCheck:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC enterItem:serviceGroup:networkCheck:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC homePageItemList]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC hasSkin]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_GesturePasscodeRequest createGesturePasscodeRequest:withPasscode:andNewPasscode:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeRequest encryptGestureCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeRequest encryptConfirmGestureCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_GestureCodeCreateRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GestureCodeCreateRequest confirmedPasscode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GestureCodeUpdateRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GestureCodeUpdateRequest passcodeNew]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GestureCodeUpdateRequest passcodeNewConfirmed]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceRequest homepageItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageDeleteRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageDeleteRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageDeleteRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageDeleteRequest messageId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetPayResult err_no]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetPayResult err_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetPayResult payVo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWalletGetPayResult resultDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_HybridServiceImpl sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridServiceImpl startHybridService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridServiceImpl openUrl:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridServiceImpl urlEncodeString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridServiceImpl openHybridWith:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridServiceImpl bainuoComponent]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridServiceImpl privacyService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageCategoryListRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageCategoryListRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageCategoryListRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageCategoryListRequest messageCategoryList]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageCategoryListRequest remotePushUnreadCount]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_LaunchManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_LaunchManager startLaunchImageWithFinishLaunchImageBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager startLaunchImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager downloadTimerMethod:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager displayBackGroudImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager displayCustomLaunchImage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager timerMethod:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager tapGestureClicked]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager doLaunchImageRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager doLaunchImageRequestWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager updateUserDefaultsWithItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager deleteFileAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager launchImageWithTimestamp:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager launchImageExistWithTimestamp:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager finishLaunchBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager launchWindow]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager countNum]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager downloadTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest requestUseGBK]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest requestConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest DicTOjsonString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest urlEncodeString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest base64forData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest encryptLogic:value:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest buildRequstBody]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest sendHttpRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest cancelRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest apiHostHttp]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest apiHostHttps]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest requestHashKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest currentRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest resultCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest resultDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BaseRequest resultMsg]", 0)}, 0);
setTimeout(function(){hookObjC("+[CAKeyframeAnimation animationWithKeyPath:fromPoint:toPoint:keyframeCount:]", 4)}, 0);
setTimeout(function(){hookObjC("+[BWA_WalletServiceGroup updateGroupIndex:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_WalletServiceGroup updateGroupNewTemplateCount:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_WalletServiceGroup removeGroupNewTemplate]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceGroup group_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceGroup group_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceGroup arrayServiceItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceGroup group_md5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceGroup pop_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceGroup group_key]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceGroup group_hight]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceGroup group_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceGroup group_link_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceGroup group_link_addr]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_ScoreInfoManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScoreInfoManager fetchScoreInfoWithAction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScoreInfoManager scoreInfoItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScoreInfoManager scoreAlert]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_WalletServiceSkinManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceSkinManager updateSkinMd5:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceSkinManager updateTabbarMd5:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceSkinManager needUpdateSkin:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceSkinManager needUpdateTabbar:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceSkinManager skinMd5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceSkinManager tabbarMd5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceSkinManager skinKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceSkinManager tabbarKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[PayVo wepUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[PayVo appUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[PayVo orderInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[PayVo channel_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager verifyPasscode:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager verifyRemotePasscode:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager updatePasscode:withNewPasscode:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager cleanPasscode:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager updatePasscodeByPaycode:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager checkUserID:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager safePrompt]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager resetRetryTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager saveUserID:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager handleServerError:flag:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager hasLocalPasscode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager remainingRetryTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager userID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager localService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeManager remoteAgent]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager saveAutoRedirectData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager enterRedirectPageIfNeed]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager saveAbtype:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager redirectItem]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_MessageCategoryManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageCategoryManager qureyMessageCategoryForUnreadCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageCategoryManager loginIdMd5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageCategoryManager unreadCountValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageCategoryManager refreshBadge]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageCategoryManager unreadCount]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWAPush sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush addNotification]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush didLogin]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush didLogout]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush uploadUserLoginState]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush uploadUserLoginState:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWAPush uploadPushFlag:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWAPush onMethod:response:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWAPush pushFlag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush pushFlagUploadResult]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush cachedDeviceToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush saveDeviceToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush cachedChannelId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush saveChannelId:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWAPush startWithLaunchOption:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWAPush registerDeviceToken:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWAPush handleRemoteNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWAPush handleLaunchNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWAPush uploadUserLoginState]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWAPush uploadUserLoginState:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWAPush uploadPushFlag:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWAPush logBindState]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush pushBindState]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush deviceToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush userId]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_LoginServiceImpl sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl recheckShareLoginStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl recheckPassStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl logoutPass]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl updateLoginModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl loginInfoDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl clearCookies]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl uploadPortrait:mimeType:SuccessBlock:ErrorBlock:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl sapiManager:didLogOut:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl sapiManager:didLoginFail:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl sapiManager:didOauthLoginSucceed:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl sapiManager:didRegistVerified:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl sapiManager:didFillUnameSucceed:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl sapiManager:didLoginSucceed:extraInfo:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl sapiManager:silenceLoginSucceedWithOptions:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl updateLoginWindowStatus:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl closeLoginWindow]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl loginStokenWithTPL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl loginStokenWithTPL:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_LoginServiceImpl privacyService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager successLoginBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager errorLoginBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager loginWithUserInfo:ExtroParams:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager loginSuccessBlock:ErrorBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager loginWithUserInfo:ExtroParams:SuccessBlock:ErrorBlock:]", 4)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager updateLoginModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager loginInfoDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager fetchLoginID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager fetchLoginName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager updatePrivacy]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager loginSuccess:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager loginFailue:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager loginCancel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager logoutSuccess:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager bindMobile]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager changePassword:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager enterPassUserCenterWithRootVC:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTUserHomeManager requestHomeAllDataWithChangeSign:complete:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC refreshSkinImages:failure:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC skinPrefetcher]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC skinManger]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC skinQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC skinsInModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC refreshTitleImageAndTabImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC tabbarPrefetcher]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC tabbarManger]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC tabbarQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceHomeVC checkSkinComplete:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_WalletServiceBadgeManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceBadgeManager couponBadgeType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceBadgeManager saveCouponBadgeTapStatus:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceBadgeManager badgeKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceBadgeManager badgeTapKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceBadgeManager badgeInfoKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceBadgeManager hasLoginID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceBadgeManager loginIDMd5]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_KitTouchIDServiceImp touchIDIsOpen]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_KitTouchIDServiceImp loginIdMd5]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_KitTouchID touchIDVerifyIsSupportWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_KitTouchID touchIDVerifyIsSupport]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchManager clearCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWAPush processNotificationAtLaunch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWAPush processNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWAPush processNotificationItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWAPush handleNotificationMsg:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWAPush restoreAppState]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaseDataSource updateDatas:atPage:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BaseDataSource clearDatas]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaseDataSource displayInfoForData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BaseDataSource infoArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaseDataSource dataArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CALayer paintInContext:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_PushUploadDeviceInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_PushUploadDeviceInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_PushUploadDeviceInfoRequest requestUseGBK]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_PushUploadDeviceInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_PushUploadDeviceInfoRequest uploadResult]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_ScreenLockCreateFirstVC ScreenLockCreateFirstVCBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateFirstVC gestureComplete:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateFirstVC activityFlag]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateFirstVC passcodeService]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateFirstVC userID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateFirstVC completionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScreenLockCreateFirstVC statusBarstyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SetNickNameRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SetNickNameRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SetNickNameRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SetNickNameRequest requestUseGBK]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SetNickNameRequest nickName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_OnlineConfigRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_OnlineConfigRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_OnlineConfigRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_OnlineConfigRequest cateType]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_OnlineConfigManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_OnlineConfigManager sendRequestWithType:finishBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BWA_CreditManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_CreditManager updateCreditDataSuccessBlock:ErrorBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_CreditManager saveCreditData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_CreditManager creditData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTUserHomeAllDataRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTUserHomeAllDataRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTUserHomeAllDataRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTUserHomeAllDataRequest requestUseGBK]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDWTUserHomeAllDataRequest changedSign]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeCommonLogic homeModelFromString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeCommonLogic homeModelFromDict:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeCommonLogic actualValue:secret:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeCommonLogic pureValue:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeCommonLogic loginIdMd5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl _initialize]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl awakeFromNib]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl _renderPages:rect:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl rectForPageIndicator:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl _setImage:forPage:current:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl _imageForPage:current:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl imageForPage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl currentImageForPage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl _updateMeasuredIndicatorSizes]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl touchesEnded:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl numberOfPages]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl currentPage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl indicatorMargin]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl indicatorDiameter]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl verticalAlignment]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl pageIndicatorImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl currentPageIndicatorImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_SMPageControl hidesForSinglePage]", 0)}, 0);
setTimeout(function(){hookObjC("+[CAGradientLayer gradientLayerWithFrame:colors:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BWA_FinanceDataManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_FinanceDataManager updateFinanceDataFromRemote]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_FinanceDataManager saveFinanceData:withFileName:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_FinanceDataManager updateFinanceDataWithRequest:SuccessBlock:ErrorBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BWA_WalletServiceCardPositionManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceCardPositionManager udpatePosition:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceCardPositionManager currentPosition]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceCardPositionManager positionKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceCardPositionManager animaitonKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceCardPositionManager hasLoginID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_WalletServiceCardPositionManager loginIDMd5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction bainuoCompHandlerActionName:withParams:complete:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction payResultWithCode:payDesc:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction conventHybridPlatformsToBWASharePlatforms:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction updateUserMobile:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction bainuoFillMobile]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction bindMobileSuccess:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction bindMobileSuccessToUpdateUserMobile:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction bindMobileCancel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction bindMobileCancelDelay]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction compHandlerActionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction orderId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridAction bindMobileSuccess]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWTGridFactory shouldShowHeaderWithHomeDataModel:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWTGridFactory gridColumnWithHomeDataModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_ReverseLocationDetail city_code]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ReverseLocationDetail city_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ReverseLocationDetail short_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ReverseLocationDetail city_url]", 0)}, 0);
setTimeout(function(){hookObjC("-[CellDisplayInfo cellClass]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_AvatarHelper defaultAvatar]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_AvatarHelper cachedAvatar]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_AvatarHelper saveAvatar:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_AvatarHelper clearAvatar]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_AvatarHelper hasCachedAvatar]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_AvatarHelper imageFromURL:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_UserInfoManager shareUserInfoManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager clearUserInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager updateLoginInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager updateUserInfoSuccessBlock:ErrorBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager updateAvatarSuccessBlock:ErrorBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager uploadAvatarImage:SuccessBlock:ErrorBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager updateUserMobileSuccessBlock:ErrorBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager backToForground:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager userInfoArchivePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager saveUserInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager clearSavedUserInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoManager userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_WalletServiceManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_PrivateInstance sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_PrivateInstance privateStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_PrivateInstance savePrivateStatus:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_PrivateInstance privateKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_PrivateInstance hasLoginID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_PrivateInstance loginIDMd5]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_PrivateInstance needLocalState]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_MessageManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageManager deleteMessageWithMessageId:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageManager readMessageWithMessageId:block:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeAdapter canJumpWithType:link:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeAdapter gridBaseModelWithHomeModel:isSecret:isDefaultData:]", 3)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeAdapter gridHeaderModelWithHomeDataModel:isSecret:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeAdapter hasNumber:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchRequest uploadResult]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchRequest testflightFlagOn]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_LaunchRequest redirectItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageListRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageListRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageListRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageListRequest messageList]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageListRequest pageCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageListRequest messageId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageListRequest refreshType]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_MapServiceImpl sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl locationServicesEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl refreshLocationWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl reverseGeocodeWithGPSLocation:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl requestWhenInUseAuthorization]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl locationManager:didChangeAuthorizationStatus:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl locationManager:didUpdateLocations:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl locationManager:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl refreshReversedLocation:andPlacemark:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl addressFromPlacemark:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl startLocationUpdating]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl stopLocationUpdating]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl createCityDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl handleAdditionalBlocks:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl duplicateRefreshLog]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl cllocationManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MapServiceImpl lastCity]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadUserLoginStateRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadUserLoginStateRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadUserLoginStateRequest requestUseGBK]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadUserLoginStateRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadUserLoginStateRequest uploadResult]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadUserLoginStateRequest userId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UploadUserLoginStateRequest loginState]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_FinanceDataRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_FinanceDataRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_FinanceDataRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeLocalStorge localHomeDir]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeLocalStorge localHomeDataPath]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeLocalStorge defaultHomeData]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeLocalStorge loginIdMd5]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeLocalStorge readCacheHomeDataWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeLocalStorge writeCacheHomeData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeLocalStorge encodeString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeLocalStorge decodedString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDWTUserHomeLocalStorge clearAllData]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_MobStat closeStat:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageReadRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageReadRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageReadRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_MessageReadRequest messageId]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_NetworkClient shareNetworkClient]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_NetworkClient cancelRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_NetworkClient cancelAllRequests]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_NetworkClient requestHashKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_NetworkClient addRecord:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_NetworkClient removeRecord:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_NetworkClient clientRecord]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_AlertViewManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_AlertViewManager addAlert:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_AlertViewManager addActionSheet:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_AlertViewManager displayAllHiddenAlert]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_AlertViewManager displayAllHiddenActionSheet]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_AlertViewManager willPresentActionSheet:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_AlertViewManager didPresentActionSheet:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_AlertViewManager alertArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_GetPayRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_GetPayRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaiduWallet_GetPayRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_CreditRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_CreditRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_CreditRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_CreditRequest fingerPrint]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_CreditRequest changedSign]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo updateUserInfoFromInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo userId]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo atbcKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo displayName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo userName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo nickName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo userImageUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo userHasPayPassword]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo licai_state]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo credit_state]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo bfbreg_days]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo auth_state]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo auth_msg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo auth_doc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo pattern_state]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo pattern_open_doc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo pattern_doc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo pattern_safe_doc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo insurance_state]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo insurance_desc]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo tipsMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo tipsLinkType]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfo tipsLinkAddr]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScoreInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScoreInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScoreInfoRequest requestUseGBK]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_ScoreInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("+[AVCaptureDevice requestCameraAuthorization:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AVCaptureDevice requestAlbumAuthorization:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeLocalService savePasscode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeLocalService verifyPasscode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeLocalService deletePasscode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeLocalService hasPasscode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_GesturePasscodeLocalService userID]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWALocationConverter transformFromWGSToGCJ:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWALocationConverter transformLatWithX:withY:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BWALocationConverter transformLonWithX:withY:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BWALocationConverter transformFromGCJToBaidu:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWALocationConverter transformFromBaiduToGCJ:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWALocationConverter transformFromGCJToWGS:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BWA_FeedBack closeFeedbackWindow]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridLocation bainuoGetLocation:complte:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridLocation bainuoLocationStatus:complte:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridLocation bainuoHasLocation:complte:]", 2)}, 0);
setTimeout(function(){hookObjC("-[BWA_HybridLocation locationBlock]", 0)}, 0);
setTimeout(function(){hookObjC("+[BWA_BBAShareManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BBAShareManager shareWebContentByTitle:Text:Url:ImageUrl:Platforms:EventHandler:]", 6)}, 0);
setTimeout(function(){hookObjC("-[BWA_BBAShareManager handleOpenURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BWA_BBAShareManager productID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BBAShareManager appIDForStatistics]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BBAShareManager appIDForWeixin]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BBAShareManager appKeyForSinaWeibo]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_BBAShareManager appIDForQQ]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoRequest requestURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoRequest requestParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[BWA_UserInfoRequest requestMethod]", 0)}, 0);
setTimeout(function(){hookObjC("+[YeYingManager sharedYYSDK]", 0)}, 0);
setTimeout(function(){hookObjC("-[YeYingManager runMode]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDSPageNavigator sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSPageNavigator pushPage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSEntity handleDispatch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity target_wise_home]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity target_wise_list]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity target_wise_detail]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity target_wise_order_detail]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity target_wise_activity]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDSRequest tuanRequestWithTarget:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSResponse userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[MCTuanUtils imageNamed:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MCTuanUtils replaceEqualMarkToColon:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MCTuanUtils mc_currentNetworkStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[MCTControlPlugin finish:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSKeychainItemWrapper objectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSKeychainItemWrapper resetKeychainItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSKeychainItemWrapper writeToKeychain]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSKeychainItemWrapper keychainItemData]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSKeychainItemWrapper genericPasswordQuery]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDSTuanEntity stringToDic:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BDSTuanEntity loadWithCommonEntity:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity target_groupon_home]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity target_groupon_category]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity target_groupon_detail]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity target_groupon_order_list]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity target_groupon_voucher]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity target_groupon_order_detail]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSTuanEntity handleDispatch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSBaseNavPage supportedInterfaceOrientations]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSBaseNavPage shouldAutorotate]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSBaseNavPage pageCreate:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSBaseNavPage pageStart]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSBaseNavPage pageStop]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSBaseNavPage pageDestroy]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSDispatcher dispatch:result:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BDSDispatcher defaultDispatcher]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSDispatcher applicationDidBecomeActive:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSDispatcher openURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSDispatcher popToVCName]", 0)}, 0);
setTimeout(function(){hookObjC("+[BDSIntent intentWithPageName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[BDSIntent pageName]", 0)}, 0);
setTimeout(function(){hookObjC("-[BDSIntent userInfo]", 0)}, 0);
