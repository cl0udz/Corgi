
var resolver = new ApiResolver('objc');

function onEnterFunc(args, argNum, infoArray){
    // infoArray = [ argNum, args[1], args[2], ... , args[argNum + 1], args[0], retval, funcname ]
    infoArray[0] = argNum;

    /*try {
        tmp = new ObjC.Object(args[0]);
        infoArray[argNum + 2] = tmp.toString();
    } catch(error){
        try { 
            infoArray[argNum + 2] = strFilter(Memory.readCString(args[0], 128).toString());
        } catch(err) {
            infoArray[argNum + 2] = args[0].toString();
        }
    }*/

    for(var i=1; i<argNum+2; ++i) {
        infoArray[i] = 'arg';
        /*try {
            tmp = new ObjC.Object(args[i]);
            infoArray[i] = tmp.toString();
        } catch(error){
            try { 
                infoArray[i] = strFilter(Memory.readCString(args[i], 128).toString());
            } catch(err) {
                infoArray[i] = args[i].toString();
            }
        }*/
    }

    return;
}

function onLeaveFunc(retval, argNum, infoArray){

    infoArray[argNum + 3] = 'retval';
    /*try {
        tmp = new ObjC.Object(retval);
        infoArray[argNum + 3] = tmp.toString();
    } catch(error){
        try { 
            infoArray[argNum + 3] = strFilter(Memory.readCString(retval, 128).toString());
        } catch(err) {
            infoArray[argNum + 3] = retval.toString();
        }
    }*/

    return;
}

function strFilter(str) {
    for(var i=0; i<str.length; ++i){
        if(str.charCodeAt(i) >= 32 && str.charCodeAt(i) <= 127)
            { }
        else
            return str.substring(0, i);
    }
    return str;
}

function hookObjC(FuncName, ArgNum){
    resolver.enumerateMatches(FuncName, {
        onMatch: function (match) {
                    // infoArray = [ argNum, args[1], args[2], ... , args[argNum + 1], args[0], retval, funcname ]
                    var infoArray = new Array(ArgNum + 4);
                    infoArray[ArgNum + 4] = match.name;
                    //send(match.name);

                    Interceptor.attach(match.address, {
                    onEnter: function(args){
                        //send(match.name);
                        onEnterFunc(args, ArgNum, infoArray);
                    },
                    onLeave: function(retval){
                        onLeaveFunc(retval, ArgNum, infoArray);
                        send(infoArray);
                    }
                    })
                },
        onComplete: function () {
                }
    }); 
}


var resolver = new ApiResolver('objc');

function onEnterFunc(args, argNum, infoArray){
    // infoArray = [ argNum, args[1], args[2], ... , args[argNum + 1], args[0], retval, funcname ]
    infoArray[0] = argNum;

    /*try {
        tmp = new ObjC.Object(args[0]);
        infoArray[argNum + 2] = tmp.toString();
    } catch(error){
        try { 
            infoArray[argNum + 2] = strFilter(Memory.readCString(args[0], 128).toString());
        } catch(err) {
            infoArray[argNum + 2] = args[0].toString();
        }
    }*/

    for(var i=1; i<argNum+2; ++i) {
        infoArray[i] = 'arg';
        /*try {
            tmp = new ObjC.Object(args[i]);
            infoArray[i] = tmp.toString();
        } catch(error){
            try { 
                infoArray[i] = strFilter(Memory.readCString(args[i], 128).toString());
            } catch(err) {
                infoArray[i] = args[i].toString();
            }
        }*/
    }

    return;
}

function onLeaveFunc(retval, argNum, infoArray){

    infoArray[argNum + 3] = 'retval';
    /*try {
        tmp = new ObjC.Object(retval);
        infoArray[argNum + 3] = tmp.toString();
    } catch(error){
        try { 
            infoArray[argNum + 3] = strFilter(Memory.readCString(retval, 128).toString());
        } catch(err) {
            infoArray[argNum + 3] = retval.toString();
        }
    }*/

    return;
}

function strFilter(str) {
    for(var i=0; i<str.length; ++i){
        if(str.charCodeAt(i) >= 32 && str.charCodeAt(i) <= 127)
            { }
        else
            return str.substring(0, i);
    }
    return str;
}

function hookObjC(FuncName, ArgNum){
    resolver.enumerateMatches(FuncName, {
        onMatch: function (match) {
                    // infoArray = [ argNum, args[1], args[2], ... , args[argNum + 1], args[0], retval, funcname ]
                    var infoArray = new Array(ArgNum + 4);
                    infoArray[ArgNum + 4] = match.name;
                    //send(match.name);

                    Interceptor.attach(match.address, {
                    onEnter: function(args){
                        //send(match.name);
                        onEnterFunc(args, ArgNum, infoArray);
                    },
                    onLeave: function(retval){
                        onLeaveFunc(retval, ArgNum, infoArray);
                        send(infoArray);
                    }
                    })
                },
        onComplete: function () {
                }
    }); 
}

setTimeout(function(){hookObjC("-[CCHHomeRefreshLogicModule moduleDidAppear:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeRefreshLogicModule readFromWhiteBoard]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeRefreshLogicModule handleRefreshLogic]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeRefreshLogicModule firstAccessRefreshData]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeRefreshLogicModule unFirstShow]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeRefreshLogicModule wb_isNeedHomeRefresh]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeServiceModule shouldShow]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeServiceModule readFromWhiteBoard]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeServiceModule bindAction]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKDomainObject spk_reporterError:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeServiceInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeServiceInfo imgURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeServiceInfo linkURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeServiceInfo imgURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeServiceInfo linkURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeServiceInfo shouldLogin]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeServiceInfo gifTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeRefreshControl updateConstraints]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeRefreshControl requiresConstraintBasedLayout]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHMineUserInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHMineUserInfo portraitURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHMineUserInfo userName]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHMineUserInfo portraitURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHMineUserInfo userInfoItemArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHMessageCenterPortalRegister pageDescription]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeDynamicLotteryInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeDynamicLotteryInfo logoURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicLotteryInfo logoURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicLotteryInfo statusDesc]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicLotteryInfo lotteryDesc]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicLotteryInfo awardDesc]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeHeadLineModule b_h4suai13StatisticsWith:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeHeadLineModule b_vb3rlioyStatisticsWith:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeHeadLineModule shouldShow]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeHeadLineModule disposableScheduler]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeHeadLineModule wb_headLineInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHGestureViewConst sharedGestureConst]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeLoadingModule shouldShow]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeServiceHotTagInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeServiceHotTagInfo imgURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeServiceHotTagInfo imgURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeServiceHotTagInfo ID]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeGuideBindCardLogicModule hasGuideBindCard]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeBasePayInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeBasePayInfo hasBankCard]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeBasePayInfo realNameGuideInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHPushManager defaultInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHPushManager uploadPushToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHPushManager deletePushToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHPushManager saveCustomPushToken:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCHPushManager customPushToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHPushManager uploadPushTokenCommand]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHPushManager deletePushTokenCommand]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHStatisticsInitialize registerCommonConfig:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CCHStatisticsInitialize registerCategory:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CCHPhotoManager sharedPhotoManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHPhotoManager writeImageToSavedPhotosAlbum:thenWriteResulte:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CCHPhotoManager assetsLibrary]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeFunctionHeaderModule writeToWhiteBoard]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeFunctionHeaderModule readFromWhiteBoard]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeFunctionHeaderModule bindAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeFunctionHeaderModule verifyRealName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeFunctionHeaderModule b_os6RuSAKStatisticsWith:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeFunctionHeaderModule wb_B2CCommand]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeFunctionHeaderModule wb_C2BCommand]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHCameraLauncher imagePickerController:didFinishPickingMediaWithInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CCHCameraLauncher imagePickerControllerDidCancel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCHCameraLauncher base64LocalIDWithOriginImage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCHCameraLauncher base64LocalIDWithImage:base64Str:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CCHMediaHelper base64StringForImgSrcFromImage:compressionQuality:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CCHURLSchemeManager openCustomURL:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CCHConfigCenter sharedConfigCenter]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHConfigCenter allocWithZone:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCHConfigCenter fetchAllConfigInformationInConfigCenterQueueIfNeed]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHConfigCenter needFetchAllConfigInformation]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHConfigCenter pathOfConfigPlistFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHConfigCenter configDict]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHTitansSignalsHelper tokenSignal]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHTitansSignalsHelper cityIDSignal]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHTitansSignalsHelper loacationSignal]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHTitansSignalsHelper UUIDSignal]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHTitansAdapter loginSuccessWithCallback:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeShotcutLogicModule wb_B2CCommand]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeShotcutLogicModule wb_C2BCommand]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeShotcutLogicModule wb_shotcutKeyString]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHWebViewCookieManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHWebViewCookieManager bindSignals]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHWebViewCookieManager cookieWhiteBoard]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHWebViewCookieManager removeCookieWithKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CCHMineAccountCenter logoutWithCompletionBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CCHMineAccountCenter updateUserInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeTopConfigurableItemInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeTopConfigurableItemInfo normalIconURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeTopConfigurableItemInfo pressedIconURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeTopConfigurableItemInfo entryURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeTopConfigurableItemInfo entryName]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeTopConfigurableItemInfo entryURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeTopConfigurableItemInfo normalIconURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeTopConfigurableItemInfo pressedIconURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeTopConfigurableItemInfo needLogin]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeTopConfigurableItemInfo needAuthen]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeTopConfigurableItemInfo needShow]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeRealNameGuideViewInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeRealNameGuideViewInfo agreementURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeRealNameGuideViewInfo agreementContent]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeRealNameGuideViewInfo agreementURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeURLsInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeURLsInfo unionQRCodeURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeURLsInfo barcodeURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeURLsInfo unionQRCodeURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeURLsInfo barcodeURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeURLsInfo lotteryURLArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHBindPhoneProxy eventSignal]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHBindPhoneProxy mergeUserInfoFromRemote]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHBindPhoneProxy updateLocalUserMobile:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCHBindPhoneProxy bindPhone]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHBindPhoneProxy processingText]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeHeadLineInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeHeadLineInfo logoURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHeadLineArticlesItemInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHeadLineArticlesItemInfo mainTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHeadLineArticlesItemInfo subTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHeadLineArticlesItemInfo linkURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHeadLineArticlesItemInfo b_vb3rlioyIndex]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHApplicationConfigure applicationConfigure]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHApplicationConfigure loginNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCHApplicationConfigure logoutNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCHApplicationConfigure registerBaseData]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHApplicationConfigure registerPerformanceConfigure]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHApplicationConfigure registerShareKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHApplicationConfigure registerAccountSSOKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHApplicationConfigure registerTitans]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHApplicationConfigure registerWMHertz]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHApplicationConfigure registerMainBoardNotifications]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHCommonSelectedGesture gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CCHCommonSelectedGesture gestureRecognizer:shouldReceiveTouch:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CCHCommonSelectedGesture canPreventGestureRecognizer:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCHCommonSelectedGesture canBePreventedByGestureRecognizer:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCHCommonSelectedGesture touchesBegan:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CCHCommonSelectedGesture touchesMoved:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CCHCommonSelectedGesture touchesEnded:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CCHCommonSelectedGesture touchesCancelled:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CCHCommonSelectedGesture touchesMovedSubject]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHMineItemInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHMineItemInfo iconURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHMineItemInfo linkURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHMineItemInfo iconURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHMineItemInfo linkURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHMineItemInfo needLogin]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHMineItemInfo hasBankCards]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHMineItemInfo bankCardFloor]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeDynamicChildModuleInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeDynamicChildModuleInfo moduleLogoURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeDynamicChildModuleInfo jumpURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicChildModuleInfo needLogin]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicChildModuleInfo needAuthen]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicChildModuleInfo moduleId]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicChildModuleInfo moduleType]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicChildModuleInfo moduleTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicChildModuleInfo moduleLogoURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicChildModuleInfo jumpURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicChildModuleInfo moduleTitleCSS]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicChildModuleInfo moduleLogoCSS]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicChildModuleInfo groupNO]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicChildModuleInfo childModuleContent]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHTabBarItemInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHTabBarItemInfo normalIconURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHTabBarItemInfo selectedIconURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHTabBarItemInfo jumpLinkURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHTabBarItemInfo normalIconURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHTabBarItemInfo selectedIconURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHTabBarItemInfo needLogin]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHTabBarItemInfo jumpLinkURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHMineInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHMineInfo userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHMineInfo mineItemArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeDynamicSubTitleInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicSubTitleInfo subTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeNavigationBarModule readFromWhiteBoard]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeNavigationBarModule bindAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeNavigationBarModule wb_B2CCommand]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeNavigationBarModule wb_C2BCommand]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHAboutConchPortalRegister pageDescription]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHUtil processPermissiveHostURL:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CCHUtil transferToURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCHTitansNamespace jsBridge]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeBannerInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeBannerInfo imgURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeBannerInfo linkURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeBannerInfo imgURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeBannerInfo linkURL]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHAnimateViewManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHTabsInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHTabsInfo tabInfoArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHGestureCodeService sharedGestureCodeService]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHGestureCodeService shouldJudgeUpdateGestureCodeWithComplete:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CCHGestureCodeInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHBindPhoneProxy textBuilder]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeRealNameGuideInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeRealNameGuideInfo guideProcessURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeRealNameGuideInfo guideType]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeRealNameGuideInfo guideProcessURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicListModule bindData]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicListModule readFromWhiteBoard]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicListModule shouldShow]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicListModule b_05kgtjm1StatisticsWith:itemName:part:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicListModule verifyRealName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicListModule linkCommand]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicListModule wb_dynamicList]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeCollectionPageControl updateDots]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeCollectionPageControl activeImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeCollectionPageControl inactiveImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeInfo basePayInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeInfo homeURLsInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeInfo serviceInfoArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeInfo newMessageCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeInfo dynamicInfoArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeInfo headLineInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeInfo picassoDynamicInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeDynamicInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeDynamicInfo modelLogoURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeDynamicInfo areaJumpLinkURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCHHomeDynamicInfo areaLogoURLJSONTransformer]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicInfo modelType]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicInfo modelName]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicInfo modelLogoURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicInfo areaJumpLinkURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicInfo areaLogoURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicInfo mainTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicInfo subTitleArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicInfo bannerInfoArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicInfo needLogin]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicInfo needAuthen]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCHHomeDynamicInfo childModuleArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPQueryParameter parametersDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPQueryParameter mapi_cacheType]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPQueryParameter mapi_returnCacheOnFail]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPQueryParameter mapi_compress]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPQueryParameter mapi_timeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVObject NVObjectRepresentation]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVBaseGroupHolder groupData]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVBaseGroupHolder foldableSectionType]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVBaseModuleSection sectionIndexInModule]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVBaseModuleSection linkType]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVBaseModuleSection hasSectionHeader]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVBaseModuleSection hasSectionFooter]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVBaseModuleSectionMappingCenter updateSectionsForModulesGroups:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVBaseModuleSectionMappingCenter willUpdateSections]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVBaseModuleSectionMappingCenter didUpdateSections]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVBaseModuleSectionMappingCenter sectionsGhost]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVBaseModuleSetting sectionHeaderStyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVBaseModuleSetting defaultLinkType]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVBaseModuleSetting enableLoadingMerge]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVBaseModuleSetting reserveUnUsedModule]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVBaseResultList nextStartIndex]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVBaseResultList extraList]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVBaseResultList queryId]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVBaseResultList loadingStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVBaseResultList loadingMoreStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVDynamicRouterNode baseModulePairWithKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVDynamicRouter sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVDynamicRouter registerKey:forModuleClass:]", 2)}, 0);
setTimeout(function(){hookObjC("+[NVDynamicRouter registeredModuleForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVDynamicRouter registeredModuleKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVDynamicRouter routerDict]", 0)}, 0);
setTimeout(function(){hookObjC("+[CIPDelayRelease delayRelease:withClearBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPError cipf_genericErrorWithCode:callstack:unerlyingError:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CIPError cipf_isGenericError:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPExceptionReport sharedExceptionReport]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPExceptionReport startWithDSN:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CIPExceptionReport applicationDidEnterBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPExceptionReport applicationWillEnterForeground]", 0)}, 0);
setTimeout(function(){hookObjC("+[CIPExceptionReport transferDetailDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPExceptionReport reportError:withDetail:inModule:method:file:line:]", 6)}, 0);
setTimeout(function(){hookObjC("+[CIPExceptionReport reportException:withDetail:inModule:method:file:line:]", 6)}, 0);
setTimeout(function(){hookObjC("-[CIPExceptionReport backgroundTask]", 0)}, 0);
setTimeout(function(){hookObjC("+[CIPMarsLocationCalculator cipf_marsCoordinateFromGPSLocation:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPMarsLocationCalculator cipf_gpsCoordinateFromMARSCoordinate:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPMarsLocationCalculator cipf_marsCoordinateFromGPSCoordinate:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPMarsLocationCalculator outOfChina:longitude:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPMarsLocationCalculator transformLatitude:y:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPMarsLocationCalculator transformLongitude:y:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CIPOperationQueue addOperation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CIPOperationQueue busyThreads]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPOperationQueue cancelAllOperations]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPOperationQueue waitUntilAllOperationsAreFinished]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPOperationQueue threadCount]", 0)}, 0);
setTimeout(function(){hookObjC("+[CIPRavenUtils ravenClient]", 0)}, 0);
setTimeout(function(){hookObjC("+[CIPRavenUtils startWithDSN:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPRavenUtils reportMessage:additionalExtra:additionalTags:method:file:line:]", 6)}, 0);
setTimeout(function(){hookObjC("+[CIPRavenUtils reportException:additionalExtra:additionalTags:]", 3)}, 0);
setTimeout(function(){hookObjC("+[CIPRavenUtils sendData]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPTimer innerTimerTick_:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CIPTimer fireDate]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPTimer finallyInvalidate]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPTimer userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPTimer addToRunloop:forMode:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CIPTimer innerTimer]", 0)}, 0);
setTimeout(function(){hookObjC("+[CIPURLComponents componentsWithURL:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CIPURLComponents queryParameterDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPURLComponents allQueryItems]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPURLComponents URL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPURLComponents queryItems]", 0)}, 0);
setTimeout(function(){hookObjC("-[CIPURLComponents sameQueryKeySupported]", 0)}, 0);
setTimeout(function(){hookObjC("+[CIPVersion mainBundleVersion]", 0)}, 0);
setTimeout(function(){hookObjC("+[CIPVersion osVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[CLLocation cipf_latitude]", 0)}, 0);
setTimeout(function(){hookObjC("-[CLLocation cipf_longitude]", 0)}, 0);
setTimeout(function(){hookObjC("-[CLLocation cipf_latitudeString]", 0)}, 0);
setTimeout(function(){hookObjC("-[CLLocation cipf_longitudeString]", 0)}, 0);
setTimeout(function(){hookObjC("-[CLLocation cipf_formatDistanceFromLocation:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPKeychain defaultServiceName]", 0)}, 0);
setTimeout(function(){hookObjC("+[CIPKeychain passwordForAccount:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPKeychain passwordForAccount:service:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPKeychain passwordForAccount:service:group:error:]", 4)}, 0);
setTimeout(function(){hookObjC("+[CIPKeychain storeAccount:password:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPKeychain storeAccount:password:service:]", 3)}, 0);
setTimeout(function(){hookObjC("+[CIPKeychain storeAccount:password:service:group:updateExisting:error:]", 6)}, 0);
setTimeout(function(){hookObjC("+[CIPKeychain storeAccount:password:service:group:forceUpdating:error:]", 6)}, 0);
setTimeout(function(){hookObjC("+[CIPKeychain deletePasswordForAccount:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPKeychain deletePasswordForAccount:serviceName:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPKeychain deletePasswordForAccount:serviceName:group:error:]", 4)}, 0);
setTimeout(function(){hookObjC("+[CIPKeychain clearPasswordsForServiceName:group:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[CIPKeychain storeAccount:password:service:attributeAccessible:group:updateExisting:forceUpdating:error:]", 8)}, 0);
setTimeout(function(){hookObjC("+[CIPKeychain deleteItemsWithQuery:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPKeychain clearOriginError:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CIPKeychain assignErrorWithCode:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CIPKeychain queryDictionaryService:group:account:]", 3)}, 0);
setTimeout(function(){hookObjC("+[CIPKeychainHelper appIdentifierPrefix]", 0)}, 0);
setTimeout(function(){hookObjC("+[CIPKeychainHelper availableAccessGroup]", 0)}, 0);
setTimeout(function(){hookObjC("-[AsyncReadPacket readLengthForNonTerm]", 0)}, 0);
setTimeout(function(){hookObjC("-[AsyncReadPacket readLengthForTerm]", 0)}, 0);
setTimeout(function(){hookObjC("-[AsyncReadPacket readLengthForTermWithPreBuffer:found:]", 2)}, 0);
setTimeout(function(){hookObjC("-[AsyncReadPacket prebufferReadLengthForTerm]", 0)}, 0);
setTimeout(function(){hookObjC("-[AsyncReadPacket searchForTermAfterPreBuffering:]", 1)}, 0);
setTimeout(function(){hookObjC("-[GCDAsyncSocketPreBuffer ensureCapacityForWrite:]", 1)}, 0);
setTimeout(function(){hookObjC("-[GCDAsyncSocketPreBuffer availableBytes]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCDAsyncSocketPreBuffer readBuffer]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCDAsyncSocketPreBuffer didRead:]", 1)}, 0);
setTimeout(function(){hookObjC("-[GCDAsyncSocketPreBuffer availableSpace]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCDAsyncSocketPreBuffer writeBuffer]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCDAsyncSocketPreBuffer didWrite:]", 1)}, 0);
setTimeout(function(){hookObjC("-[GCDAsyncReadPacket ensureCapacityForAdditionalDataOfLength:]", 1)}, 0);
setTimeout(function(){hookObjC("-[GCDAsyncReadPacket optimalReadLengthWithDefault:shouldPreBuffer:]", 2)}, 0);
setTimeout(function(){hookObjC("-[GCDAsyncReadPacket readLengthForNonTermWithHint:]", 1)}, 0);
setTimeout(function(){hookObjC("-[GCDAsyncReadPacket readLengthForTermWithHint:shouldPreBuffer:]", 2)}, 0);
setTimeout(function(){hookObjC("-[GCDAsyncReadPacket readLengthForTermWithPreBuffer:found:]", 2)}, 0);
setTimeout(function(){hookObjC("-[GCDAsyncReadPacket searchForTermAfterPreBuffering:]", 1)}, 0);
setTimeout(function(){hookObjC("+[COVDataManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[COVDataManager checkOverlayInstall]", 0)}, 0);
setTimeout(function(){hookObjC("-[COVDataManager zipPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[COVDataManager covDataFilePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[COVDataManager deleteFileAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[COVDataManager saveAndUploadGcdaCompletion:]", 1)}, 0);
setTimeout(function(){hookObjC("-[COVDataManager covDisabled]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVAutoGaManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaManager eventArrayCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaManager didEnterBackGround:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaManager eventsQueueKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaManager enqueueEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaManager pop:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaManager push:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaManager waitDuration]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaManager upload:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaManager postEvent:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaManager postEvent:bid:custom:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaManager trackMPTEvent:custom:]", 2)}, 0);
setTimeout(function(){hookObjC("+[NVAutoGaManager mapGAEvent:toBusinessValue:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaManager trackLXMGEEvent:bid:custom:]", 3)}, 0);
setTimeout(function(){hookObjC("+[NVAutoGaManager environmentKeys]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVAutoGaManager writeToLogan:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaManager enableMock]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaManager mockServerUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaManager logURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaManager logGAInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaManager mockHost]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaManager envBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaManager judasUploadType]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaManager eventArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaManager logQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaManager currentLogUrl]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVAutoGaParameter cacheValidDuration]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVAutoGaParameter networkType]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVAutoGaParameter networkInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVAutoGaParameter novaDefaultParameter]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVAutoGaParameter NV_uuidString]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaParameter app_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaParameter page_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaParameter refer_page_name]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaParameter request_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaParameter refer_request_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaParameter city_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaParameter locate_city_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaParameter element_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaParameter event_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaParameter app_version]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaParameter app_market]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaParameter market_source]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaParameter device_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaParameter platform_version]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaParameter key_chain_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaParameter log_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaParameter bundle_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaParameter direct_type]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaParameter user_notification_switch]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaParameter location_auth_status]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaParameter background_refresh_status]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAutoGaParameter bluetooth_status]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient autoGaPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient postGaArray:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERAction execute:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERAction innerExecuting]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERAction innerEnable]", 0)}, 0);
setTimeout(function(){hookObjC("+[ERBinder binderWithAssociateObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERBinder bindNode:toNode:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERBinder twoWayBindNode:toNode:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERBinder bindEvent:toHandler:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERContainer changeTransaction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERContainer beginTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERContainer endTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERContainer rollbackTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERContainer addObject:at:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERContainer appendObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERContainer insertObjectFront:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERContainer deleteObjectAt:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERContainer deleteObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERContainer deleteFirstObject]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERContainer deleteLastObject]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERContainer exchangeObject:at:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERContainer objectAtIndexedSubscript:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERContainer updateNode]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERContainer addObjectsFromArray:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERContainer moveObjectAtIndex:toIndex:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERContainer inTransaction]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERContainer insideCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERContainer immutableArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERContainerIndexedChange beEffectBy:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERContainerIndexedChange needDestory]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERContainerIndexedChange stateController]", 0)}, 0);
setTimeout(function(){hookObjC("+[ERContainerTransactionChange transactionChange]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERContainerTransactionChange appendChange:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ERContainerFlushChange flushChange]", 0)}, 0);
setTimeout(function(){hookObjC("+[ERContainerMoveChange changeFromSource:toDestnation:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERControlEventsProxy er_sendAction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EREvent bindHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERKeepMainThreadTransform next:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERNode apply:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode generatorEvent]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERNode keepMainThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERSectionPattern cellPattern:binding:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERSectionPattern cellPatternForData:sectionVM:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERSectionPattern cellPatterns]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERBlockDeliveredListener next:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERBlockListener next:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERCancelableBag addCancelable:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERCancelableBag addCancelBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERCancelableBag removeCancelable:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERCombineTransform next:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERCombineTransform breakLinking]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERCombineTransform lastValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERCombineTransformGroup nextValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERCombineTransformGroup removeTransform:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERDelayTransform next:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERDeliverTransform next:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERDistinctTransform next:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERFilteredTransform next:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERFlattenTransform next:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERFlattenTransform _superNext:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERMapTransform next:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERNode er_dotString]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERTransform er_dotString]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERNodeGraphVisitor visitNode:deep:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERNodeGraphVisitor visitTransform:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNodeGraphVisitor dotFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERNode mapEach:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode checkRelease]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERNode map:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode filter:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode skip:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode take:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode ignore:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode select:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode then:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode mapReplace:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode deliverOn:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode deliverOnMainQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERNode distinctUntilChanged]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERNode flattenMap:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode throttleOnMainQueue:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode throttle:queue:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERNode delay:queue:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERNode delayOnMainQueue:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode syncWith:transform:revert:]", 3)}, 0);
setTimeout(function(){hookObjC("-[ERNode syncWith:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ERNode merge:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ERNode zip:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ERNode combine:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNodeVisitElement accept:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode er_visitElementWithDeep:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode traversal:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ERNode value:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode named:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode next:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERNode hasListener]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERNode addListener:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode listen:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode listen:on:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERNode listenOnMainQueue:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode removeListener:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode downstreamNodes]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERNode downstreamTransforms]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERNode hasDownstreamNode]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERNode linkTo:transform:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERNode linkTo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode removeDownstreamNode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode removeDownstreamTransform:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode removeTransform:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode removeDownstreamNodes]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERNode removeUpstreamNode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode removeUpstreamTransform:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERNode removeUpstreamNodes]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERNode upstreamNodes]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERNode upstreamTransforms]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERNode hasUpstreamNode]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERNode hasInsideRetain]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERPathTrampoline nodeWithKeyPath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERPathTrampoline needSyncWithKeyPath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERPathTrampoline objectForKeyedSubscript:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERPathTrampoline observeValueForKeyPath:ofObject:change:context:]", 4)}, 0);
setTimeout(function(){hookObjC("-[ERQueue enqueue:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERQueue contains:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERSenderList appendSender:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERSenderList contains:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ERThrottleTransform next:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERThrottleTransform _superNext:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERTransform next:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERTransform linkNode:to:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERTransform breakLinking]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERZipTransform next:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ERZipTransform breakLinking]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERZipTransform nextQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERZipTransformGroup nextValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[ERZipTransformGroup removeTransform:]", 1)}, 0);
setTimeout(function(){hookObjC("-[FBBlockStrongRelationDetector trueRelease]", 0)}, 0);
setTimeout(function(){hookObjC("-[FBIvarReference indexInIvarLayout]", 0)}, 0);
setTimeout(function(){hookObjC("-[FBIvarReference objectReferenceFromObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[FBIvarReference namePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[FBNodeEnumerator nextObject]", 0)}, 0);
setTimeout(function(){hookObjC("-[FBObjectInStructReference objectReferenceFromObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[FBObjectInStructReference indexInIvarLayout]", 0)}, 0);
setTimeout(function(){hookObjC("-[FBObjectInStructReference namePath]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXColorPreviewBox backgroundPatternImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXArgumentInputViewFactory canEditFieldWithTypeEncoding:currentValue:]", 2)}, 0);
setTimeout(function(){hookObjC("-[FLEXExplorerToolbar layoutSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXExplorerToolbar descriptionVerticalPadding]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXExplorerToolbar horizontalPadding]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXExplorerToolbar selectItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXExplorerToolbar hierarchyItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXExplorerToolbar moveItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXExplorerToolbar globalsItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXExplorerToolbar closeItem]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXExplorerToolbar dragHandle]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXExplorerToolbar toolbarItems]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXFileBrowserSearchOperation searchString]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXHeapEnumerator enumerateLiveObjectsUsingBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[FLEXHeapEnumerator updateRegisteredClasses]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXNetworkCurlLogger curlCommandString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[FLEXInternalRequestState dataAccumulator]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXNetworkObserver sharedObserver]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXNetworkObserver nextRequestID]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXNetworkObserver sniffWithoutDuplicationForObject:selector:sniffingBlock:originalImplementationBlock:]", 4)}, 0);
setTimeout(function(){hookObjC("+[FLEXNetworkObserver injectIntoNSURLConnectionCancel]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXNetworkObserver injectIntoNSURLSessionTaskResume]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXNetworkObserver injectIntoNSURLConnectionAsynchronousClassMethod]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXNetworkObserver injectIntoNSURLConnectionSynchronousClassMethod]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXNetworkObserver injectIntoNSURLSessionAsyncDataAndDownloadTaskMethods]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXNetworkObserver injectIntoNSURLSessionAsyncUploadTaskMethods]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXNetworkObserver mechansimFromClassMethod:onClass:]", 2)}, 0);
setTimeout(function(){hookObjC("+[FLEXNetworkObserver asyncCompletionWrapperForRequestID:mechanism:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("+[FLEXNetworkObserver requestIDForConnectionOrTask:]", 1)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkObserver performBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkObserver requestStateForRequestID:]", 1)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkObserver removeRequestStateForRequestID:]", 1)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkObserver requestStatesForRequestIDs]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkObserver connection:willSendRequest:redirectResponse:delegate:]", 4)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkObserver connection:didReceiveResponse:delegate:]", 3)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkObserver connection:didReceiveData:delegate:]", 3)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkObserver connectionDidFinishLoading:delegate:]", 2)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkObserver connection:didFailWithError:delegate:]", 3)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkObserver connectionWillCancel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkObserver URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:delegate:]", 6)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkObserver URLSession:dataTask:didReceiveResponse:completionHandler:delegate:]", 5)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkObserver URLSession:dataTask:didBecomeDownloadTask:delegate:]", 4)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkObserver URLSession:dataTask:didReceiveData:delegate:]", 4)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkObserver URLSession:task:didCompleteWithError:delegate:]", 4)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkObserver URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:delegate:]", 6)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkObserver URLSession:task:didFinishDownloadingToURL:data:delegate:]", 5)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkObserver URLSessionTaskWillResume:]", 1)}, 0);
setTimeout(function(){hookObjC("+[FLEXNetworkRecorder defaultRecorder]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkRecorder responseCacheByteLimit]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkRecorder networkTransactions]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkRecorder cachedResponseBodyForTransaction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkRecorder clearRecordedActivity]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkRecorder recordRequestWillBeSentWithRequestID:request:redirectResponse:]", 3)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkRecorder recordResponseReceivedWithRequestID:response:]", 2)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkRecorder recordDataReceivedWithRequestID:dataLength:]", 2)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkRecorder recordLoadingFinishedWithRequestID:responseBody:]", 2)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkRecorder recordLoadingFailedWithRequestID:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkRecorder recordMechanism:forRequestID:]", 2)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkRecorder postNewTransactionNotificationWithTransaction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkRecorder postUpdateNotificationForTransaction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkRecorder shouldCacheMediaResponses]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkRecorder responseCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkRecorder orderedTransactions]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkRecorder networkTransactionsForRequestIdentifiers]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkTransaction cachedRequestBody]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXNetworkTransaction readableStringFromTransactionState:]", 1)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkTransaction requestID]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkTransaction requestMechanism]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkTransaction transactionState]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkTransaction receivedDataLength]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkTransaction responseThumbnail]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkDetailRow detailText]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXNetworkDetailRow selectionFuture]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXRealmDatabaseManager queryAllTables]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXResources closeIcon]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXResources dragHandle]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXResources globeIcon]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXResources hierarchyIndentPattern]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXResources listIcon]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXResources moveIcon]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXResources selectIcon]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXResources textPlainIcon]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXResources htmlIcon]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXResources audioIcon]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXResources jsIcon]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXResources plistIcon]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXResources textIcon]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXResources videoIcon]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXResources xmlIcon]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXResources binaryIcon]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXRuntimeUtility prettyNameForProperty:]", 1)}, 0);
setTimeout(function(){hookObjC("+[FLEXRuntimeUtility typeEncodingForProperty:]", 1)}, 0);
setTimeout(function(){hookObjC("+[FLEXRuntimeUtility fullDescriptionForProperty:]", 1)}, 0);
setTimeout(function(){hookObjC("+[FLEXRuntimeUtility valueForProperty:onObject:]", 2)}, 0);
setTimeout(function(){hookObjC("+[FLEXRuntimeUtility descriptionForIvarOrPropertyValue:]", 1)}, 0);
setTimeout(function(){hookObjC("+[FLEXRuntimeUtility tryAddPropertyWithName:attributes:toClass:]", 3)}, 0);
setTimeout(function(){hookObjC("+[FLEXRuntimeUtility prettyNameForIvar:]", 1)}, 0);
setTimeout(function(){hookObjC("+[FLEXRuntimeUtility valueForIvar:onObject:]", 2)}, 0);
setTimeout(function(){hookObjC("+[FLEXRuntimeUtility prettyNameForMethod:isClassMethod:]", 2)}, 0);
setTimeout(function(){hookObjC("+[FLEXRuntimeUtility prettyArgumentComponentsForMethod:]", 1)}, 0);
setTimeout(function(){hookObjC("+[FLEXRuntimeUtility performSelector:onObject:withArguments:error:]", 4)}, 0);
setTimeout(function(){hookObjC("+[FLEXRuntimeUtility enumerateTypesInStructEncoding:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("+[FLEXRuntimeUtility attributesDictionaryForProperty:]", 1)}, 0);
setTimeout(function(){hookObjC("+[FLEXRuntimeUtility appendName:toType:]", 2)}, 0);
setTimeout(function(){hookObjC("+[FLEXRuntimeUtility readableTypeForEncoding:]", 1)}, 0);
setTimeout(function(){hookObjC("+[FLEXRuntimeUtility valueForPrimitivePointer:objCType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[FLEXSQLiteDatabaseManager queryAllTables]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXSQLiteDatabaseManager executeQuery:]", 1)}, 0);
setTimeout(function(){hookObjC("-[FLEXSQLiteDatabaseManager objectForColumnIndex:stmt:]", 2)}, 0);
setTimeout(function(){hookObjC("-[FLEXSQLiteDatabaseManager stringForColumnIndex:stmt:]", 2)}, 0);
setTimeout(function(){hookObjC("-[FLEXSQLiteDatabaseManager dataForColumnIndex:stmt:]", 2)}, 0);
setTimeout(function(){hookObjC("+[FLEXSystemLogMessage logMessageFromASLMessage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[FLEXSystemLogMessage messageText]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXSystemLogMessage messageID]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXTableColumnHeader changeSortStatusWithType:]", 1)}, 0);
setTimeout(function(){hookObjC("+[FLEXUtility stringForCGRect:]", 1)}, 0);
setTimeout(function(){hookObjC("+[FLEXUtility applicationImageName]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXUtility applicationName]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXUtility safeDescriptionForObject:]", 1)}, 0);
setTimeout(function(){hookObjC("+[FLEXUtility stringByEscapingHTMLEntitiesInString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[FLEXUtility infoPlistSupportedInterfaceOrientationsMask]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXUtility searchBarPlaceholderText]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXUtility stringFromRequestDuration:]", 1)}, 0);
setTimeout(function(){hookObjC("+[FLEXUtility statusCodeStringFromURLResponse:]", 1)}, 0);
setTimeout(function(){hookObjC("+[FLEXUtility dictionaryFromQuery:]", 1)}, 0);
setTimeout(function(){hookObjC("+[FLEXUtility inflatedDataFromCompressedData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[FLEXUtility allWindows]", 0)}, 0);
setTimeout(function(){hookObjC("+[FLEXUtility swizzledSelectorForSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("+[FLEXUtility instanceRespondsButDoesNotImplementSelector:class:]", 2)}, 0);
setTimeout(function(){hookObjC("+[FLEXUtility replaceImplementationOfKnownSelector:onClass:withBlock:swizzledSelector:]", 4)}, 0);
setTimeout(function(){hookObjC("+[FLEXUtility replaceImplementationOfSelector:withSelector:forClass:withMethodDescription:implementationBlock:undefinedBlock:]", 6)}, 0);
setTimeout(function(){hookObjC("-[FLEXWindow pointInside:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[FLEXWindow shouldAffectStatusBarAppearance]", 0)}, 0);
setTimeout(function(){hookObjC("-[FLEXWindow canBecomeKeyWindow]", 0)}, 0);
setTimeout(function(){hookObjC("-[FMStatement useCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[FMStatement inUse]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseHoverBottomModule shouldAlwaysBottom]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseHoverBottomModule shouldAlwaysBringToFront]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseHoverTopModule shouldAlwaysBringToFront]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseListModule shouldShow]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseListModule makeupSectionItemList]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseListModule makeupSectionItemWithData:cellItems:index:]", 3)}, 0);
setTimeout(function(){hookObjC("-[GCBaseListModule didSelectedSectionItem:cellItem:withIndexPath:]", 3)}, 0);
setTimeout(function(){hookObjC("-[GCBaseListModule sectionListMode]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseListModule resultListData]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseListModule disableAutoDeselect]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseListModule disposableForReseultListData]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule keyboardWillHideActions:]", 1)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule keyboardWillShowActions:]", 1)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule rac_moduleWillReset]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule rac_moduleWillAppear]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule rac_moduleDidAppear]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule rac_moduleWillDisappear]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule rac_moduleDidDisappear]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule rac_moduleWillAppearOnScreen]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule rac_moduleDidDisappearFromScreen]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule rac_moduleFrameDidUpdate]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule validModuleIndexPaths:]", 1)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule forwardingTargetForSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule gcModuleOpenURLAction:]", 1)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule shouldShow]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule moduleNeedRefresh]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule moduleDidReactive]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule sectionHeaderStyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule cellForEmptyStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule heightForEmptyStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule cellForLoadingStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule cellForLoadingFailStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule heightForLoadingStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule heightForLoadingFailStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule retryForLoadingFail]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule cellForLoadingMoreStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule cellForLoadingMoreFailStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule heightForLoadingMoreStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule heightForLoadingMoreFailStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule needLoadMore]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule retryForLoadingMoreFail]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule linkTypeInSection:]", 1)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule needModuleIsOnScreenNotice]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule needUpdateModules]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule needUpdateSections]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule whiteBoard]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule moduleSetting]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule keyboardDismissMode]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule loadingStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule loadingMoreStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule cellForEmpty]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule stringForEmptyMessage]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule cellForLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule stringForLoadingMessage]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule cellForLoadingFail]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule stringForLoadingFailMessage]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule cellForLoadingMore]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule cellForLoadingMoreFail]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseModule gc_mge_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseSectionItemsModule shouldShow]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseSectionItemsModule linkTypeInSection:]", 1)}, 0);
setTimeout(function(){hookObjC("-[GCBaseSectionItemsModule sectionItemList]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCBaseSectionItemsModule dataSource]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCMGEInfo elementID]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCMGEInfo elementIndex]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCMGEInfo eventValue]", 0)}, 0);
setTimeout(function(){hookObjC("+[GCMGEInfo gcMGEInfoWithCategory:bid:elementID:labs:]", 4)}, 0);
setTimeout(function(){hookObjC("+[GCMGEInfo gcMGEInfoWithCategory:bid:elementID:labs:elementIndex:eventValue:]", 6)}, 0);
setTimeout(function(){hookObjC("+[GCMGEInfo gcMGEInfoWithCategory:bid:elementID:labs:elementIndex:eventValue:cid:]", 7)}, 0);
setTimeout(function(){hookObjC("-[GCMGEInfo val_labs]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCMGEInfo val_labs_dict]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCMGEInfo val_customs]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCMGEInfo val_customs_dict]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCMGEInfo val_category]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCMGEInfo val_bid]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCMGEInfo val_cid]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCMGEInfo val_elementID]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCMGEInfo val_elementIndex]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCMGEInfo val_eventValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCMGEInfo useOutdated]", 0)}, 0);
setTimeout(function(){hookObjC("+[GCPair pairWithKey:value:]", 2)}, 0);
setTimeout(function(){hookObjC("-[GCPhotoInfo imageUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCPhotoConfig progresCallBack]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCReportViewGAManager marksForLoggedMGEInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCReportViewGAManager disposablesForDelay]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCShareInfo shareTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCShareInfo shareContent]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCShareInfo shareUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCShareInfo shareImageUrl]", 0)}, 0);
setTimeout(function(){hookObjC("+[GCStyle sharedThemeStyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCStyle themePackageClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCStyle themePackage]", 0)}, 0);
setTimeout(function(){hookObjC("+[GCStyle checkThemePackageAvailable:]", 1)}, 0);
setTimeout(function(){hookObjC("+[GCStyle performOnDP:onMT:]", 2)}, 0);
setTimeout(function(){hookObjC("+[GCStyle performVauleOnDP:onMT:]", 2)}, 0);
setTimeout(function(){hookObjC("+[GCStyle performValueOnDP:onMT:]", 2)}, 0);
setTimeout(function(){hookObjC("+[GCStyle selectValueOnDP:onMT:]", 2)}, 0);
setTimeout(function(){hookObjC("+[GCStyle styleForDP]", 0)}, 0);
setTimeout(function(){hookObjC("+[GCStyle styleForMT]", 0)}, 0);
setTimeout(function(){hookObjC("+[GCStyle styleForMTTravel]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCStyle performValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCStyle selectValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCStyle executePerform]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCStyle executePerformValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCStyle executeSelectValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCStyle dictForSelectValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCStyle dictForPerform]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCStyle dictForPerformValue]", 0)}, 0);
setTimeout(function(){hookObjC("+[GCStyleThemePackage performOnThemeDP:onThemeMT:]", 2)}, 0);
setTimeout(function(){hookObjC("+[GCStyleThemePackage selectValueOnThemeDP:onThemeMT:]", 2)}, 0);
setTimeout(function(){hookObjC("-[GCURLAction nvURLAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCURLAction portalContext]", 0)}, 0);
setTimeout(function(){hookObjC("-[GCURLAction dpUserInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo query_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo sort_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo dealgroup_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo deal_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo category_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo receipt_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo order_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo region_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo promo_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo checkin_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo book_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo member_card_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo shop_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo review_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo sectionIndex]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo selectedIndex]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo marketing_source]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo ad_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo biz_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo prepay_info]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo feed_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo topic_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo target_user_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo service_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo expert_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo bu_id]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGAUserInfo book_status]", 0)}, 0);
setTimeout(function(){hookObjC("+[KLNClass classFromCString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KLNClass targetClass]", 0)}, 0);
setTimeout(function(){hookObjC("+[KLNFunction functionWithCPointer:]", 1)}, 0);
setTimeout(function(){hookObjC("+[KLNImageReader readSectionName:fromAllImageWithStep:usingBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("+[KLNImageReader readSectionName:fromImageWithInfo:andStep:usingBlock:]", 4)}, 0);
setTimeout(function(){hookObjC("+[KLNKylin sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[KLNKylin lazyInitilizeAll]", 0)}, 0);
setTimeout(function(){hookObjC("-[KLNKylin objectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KLNKylin arrayForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KLNKylin stringForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KLNKylin stringArrayForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KLNKylin classForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KLNKylin classArrayForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KLNKylin executeForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KLNKylin executeArrayForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[KLNMethod methodFromCString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KLNMethod executeWithTarget:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KLNMethod methodType]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVCoverViewDataCenter sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVCoverViewDataCenter resolveInstanceMethod:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVCustomSegment internalInit]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCustomSegment layoutSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCustomSegment segmentSelectAtIndex_:animated_:finished_:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVCustomSegment segmentSelected_:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVCustomSegment selectSegmentAtIndex:animated:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVCustomSegment stringComponents]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCustomSegment selectedIndex]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCustomSegment animatedSelection]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCustomSegment backgroundImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCustomSegment knobImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCustomSegment defaultSegmentImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCustomSegment progressIncrementImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCustomSegment progressImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCustomSegment progressSupported]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCustomSegment imageSectionEdge]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCustomSegment labelSectionEdge]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNil respondsToSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNil forwardInvocation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNil methodSignatureForSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("+[LogReportSwitcher shareInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[LogReportSwitcher fillContent:checkVersion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[LogReportSwitcher __typeArrayPackageNewDic:]", 1)}, 0);
setTimeout(function(){hookObjC("-[LogReportSwitcher configVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[LogReportSwitcher checkIsFetchServerData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[LogReportSwitcher serverURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[LogReportSwitcher requestReportResultWithAppID:]", 1)}, 0);
setTimeout(function(){hookObjC("-[LogReportSwitcher handleConfigData:from:]", 2)}, 0);
setTimeout(function(){hookObjC("-[LogReportSwitcher clearCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[LogReportSwitcher decodeGzip:]", 1)}, 0);
setTimeout(function(){hookObjC("-[LogReportSwitcher appVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[LogReportSwitcher deviceModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[LogReportSwitcher platformString]", 0)}, 0);
setTimeout(function(){hookObjC("-[LogReportSwitcher handleCatResponse:]", 1)}, 0);
setTimeout(function(){hookObjC("-[LogReportSwitcher switchUserDefault]", 0)}, 0);
setTimeout(function(){hookObjC("-[LogReportSwitcher appIDStr]", 0)}, 0);
setTimeout(function(){hookObjC("-[LogReportSwitcher parametersDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[LogReportSwitcher haveRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[LogReportSwitcher hertzConfigBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[LogReportSwitcher switchTypeDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[SwitchProperty configId]", 0)}, 0);
setTimeout(function(){hookObjC("-[SwitcherTask startRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[SwitcherTask URLSession:dataTask:didReceiveResponse:completionHandler:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SwitcherTask URLSession:dataTask:didReceiveData:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SwitcherTask URLSession:task:didCompleteWithError:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SwitcherTask mutableData]", 0)}, 0);
setTimeout(function(){hookObjC("+[IPFCellularData shareCellularData]", 0)}, 0);
setTimeout(function(){hookObjC("-[IPFCellularData cellularDataRestrictedState]", 0)}, 0);
setTimeout(function(){hookObjC("-[IPFCellularData cellularData]", 0)}, 0);
setTimeout(function(){hookObjC("+[IPFConfigCenter sharedConfigCenter]", 0)}, 0);
setTimeout(function(){hookObjC("+[IPFConfigCenter allocWithZone:]", 1)}, 0);
setTimeout(function(){hookObjC("-[IPFConfigCenter fetchAllConfigInformationIfNeed]", 0)}, 0);
setTimeout(function(){hookObjC("-[IPFConfigCenter fetchAllConfigInformationInConfigCenterQueueIfNeed]", 0)}, 0);
setTimeout(function(){hookObjC("-[IPFConfigCenter needFetchAllConfigInformation]", 0)}, 0);
setTimeout(function(){hookObjC("-[IPFConfigCenter pathOfConfigPlistFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[IPFConfigCenter usedWebP]", 0)}, 0);
setTimeout(function(){hookObjC("-[IPFConfigCenter configDict]", 0)}, 0);
setTimeout(function(){hookObjC("+[IPFNotificationCategoryManager userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:]", 3)}, 0);
setTimeout(function(){hookObjC("+[IPFNotificationCategoryManager handleOpenUrl:]", 1)}, 0);
setTimeout(function(){hookObjC("+[IPFScreenShotBusinessManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[IPFScreenShotBusinessManager registerScreenShotNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("-[IPFScreenShotBusinessManager unregisterScreenShotNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("-[IPFScreenShotBusinessManager lastObserver]", 0)}, 0);
setTimeout(function(){hookObjC("-[IPFScreenShotBusinessManager observerArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[IPFUtility ipf_encodeBase64String:]", 1)}, 0);
setTimeout(function(){hookObjC("+[IPFUtility ipf_rawDataFromBase64EncodedString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[IPFUtility ipf_AES128EncryptWithKey:rawData:]", 2)}, 0);
setTimeout(function(){hookObjC("+[IPFUtility ipf_gzipCompressData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[IPFWrapperStatistics trackMGE:]", 1)}, 0);
setTimeout(function(){hookObjC("+[IPFYapDatabaseManager platformDatabase]", 0)}, 0);
setTimeout(function(){hookObjC("+[METAMapKeySetting amapKey]", 0)}, 0);
setTimeout(function(){hookObjC("+[METDelayOperation operationWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[METDelayOperation delayStartWithTimeinterval:]", 1)}, 0);
setTimeout(function(){hookObjC("-[METDelayOperation excuteBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[METDelayOperation hasExecuted]", 0)}, 0);
setTimeout(function(){hookObjC("+[METPushNotificationSettingReminder sharedReminder]", 0)}, 0);
setTimeout(function(){hookObjC("-[METPushNotificationSettingReminder checkPushNotificationSettingForUpdate]", 0)}, 0);
setTimeout(function(){hookObjC("-[METPushNotificationSettingReminder checkPushNotificationSettingForUserTriggering]", 0)}, 0);
setTimeout(function(){hookObjC("-[METPushNotificationSettingReminder notificationSettingEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[METPushNotificationSettingReminder oldVersion]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTStartupCheckService defaultCenter]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTStartupCheckService checkShouldShowRateNotify]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsWitnessObserver observedObjects]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAnalyticsWitnessObserver observeValueForKeyPath:ofObject:change:context:]", 4)}, 0);
setTimeout(function(){hookObjC("+[MRDGeoHashDAO defaultDAO]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDGeoHashDAO addLocation:cityInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MRDGeoHashDAO addLocation:cityInfo:rgsLevel:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MRDGeoHashDAO _addGeoHashString:withCityInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MRDGeoHashDAO _cachedPlaceMarkWithGeoHashString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MRDGeoHashDAO cachedPlaceMarkWithLocation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MRDGeoHashDAO cachedPlaceMarkWithLocation:rgsLevel:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MRDGeoHashDAO removePlaceMarkWithGeoHashString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MRDGeoHashDAO removeAllPlaceMarksExceptForTheLastThirty]", 0)}, 0);
setTimeout(function(){hookObjC("+[MRDGeoHashDAO geohashStringWithLocation:precision:]", 2)}, 0);
setTimeout(function(){hookObjC("+[MRDGeoHashService encodeGeohash:withPrecision:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationBluetoothWorker saveModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationBluetoothWorker configWithBLEScanLimit:BLEScanTimeout:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationBluetoothWorker scanForPeripherals]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationBluetoothWorker stopScan]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationBluetoothWorker scanIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationBluetoothWorker increaseScanCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationBluetoothWorker addScanedPeripheral:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationBluetoothWorker clearScanedPeripherals]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationBluetoothWorker blesArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationBluetoothWorker lockOPUsingBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationBluetoothWorker centralManagerDidUpdateState:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationBluetoothWorker centralManager:didDiscoverPeripheral:advertisementData:RSSI:]", 4)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationBluetoothWorker bleCentralManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationBluetoothWorker bleScanedCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationBluetoothWorker cacheModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationBluetoothWorker scanedPeripherals]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationBluetoothWorker bleScanTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationBluetoothWorker peripheralsLock]", 0)}, 0);
setTimeout(function(){hookObjC("+[MRDLocationConfigService updateLocationConfigifNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("+[MRDLocationConfigService configArchiveFilePath]", 0)}, 0);
setTimeout(function(){hookObjC("+[MRDLocationConfigService fetchLocationConfigInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[MRDLocationConfigService saveDynmaicStrategyIfNeeded:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MRDOnceLocatingContext invokeWithLocation:placeMark:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MRDOnceLocatingContext timeoutLogicWithWaimai]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDOnceLocatingContext safe_callbackWithLocation:placemark:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[MRDLocationManager authorizationStatus]", 0)}, 0);
setTimeout(function(){hookObjC("+[MRDLocationManager defaultManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager requestAlwaysAuthorization]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager requestWhenInUseAuthorization]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager startiBeaconService]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager startUpdatingLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager stopUpdatingLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager startMonitoringSignificantLocationChanges]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager stopMonitoringSignificantLocationChanges]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager reverseGeoLocation:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager reverseGeoLocation:rgsLevel:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager reverseGeoLocation:timeout:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager clearLocateOnceArrayIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager handleLocationOnceBlocksWithLocation:placemark:error:wm:]", 4)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager resetLocationOnceBlocksArrayIfNeededWithStatus:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager handleOnceLocation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager handleOnceWMLocation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager startLocatingAutomatically]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager startBackGroundLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager handleNetworkTask:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager releasedDelegatesAfterUpdate]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager startMonitoringWithRegion:delegate:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager stopMonitoringRegion:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager addCircleRegionForMonitoringWithCenter:radius:identifier:delegate:]", 4)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager locationManager:didExitRegion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager locationManager:didEnterRegion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager locationManager:didStartMonitoringForRegion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager locationManager:monitoringDidFailForRegion:withError:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager locationManager:didRangeBeacons:inRegion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager locationManager:rangingBeaconsDidFailForRegion:withError:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager locationManager:didUpdateLocations:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager locationManager:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager locationManager:didChangeAuthorizationStatus:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager shouldSendInfoToMarsServerWith:oldLocation:lastLocationRequestDate:lastAutomaticllyLocationRequestDate:locationInfo:sysLocationFailed:]", 6)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager ibeaconInfoArrayFromBeacons:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager configLocationTask:WithLocationInfo:systemLocationFailed:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager onCancelingReportToMars:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager placeMarkWithLocation:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MRDLocationManager geohashStringWithLocation:precision:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager selectLackPermissionsFromPermission:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager app_monitoredRegions]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager lastLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager lastPlaceMark]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager distanceFilter]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager desiredAccuracy]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager continuousPositioningEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager locationLogEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager enableLastLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager allowsBackgroundLocationUpdates]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager pausesLocationUpdatesAutomatically]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager codeLevelCallback]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager userLevelCallback]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager catLevelCallback]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager synthesizeCallback]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager lastWMLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager locationManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager locationResultModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager locationOnceBlocksArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager locateCallBackCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager configModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager backGroundLocationTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager regionsSet]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager preAuthorStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager reportService]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager locationFailedCallback]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager lastReportDecodeErrDate]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager monitoredBeaconRegions]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager rangedBeaconRegions]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager requestiBeaconInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager hasBeganBeacon]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationManager serverLocationResponseDict]", 0)}, 0);
setTimeout(function(){hookObjC("+[MRDLocationNetworkInfoHelper networkType]", 0)}, 0);
setTimeout(function(){hookObjC("+[MRDLocationNetworkInfoHelper wifiSSID]", 0)}, 0);
setTimeout(function(){hookObjC("+[MRDLocationNetworkInfoHelper wifiMACAddress]", 0)}, 0);
setTimeout(function(){hookObjC("+[MRDLocationNetworkInfoHelper wifiInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationReportService configWithUUID:userID:clientID:authKey:networkServiceBlock:]", 5)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationReportService alreadyInitialized]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationReportService configWithConfigModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationReportService reportToMARSServerWithNewLocation:oldLocation:desiredAccuracy:locatingAutomatically:lastLocatingDate:error:]", 6)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationReportService sendLocationInfoToMarsServerIfNeededWithNewLocation:oldLocation:marsLocationInfo:isLocatingAutomatically:systemLocationFailed:]", 5)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationReportService handleNetworkTask:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationReportService afterSendInfoCallback]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationReportService networkServiceBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationReportService UUID]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationReportService clientID]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationReportService auth_key]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationReportService appInfoHelper]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationReverseGeoService reverseResolveGPSLocation:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationReverseGeoService reverseResolveGPSLocation:rgsLevel:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationReverseGeoService reverseResolveMarsLocation:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationReverseGeoService reverseResolveMarsLocation:rgsLevel:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationReverseGeoService _reverseResolveLocation:rgsLevel:locationType:finished:]", 4)}, 0);
setTimeout(function(){hookObjC("+[MRDLocationReverseGeoService placeMarkForLocation:withMeituanReverseDictionary:]", 2)}, 0);
setTimeout(function(){hookObjC("+[MRDLocationReverseGeoService placeMarkForLocation:withMeituanMarsDictionary:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationTask urlString]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationTask urlParameters]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationTask requestHeaders]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationTask bodyDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MRDLocationTask finishBlock]", 0)}, 0);
setTimeout(function(){hookObjC("+[MRDLocationThreadDispatcher _mrdlocationThreadMaintain:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MRDLocationThreadDispatcher _mrdlocationThread]", 0)}, 0);
setTimeout(function(){hookObjC("+[MRDLocationThreadDispatcher dispatchToLocationThreadWithHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CLLocation marsCoordinate]", 0)}, 0);
setTimeout(function(){hookObjC("-[CLLocation marsLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPlaceMark encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTPlaceMark provinceName]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPlaceMark cityName]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPlaceMark districtName]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPlaceMark cityID]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTPlaceMark cityNbID]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMainBoard whiteBoard]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVMainBoard mainBoard]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMainBoard lowerFirstLetterString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVMainBoard resolveInstanceMethod:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTLManagedObjectAdapter modelFromManagedObject:processedObjects:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[MTLManagedObjectAdapter modelOfClass:fromManagedObject:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[MTLManagedObjectAdapter modelOfClass:fromManagedObject:processedObjects:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[MTLManagedObjectAdapter managedObjectFromModel:insertingIntoContext:processedObjects:error:]", 4)}, 0);
setTimeout(function(){hookObjC("+[MTLManagedObjectAdapter managedObjectFromModel:insertingIntoContext:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[MTLManagedObjectAdapter managedObjectFromModel:insertingIntoContext:processedObjects:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[MTLManagedObjectAdapter entityAttributeTransformerForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTLManagedObjectAdapter managedObjectKeyForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTLManagedObjectAdapter mergeValueOfModel:forKey:fromManagedObject:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MTLManagedObjectAdapter mergeValuesOfModel:forKeysFromManagedObject:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MTLManagedObjectAdapter uniquingPredicateForModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MTLManagedObjectAdapter modelClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTLManagedObjectAdapter managedObjectKeysByPropertyKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTLManagedObjectAdapter relationshipModelClassesByPropertyKey]", 0)}, 0);
setTimeout(function(){hookObjC("+[MTLReversibleValueTransformer allowsReverseTransformation]", 0)}, 0);
setTimeout(function(){hookObjC("-[MTLReversibleValueTransformer reverseTransformedValue:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVLogDiskManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVLogDiskManager kNVPrintLogCacheKey]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVLogDiskManager logCacheKeys]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVLogDiskManager keyName]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVLogDiskManager cacheLog:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVLogDiskManager cacheAssertLog:withCategory:withModuleClass:withKey:]", 4)}, 0);
setTimeout(function(){hookObjC("+[NVLogDiskManager cachePrintLog:withCategory:]", 2)}, 0);
setTimeout(function(){hookObjC("+[NVLogDiskManager writeLogToLogan:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVLogDiskManager didEnterBackGround:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVLogDiskManager hostUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVLogDiskManager reportAllLogs]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVLogDiskManager reportErrorLog:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVLogDiskManager deviceModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVLogDiskManager platformString]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVLogDiskManager customParam]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVLogDiskManager queryLogs:withBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVLogDiskManager querySyncLogs:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVLogDiskManager queryLogs:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVLogDiskManager loggerParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVLogDiskManager appID]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVLogDiskManager localArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVLogDiskManager errorArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVLogDiskManager barrierQueue]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVLogger installWithAppID:LoggerParams:]", 2)}, 0);
setTimeout(function(){hookObjC("+[NVLogger reportAllLogs]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVLogger queryLogs:withBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("+[NVLogger querySyncLogs:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CLLocation latitudeString]", 0)}, 0);
setTimeout(function(){hookObjC("-[CLLocation longitudeString]", 0)}, 0);
setTimeout(function(){hookObjC("-[CLLocation formatDistanceFromLocation:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVJailbrokenChecker appIsJailbroken]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVJailbrokenChecker deviceIsJailbroken]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVKeychainID keychainID]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVKeychainID generateID]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVLinkedList addFirst:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVLinkedList addLast:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVLockManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVLockManager retainLock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVLockManager releaseLock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVLockManager lock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVLockManager unlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVMemCache putObject:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVMemCache objectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVMemCache removeObjectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVMemCache cacheHits]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMemCache cacheMisses]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMemCache cleanExpired]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMemCache cleanFull]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVOperationQueue addOperation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVOperationQueue busyThreads]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVOperationQueue cancelAllOperations]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVOperationQueue waitUntilAllOperationsAreFinished]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVOperationQueue threadCount]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVVersion mainBundleVersion]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVVersion osVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVJsonViewAppearance verticalAlignment]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVJsonViewAppearance lineBreakMode]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVJsonViewAppearance numberOfLines]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVJsonViewAppearance loadingImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVJsonViewAppearance errorImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVJsonViewAttachment linkAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVJsonViewAttachment errorImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVJsonViewAttachment needLoad]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVJsonViewAttachment imageOperation]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVSizeCache applicationDidReceiveMemoryWarning:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVSizeCache applicationDidEnterBackground:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVImageCacheManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVImageCacheManager iconCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVImageCacheManager thumbCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVImageCacheManager photoCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVImageCacheManager cacheDuration]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVImageCacheManager didEnterBackground:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVNetworkClient mapi_picassojs_bin_path]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient mapi_picassojs_bin_returnType]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient mapi_picassojs_bin_withParameters:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient mapTypeWithPath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient MgetPath:parameters:cachePolicy:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient postPicassoPath:withParameters:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient postPicassoPath:parameters:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient picassoQueryParamFromNVQueryParam:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient requestPicassoPath:parameters:taskparam:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient requestPicassoPath:parameters:jsArray:taskparam:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient cacheBlockForType:key:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient saveCacheData:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient fuck64kString:withArray:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient basePicassoJSFrom:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient picassoJSFrom:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient picassoCacheParamtersFrom:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient cacheBlock]_0", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient pc_fuck64kString:withArray:]_0", 2)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient pc_basePicassoJSFrom:]_0", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient pc_picassoJSFrom:]_0", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient pc_picassoCacheParamtersFrom:]_0", 1)}, 0);
setTimeout(function(){hookObjC("-[TaskParam disableStatistics]", 0)}, 0);
setTimeout(function(){hookObjC("-[TaskParam failOverType]", 0)}, 0);
setTimeout(function(){hookObjC("-[TaskParam sigVerify]", 0)}, 0);
setTimeout(function(){hookObjC("-[TaskParam antiBrush]", 0)}, 0);
setTimeout(function(){hookObjC("-[TaskParam returnCacheOnFail]", 0)}, 0);
setTimeout(function(){hookObjC("-[TaskParam shouldNoNil]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient didEnterBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient cacheDuration]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient keyForPath:parameters:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient saveData:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient shouldUseCustomCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient useCustomCachePolicy:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient postPath:parameters:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient postPath:mapi_parameters:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient postPath:mapi_parameters:failOver:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient postPath:mapi_parameters:failOver:sigVerify:antiBrush:]", 5)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient postPath:parameters:compress:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient postPath:parameters:compress:failOver:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient postPath:parameters:compress:failOver:sigVerify:antiBrush:]", 6)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient postPath:parameters:compress:disableStatistics:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient postPath:parameters:compress:taskParam:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient httpsPath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient shouldChangeToHttps]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient changeToHttps:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient dataWithPath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient requestImage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient requestImageRecordPath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient convertionBlockForType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient cachePolicyForCacheType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient cacheItemForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient saveCacheItem:ForKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient fetchPath:parameters:taskParam:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient saveCache:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient taskWithPath:parameters:cacheItem:taskParam:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient fetchPath:parameters:cacheItem:taskParam:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient requestHeaderBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVQueryParameter mapi_serverCached]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVQueryParameter picasso_param]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVQueryParameter picasso_jsName]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVQueryParameter picasso_jsArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoQueryParameter jsArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoQueryParameter customParam]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoQueryParameter jsName]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVCrashMonitor defaultMonitor]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCrashMonitor reportWithCrash:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVCrashMonitor deviceModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCrashMonitor currentUploadTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCrashMonitor reachCrashReportLimit]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCrashMonitor crashTimesLimit]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCrashMonitor limitHelper]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVDNSMonitor defaultMonitor]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVDNSMonitor serverHost]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVDNSMonitor launchSendThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVDNSMonitor applicationDidEnterBackground:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVDNSMonitor applicationWillTerminate:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVDNSMonitor uploadNow]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVDNSMonitor sendHiJackedUrl:WithIpList:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVDNSMonitor limitHelper]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVDNSMonitor waitSending]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVFrequencyLimitHelper encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVFrequencyLimit sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVFrequencyLimit crashMonitorFrequencyLimit:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVFrequencyLimit currentLimit]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVFrequencyLimit hiJackMonitorFrequencyLimitWith:and:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVFrequencyLimit userDefaults]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVFrequencyLimit dnsUrlDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMetricsMonitor addValue:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVMetricsMonitor addValues:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVMetricsMonitor sendCPUUpload:value:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVMetricsMonitor sendMEMUpload:value:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVMetricsMonitor sendFPSUpload:value:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVMetricsMonitor sendWithType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVMetricsMonitor sendRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVMonitorCenter defaultCenter]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMonitorCenter applicationDidEnterBackground:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVMonitorCenter applicationWillTerminate:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVMonitorCenter serverHost]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMonitorCenter appID]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMonitorCenter commandWithUrl:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVMonitorCenter networkStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMonitorCenter uploadNow]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMonitorCenter urlEncode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVMonitorCenter platformString]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMonitorCenter versionCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVSpeedMonitor catRecord:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVSpeedMonitor catEnd]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVSpeedMonitor intenalCatEnd]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVSpeedMonitor shouldUpload]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetherSwapHelper fetchSignalWithToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetherSwapHelper swapDataFetched:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetherSwapHelper swapToken]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVAccountManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAccountManager userId]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVAccountManager updateProfile:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVAccountManager taskDidFinish:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVEnvironment defaultEnvironment]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVEnvironment mapiHeaders]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVEnvironment normalsHeaders]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVEnvironment platformString]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVEnvironment deviceId]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVEnvironment deviceId2]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVEnvironment deviceId3]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVEnvironment deviceId4]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVEnvironment deviceId5]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVEnvironment unionId]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVEnvironment sessionId]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVEnvironment userAgent]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVEnvironment deviceModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVEnvironment appId]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVEnvironment bundleId]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVEnvironment wifiInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVEnvironment wifiRawData]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVEnvironment wifiInfoSSID]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVEnvironment wifiInfoBSSID]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVEnvironment deviceName]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVEnvironment wnsAppId]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVLocationManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVLocationManager hasLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVLocationManager realCoordinate]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVLocationManager offsetCoordinate]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVLocationManager didStart]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVStatisticsCenter defaultCenter]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVStatisticsCenter pushForm:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVStatisticsCenter pushLine:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVStatisticsCenter uploadAfter15Sec]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVStatisticsCenter uploadUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVStatisticsCenter uploadCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVStatisticsCenter dbLock]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting httpsWhiteList]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVByteCache push:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVByteCache push:location:accuracy:forKey:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NVByteCache remove:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVByteCache trimToTimestamp:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession sendHTTPRequest:cmd:timeout:completion:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession sessionStatusChange:session:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession startAckTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession invalidAckTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession abortHttpHold]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession shouldFailover:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession sendHttpConnect]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession connectionCompletion:tunnel:data:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession handleTcpResult:reponse:data:error:subError:extend:]", 6)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession handleResultInrunloop:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession handleSuccessResult:tunnel:data:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession handleFailureResult:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession allRequestFail:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession appendExtend:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession addHttpHoldTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession invalidHttpHoldTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession cancelFailOverRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession cancelRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession pvcode:tunnel:responseBytes:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession failoverType]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession tunnelReqId]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession completionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession extendString]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession tunnelNo]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession httpHoldTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession ackTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSession failOverStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue sendHTTPRequest:cmd:timeout:completion:generateIdFinish:]", 5)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue sessionStatusChange:session:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue startAckTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue invalidAckTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue abortHttpHold]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue shouldFailover:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue sendHttpConnect]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue connectionCompletion:tunnel:data:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue handleTcpResult:reponse:data:error:subError:extend:]", 6)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue handleSuccessResult:tunnel:data:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue handleFailureResult:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue allRequestFail:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue appendExtend:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue addHttpHoldTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue invalidHttpHoldTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue cancelFailOverRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue cancelRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue pvcode:tunnel:responseBytes:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue failoverType]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue tunnelReqId]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue sessionTask]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue completionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue extendString]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue tunnelNo]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue httpHoldTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue ackTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVCIPSessionUseQueue failOverStatus]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVConnectionWatchDog startWithTunnel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVConnectionWatchDog bgThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVConnectionWatchDog connectCheck]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVConnectionWatchDog startGCDTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVConnectionWatchDog cancelGCDTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVConnectionWatchDog callStack]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVConnectionWatchDog connectionCheckOnConnectionThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVHttpConnection sendHTTPRequest:cmd:timeout:completion:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NVHttpConnection uploadWithRequest:progress:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVHttpConnection downloadWithRequest:progress:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVHttpConnection httpsession:task:didCompleteWithError:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVHttpConnection URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:]", 5)}, 0);
setTimeout(function(){hookObjC("-[NVHttpConnection URLSession:task:didCompleteWithError:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVHttpConnection URLSession:dataTask:didReceiveData:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVHttpConnection URLSession:downloadTask:didFinishDownloadingToURL:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVHttpConnection URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:]", 5)}, 0);
setTimeout(function(){hookObjC("-[NVHttpConnection URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:]", 5)}, 0);
setTimeout(function(){hookObjC("+[NVHttpConnection generateSeqNo]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVHttpConnection sessionConfiguration]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVHttpConnection dataTask]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVHttpConnection responseHeaders]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVHttpConnection expectedLength]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVHttpConnection receivedData]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVHttpConnection sendNo]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVHttpConnection uploadBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVHttpConnection downloadBlock]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVHttpManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVHttpManager sendHTTPRequest:cmd:timeout:completion:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NVHttpManager uploadWithRequest:progress:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVHttpManager downloadWithRequest:progress:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVHttpManager URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:]", 5)}, 0);
setTimeout(function(){hookObjC("-[NVHttpManager URLSession:task:didCompleteWithError:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVHttpManager URLSession:dataTask:didReceiveData:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVHttpManager URLSession:downloadTask:didFinishDownloadingToURL:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVHttpManager URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:]", 5)}, 0);
setTimeout(function(){hookObjC("-[NVHttpManager URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:]", 5)}, 0);
setTimeout(function(){hookObjC("+[NVHttpManager generateSeqNo]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVHttpManager completionQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVHttpManager mutableTaskDic]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVIPStrategy sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy applicationWillEnterForeground]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy appidUpdate]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy composeIplist]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy defaultIPList:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy requestIpList]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy successIpData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy startRacing]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy delayRacing]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy failedIpData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy newIpListArrived:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy saveLocalIpList:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy defaultSHRanddomAddrs]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy defaultBJRanddomAddrs]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy defaultGZRanddomAddrs]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy ipStrategyKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy minusAddressList:fromIPList:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy failedAddressList:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy racingPingFailedIpList:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy ackFailedAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy saveBadIp]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy badIpForLocal]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy alertDebug]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy loadbalanceIpList]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy shangHaiIpList]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy beijingIpList]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy guangzhouIpList]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy badIpList]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVIPStrategy debugAddress]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVLocalDNS mobileDns]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVLocalDNS wifiDns]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVLocalDNS writeIps:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVLocalDNS resetDns]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVLocalDNS taskStatusChanged]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVLocalDNS sendIpTxtHttps]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVLocalDNS httpsconn:data:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVLocalDNS httpresponse:task:data:didCompleteWithError:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NVLocalDNS httpsTask]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMergeHost localIP]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMergeHost mergeHost:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVMergeHost mapLocalDNSIP:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVMergeHost resetDns:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVMergeHost replaceHost:withIp:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVMergeHost mapiPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMergeHost mapiIp]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVDPMergeHost mergeHost:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVDPMergeHost mapLocalDNSIP:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVDPMergeHost resetDns:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkConfigurator unionId]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkConfigurator platformString]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkConfigurator unionidChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkConfigurator wnsAppId]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkConfigurator appId]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkConfigurator appSource]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkConfigurator localNetworkConfigPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkConfigurator mergeHost]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkConfigurator networkAgent]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkService startWithConfig:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkService startInternetServices]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkService internetReach]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVPipeline tunnelTypeForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVPipeline urlString:urlScheme:inSpecialList:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVQueryStringPair URLEncodedStringValue]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVQuerySerializer queryStringFromParameters:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVQuerySerializer queryStringPairsFromDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVQuerySerializer queryStringPairsFromKeyAndValue:value:]", 2)}, 0);
setTimeout(function(){hookObjC("+[NVRequestMgr sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVRequestMgr processQueue]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVRequestMgr executeWithProcessQueue:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVRequestMgr runningInProcessQueue]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVRequestMgr threadForRequestMgr]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVRequestMgr releaseCurrentThread]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVRequestMgr runRequests]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVRequestMgr generateSeqNo]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVRequestMgr enqueueAndStartRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVRequestMgr cancelRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVRequestMgr removeRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVRequestMgr hasRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVSettingService shareInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVSettingService queryTunnelConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVSettingService queryTunnelConfig:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVSettingService requestTunnelTask:block:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVSettingService decodeTunnelSettingData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVSettingService configKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVSettingService loadConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVSettingService configString:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVSettingService handleData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVSettingService saveConfig:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVSettingService MD5Digest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVSettingService tunnelConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask startSyncError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTask runReqest]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask defaultTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask mergedURLString]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask createRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask resultWithData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTask cacheDidLoaded]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask doCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask tunnelCommand]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask shouldRequestInTunnel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTask addmTraceid2Request]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask randomStringWithLength:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTask doRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask didRecvData:total:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVTask didsendData:total:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVTask doRetry]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask requestCancel]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask connectionCompletion:tunnel:subType:data:error:extend:]", 6)}, 0);
setTimeout(function(){hookObjC("-[NVTask handleResultInrunloop:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTask tunnelNameFromType:subTyep:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVTask handleFailureResult:subType:error:extend:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NVTask handleSuccessResult:tunnel:subType:data:extend:]", 5)}, 0);
setTimeout(function(){hookObjC("-[NVTask handleOtherMessage]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask handleErrorMessage:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVTask codeForResponse]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask reportSuccess]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask signalSyncLockAndFinishReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask taskDidFinish:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTask taskDidFail:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTask reportFail]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask finishRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask dic2String:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTask requestPreHandler]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask completionQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask disableCat]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask catCommand]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask tunnelType]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask failOverType]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask catPercent]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask defaultCacheType]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask requestHeaders]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask postData]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask statusCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask receivedData]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask taskNo]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask responseHeaders]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask retryTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask urlRequestionSerializaton]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask urlResponseSerialization]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask syncLock]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask execType]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask tunnelReqNo]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask expectedLength]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask cachedData]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask writeToCacheData]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask refreshCacheNoReturn]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask inHTTPSMode]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask mergeUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTask reportError]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVMApiCacheManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMApiCacheManager normalCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMApiCacheManager persistentCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMApiCacheManager cacheQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMApiCacheManager didEnterBackground:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVMApiCacheManager willTerminate:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVMApiCacheManager memoryWarning:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTaskUrlRequestSerialization requestBySerializingTask:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTaskUrlRequestSerialization requestBySerializingRequest:withParameters:postData:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NVTaskUrlRequestSerialization serializiongDescription]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTaskUrlRequestSerialization HTTPMethodsEncodingParametersInURI]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTaskUrlResponseSerialization responseObjectTask:response:data:error:]", 4)}, 0);
setTimeout(function(){hookObjC("+[NVTunnel sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel tunnelConfigUpdate]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel tunnelConfigUpdateRunLoop]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel faileAddress:reconnect:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel failAddressInSocketThread:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel ackSuccessAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel ackSuccessAddressInSocketThread:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel reconnectforFailAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel reachabilityChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel closeConnections]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel realCloseConnections]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel closeSharkPushConncetion]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel realCloseSharkPushConncetion]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel reachabilityChangedInrunloop]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel applicationEnterBackground:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel applicationEnterBackgroundRunloop:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel tryToRacing]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel defaultClientTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel defaultServerTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel pingInterval]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel racingPingTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel racingDelay]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel wifiRttResultNum]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel rttThreshold]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel rttSPThreshold]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel closeTcpTunnel]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel closeSharkPushTunnel]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel turnOffTcpTunnel]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel onConnectResult:elapse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel logForSecureTunnel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel connectionsDidFail:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel sendHTTPRequest:cmd:timeout:completion:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel sendHTTPRequest:cmd:timeout:statusCallback:completion:]", 5)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel sendHTTPRequest:cmd:timeout:statusCallback:completion:generateIdFinish:]", 6)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel sendHttpInRunloop:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel useThisTunnel]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel unionidChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel unionidChangedOnrunloop:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel sendPushData:version:cmd:timeout:completion:]", 5)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel postOnReveivedSharkPush:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel reportServerUnsent:requestId:extend:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel waitTunnel]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel waitEncryptTunnel]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel useMultiIP]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel connectionWeight]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel onConnectionBegin]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel onConnectionStarted]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel onConnectionAdded]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel onConnectionBroken]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel connectionScoreChanged:startSending:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel connScoreWeightChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel spStateChanged:connections:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel spConnectionScoreChanged:startSending:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel autoReconnect]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel failedTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel failTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnel lastFailAddr]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVTunnelErrorCode statusCode2DPErrorMap]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVTunnelErrorCode codeForError:type:]", 2)}, 0);
setTimeout(function(){hookObjC("+[NVTunnelErrorCode httpErrorCode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVTunnelService sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelService startTunnelService]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelService typeForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelService sendHTTPRequest:cmd:timeout:failoverType:completion:]", 5)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelService sendHTTPRequest:type:cmd:timeout:failoverType:completion:]", 6)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelService sendHTTPRequest:type:cmd:timeout:failoverType:completion:generateId:]", 7)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelService uploadWithRequest:progress:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelService downloadWithRequest:progress:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelService uploadWithRequestUseQueue:progress:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelService downloadWithRequestUseQueue:progress:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelService finishReqest:reqNo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelService cancelRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelService cancelRequestUseQueue:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelService unionidChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelService addApplicationNotification]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelService applicationEnterBackground:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelService applicationWillEnterForeground:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelService delaysetApplicationBackground:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelService tunnelDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVTunnelSetting defaultTunnelSetting]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting lockConfigDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting unlockConfigDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting turnOffTcpTunnel]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting updateSettingForDict:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting httpDnsHostList]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting wifiRttResultNum]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting racingPingTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting racetrackHigh]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting racetrackLow]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting racingIntervalWifi]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting racingIntervalCelluar]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting racingDelayHigh]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting racingDelayLow]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting rttThresholdHigh]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting rttThresholdLow]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting rttSPThresholdHigh]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting rttSPThresholdLow]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting queryInterval]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting pingIntervalOther]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting pingInterval2G]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting ackTimeoutTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting useSmartRoutingLogic]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting useReceiptFailover]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting exceptionTcpFailTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting tcpFailTunnel]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting defaultTunnel]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting closeTcpTunnel]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting closeSharkPushTunnel]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting useNoBlockReading]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting useProcessQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting useNoBlockWriting]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting useMultiIP]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting useNioTunnel]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting connectionWeight]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting waitTunnelConnect]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting waitEncryptTunnelConnect]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting preBlackURLSchemes]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting preGreenHttpsUrlLists]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting preBlackURLSuffixs]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting preWhiteURLHosts]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting specialListWNS]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting specialListCIP]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting specialListHTTP]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting uploadFailoverUrls]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting timeoutWNS2G]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting timeoutWNSOther]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting timeoutCIP2G]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting timeoutCIPOther]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting timeoutHTTP2G]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting timeoutHTTPOther]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting holdtimeCIPHTTP2G]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting holdtimeCIPHTTPOther]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVTunnelSetting tunnelConfig]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVVerify verifyHost:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVVerify verifyHostSignature:dataLen:signature:signatureLen:]", 4)}, 0);
setTimeout(function(){hookObjC("+[Logan sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[Logan appDidBecomeActive]", 0)}, 0);
setTimeout(function(){hookObjC("-[Logan appDidFinishLaunching:]", 1)}, 0);
setTimeout(function(){hookObjC("-[Logan appDidReceiveMemoryWarning]", 0)}, 0);
setTimeout(function(){hookObjC("-[Logan appWillResignActive]", 0)}, 0);
setTimeout(function(){hookObjC("-[Logan appDidEnterBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[Logan appWillEnterForeground]", 0)}, 0);
setTimeout(function(){hookObjC("-[Logan appWillTerminate]", 0)}, 0);
setTimeout(function(){hookObjC("-[Logan reachabilityHasChanged]", 0)}, 0);
setTimeout(function(){hookObjC("+[Logan writeLog:logType:flags:]", 3)}, 0);
setTimeout(function(){hookObjC("-[Logan uploadLogFile:]", 1)}, 0);
setTimeout(function(){hookObjC("-[Logan needFlash]", 0)}, 0);
setTimeout(function(){hookObjC("+[Logan clearAllLogs]", 0)}, 0);
setTimeout(function(){hookObjC("+[Logan useASL:]", 1)}, 0);
setTimeout(function(){hookObjC("+[Logan printCLibLog:]", 1)}, 0);
setTimeout(function(){hookObjC("+[Logan Logan2Cat:code:uploadPercent:]", 3)}, 0);
setTimeout(function(){hookObjC("+[Logan uploadLogWithDate:appid:unionid:]", 3)}, 0);
setTimeout(function(){hookObjC("+[Logan uploadLogWithDate:appid:unionid:complete:]", 4)}, 0);
setTimeout(function(){hookObjC("+[Logan uploadLogWithDate:appid:uniqueString:source:environment:complete:]", 6)}, 0);
setTimeout(function(){hookObjC("+[Logan uploadLogWithDate:appid:unionid:environment:complete:]", 5)}, 0);
setTimeout(function(){hookObjC("+[Logan uploadLogWithDate:appid:unionid:uniqueString:source:environment:complete:]", 7)}, 0);
setTimeout(function(){hookObjC("+[Logan todaysDate]", 0)}, 0);
setTimeout(function(){hookObjC("+[Logan callStack]", 0)}, 0);
setTimeout(function(){hookObjC("+[Logan snapShot:]", 1)}, 0);
setTimeout(function(){hookObjC("+[Logan loganFiles]", 0)}, 0);
setTimeout(function(){hookObjC("-[Logan logOutput]", 0)}, 0);
setTimeout(function(){hookObjC("-[Logan catBlock]", 0)}, 0);
setTimeout(function(){hookObjC("+[LoganDataProcess sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganDataProcess cryptKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganDataProcess deviceKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganDataProcess keyForPasswordEncrypt]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganDataProcess md5:]", 1)}, 0);
setTimeout(function(){hookObjC("-[LoganDataProcess data_md5:]", 1)}, 0);
setTimeout(function(){hookObjC("-[LoganDataProcess GRUDID]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganDataProcess processData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[LoganDataProcess compressData:isProcessEnd:]", 2)}, 0);
setTimeout(function(){hookObjC("-[LoganDataProcess encryptData:streamEnd:]", 2)}, 0);
setTimeout(function(){hookObjC("-[LoganDataProcess randomDataOfLength:]", 1)}, 0);
setTimeout(function(){hookObjC("-[LoganDataProcess AESKeyForPassword:]", 1)}, 0);
setTimeout(function(){hookObjC("-[LoganEnviroment unionId]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganEnviroment pushToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganEnviroment userId]", 0)}, 0);
setTimeout(function(){hookObjC("+[LoganLogFileManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganLogFileManager processLocalFiles]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganLogFileManager checkFileExist:]", 1)}, 0);
setTimeout(function(){hookObjC("-[LoganLogFileManager createLogFileDirectory:fileName:]", 2)}, 0);
setTimeout(function(){hookObjC("-[LoganLogFileManager deleteOutdatedFiles]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganLogFileManager allFilesInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganLogFileManager deleteLoganFile:]", 1)}, 0);
setTimeout(function(){hookObjC("-[LoganLogFileManager deleteOldNetworkLogFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganLogFileManager fileManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganLogInput writeLog:]", 1)}, 0);
setTimeout(function(){hookObjC("-[LoganLogInput flashWithComplete:]", 1)}, 0);
setTimeout(function(){hookObjC("-[LoganLogInput forceWriteFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganLogInput prepareWrittenFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganLogInput writeToFile:logData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[LoganLogInput clearAllLogs]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganLogInput logQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganLogInput lastLogDate]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganLogOutput p_initial]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganLogOutput uploadLogWithDate:appid:unionid:complete:]", 4)}, 0);
setTimeout(function(){hookObjC("-[LoganLogOutput uploadLogWithDate:appid:unionid:environment:complete:]", 5)}, 0);
setTimeout(function(){hookObjC("-[LoganLogOutput uploadLogWithDate:appid:unionid:uniqueString:source:environment:complete:]", 7)}, 0);
setTimeout(function(){hookObjC("-[LoganLogOutput callComplete:succ:errorCode:errorMsg:]", 4)}, 0);
setTimeout(function(){hookObjC("-[LoganLogOutput uploadQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganLogOutput uploadFailedTasks]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganLogOutput taskManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganTaskObject encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[LoganTaskObject taskStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganTaskObject taskID]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganTaskManager p_initial]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganTaskManager uploadFailedTasks]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganTaskManager forceUploadTasks]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganTaskManager addTask:]", 1)}, 0);
setTimeout(function(){hookObjC("-[LoganTaskManager taskObjectWithTaskID:]", 1)}, 0);
setTimeout(function(){hookObjC("-[LoganTaskManager updateCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganTaskManager routeTaskResult:]", 1)}, 0);
setTimeout(function(){hookObjC("-[LoganTaskManager taskManager]", 0)}, 0);
setTimeout(function(){hookObjC("+[LoganUtils sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganUtils switcherConfigChanged]", 0)}, 0);
setTimeout(function(){hookObjC("-[LoganUtils useCLib]", 0)}, 0);
setTimeout(function(){hookObjC("+[LoganUtils loganLogDirectory]", 0)}, 0);
setTimeout(function(){hookObjC("+[LoganUtils loganLogDirectoryV2]", 0)}, 0);
setTimeout(function(){hookObjC("+[LoganUtils loganLogOldDirectory]", 0)}, 0);
setTimeout(function(){hookObjC("+[LoganUtils loganLogCurrentFileName]", 0)}, 0);
setTimeout(function(){hookObjC("+[LoganUtils currentDate]", 0)}, 0);
setTimeout(function(){hookObjC("+[LoganUtils loganLogCurrentFilePath]", 0)}, 0);
setTimeout(function(){hookObjC("+[LoganUtils logTodayFileName]", 0)}, 0);
setTimeout(function(){hookObjC("+[LoganUtils logFileName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[LoganUtils latestLogFilePath]", 0)}, 0);
setTimeout(function(){hookObjC("+[LoganUtils logFilePath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[LoganUtils uploadFilePath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[LoganUtils localFilesArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[LoganUtils freeDiskSpaceInBytes]", 0)}, 0);
setTimeout(function(){hookObjC("+[LoganUtils transferError:errorCode:]", 2)}, 0);
setTimeout(function(){hookObjC("-[LoganUtils useCLibObj]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVNetworkLoggerConfig sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkLoggerConfig uploadLogWithDate:networkType:key:]", 3)}, 0);
setTimeout(function(){hookObjC("+[NVNetworkMD5File fileMD5:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObjectForward theObject]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVObject objectWithData:start:length:]", 3)}, 0);
setTimeout(function(){hookObjC("+[NVObject objectWithData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVObject objectWithBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("+[NVObject objectWithClassHash:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVObject objectWithClassName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVObject arrayWithData:start:length:]", 3)}, 0);
setTimeout(function(){hookObjC("+[NVObject arrayWithData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVObject arrayWithBytes:length:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVObject hasHash:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject hasKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject booleanForHash:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject booleanForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject integerForHash:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject integerForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject stringForHash:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject stringForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject longForHash:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject longForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject doubleForHash:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject doubleForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject objectForHash:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject objectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject arrayForHash:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject arrayForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject integerArrayForHash:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject integerArrayForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject stringArrayForHash:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject stringArrayForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject anyArrayForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject methodSignatureForSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVObject loadApiFromUrl:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVObject loadApiFromFile]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVObject loadApi]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVObject appendDepsList:name:map:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVObject _code]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVObject _code]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVObject appendField:prefix:classDef:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVObject appendDescription:prefix:]", 2)}, 0);
setTimeout(function(){hookObjC("+[NVObject hash:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObject encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObjectEditCont writeTo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObjectEditCont writeObject:to:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVObjectEditCont writeString:to:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVObjectEditor removeForHash:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObjectEditor removeForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVObjectClassDef typeForHash:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVSimpleMsg statusCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPing hostAddressFamily]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPing didFailWithError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPing didFailWithHostStreamError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPing pingPacketWithType:payload:requiresChecksum:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPing sendPingWithData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPing sendPacket:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPing validateSequenceNumber:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPing validatePing6ResponsePacket:sequenceNumber:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPing readData]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPing startWithHostAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPing hostResolutionDone]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPing stopHostResolution]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPing stopSocket]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPing hostName]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPing addressStyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPing hostAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPing IPAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPing packetLength]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPing nextSequenceNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPing nextSequenceNumberHasWrapped]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPing pingStartDate]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVNetworkPingReachability startPingHost:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPingReachability startPing]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPingReachability timeoutActionFired]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPingReachability handlePingItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPingReachability simplePing:didStartWithAddress:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPingReachability simplePing:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPingReachability simplePing:didSendPacket:sequenceNumber:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPingReachability simplePing:didFailToSendPacket:sequenceNumber:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPingReachability simplePing:didReceiveUnexpectedPacket:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPingReachability hostName]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPingReachability rePingTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPingReachability sequenceNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkPingReachability pingItemsArr]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVReachability currentAccurateReachabilityStatus]_0", 0)}, 0);
setTimeout(function(){hookObjC("+[NVNetworkWIFIStatus wifiDetails]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVNetworkWIFIStatus BSSID]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVNetworkWIFIStatus SSID]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVReachability startNotifer]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVReachability stopNotifer]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVReachability startMobileNetworkStatusNotifer]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVReachability stopMobileNetworkStatusNotifer]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVReachability reachabilityWithHostName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVReachability reachabilityWithAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NVReachability reachabilityForInternetConnection]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVReachability reachabilityForLocalWiFi]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVReachability localWiFiStatusForFlags:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVReachability networkStatusForFlags:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVReachability connectionRequired]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVReachability currentReachabilityStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVReachability currentAccurateReachabilityStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVReachability mobileNetworkObserver]", 0)}, 0);
setTimeout(function(){hookObjC("-[SHKWnsSDK bind:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SHKWnsSDK sendHTTPRequest:cmd:timeout:completion:]", 4)}, 0);
setTimeout(function(){hookObjC("-[SHKWnsSDK cancelRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SharkPush callBackQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPush statusCallBack]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushSendManager sendBroken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushSendManager sendPushParameters:cmd:reply:timeout:completion:]", 5)}, 0);
setTimeout(function(){hookObjC("-[SharkPushSendManager pushCmd:data:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SharkPushSendManager unionidChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SharkPushSendManager handlePushServeApplicationState:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SharkPushSendManager handlePushServeCmd:data:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SharkPushSendManager handleSeriver:cmd:data:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SharkPushSendManager handleSessionResponse:cmd:data:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SharkPushSendManager sessionTimeout:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SharkPushSendManager finishSession:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SharkPushSendManager generateHttpRequestId]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushSendManager sessionDiction]", 0)}, 0);
setTimeout(function(){hookObjC("+[SharkPushService sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService startInloop]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService registerSharkPushInRunloop:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService unregisterSharkPushInRunLoop:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService startTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService loadData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService loginPushservice]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService sendCommandlist:isRegister:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService replyPush:status:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService sendHearbeat]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService replySniffer:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService handelHearbeat:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService handelRegisterCommandlist:response:isRegister:cmd:code:data:error:]", 7)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService registerResultCmdstatus:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService handleLogin:data:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService sendApplicationState:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService uploadApplicationState]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService handleDegrade:data:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService silentPeriodEnd]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService sharkPushSeriver:cmd:data:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService sharkPushBusinessData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService sharkPushUnionidChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService sharkPushSeriver:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService handleSniffer:cmd:data:]", 3)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService validModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService reportModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService updateLocalMsg:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService updateLocalData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService startService]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService registerSharkPush:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService unregisterSharkPush:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService tunnelConfigUpdate]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService tunnelConfigUpdateRunLoop]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService networkType]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService hash16:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService sharkPush:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService fibonacci:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService sendManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService sPushArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService cmdArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService sPushToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService sendFailCmd]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService serverOffset]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService pushmsgidArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService loginState]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushService failerTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushSession requestTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushSession statusCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[SharkPushSession completionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVJsonRequestionSerialization requestBySerializingTask:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVJsonRequestionSerialization requestBySerializingRequest:withParameters:postData:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NVJsonRequestionSerialization serializiongDescription]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVJsonRequestionSerialization HTTPMethodsEncodingParametersInURI]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVJsonResponseSerialization responseObjectTask:response:data:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NVJsonResponseSerialization errorWithUnderlyingError:underlyingError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVJsonResponseSerialization validateResponse:data:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NVJsonResponseSerialization acceptableStatusCodes]", 0)}, 0);
setTimeout(function(){hookObjC("+[NVBrokerLog log2catNetworkUrl:method:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[NVBrokerLog log2catMalformedUrl:method:responseHeaders:code:data:]", 5)}, 0);
setTimeout(function(){hookObjC("+[NVBrokerLog httpConnection2cat:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVMApiConfig mapiHeaders]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMApiConfig errorSimpleMsgTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMApiConfig statusCodeDescriptions]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMApiRequestionSerialization requestBySerializingTask:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVMApiRequestionSerialization requestBySerializingRequest:withParameters:postData:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NVMApiRequestionSerialization serializiongDescription]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMApiRequestionSerialization shouldCompressPostBody]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMApiRequestionSerialization postForm]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMApiRequestionSerialization HTTPMethodsEncodingParametersInURI]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMApiResponseSerialization responseObjectTask:response:data:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NVMApiResponseSerialization nvobjectForReponseData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVMApiResponseSerialization nvobjectWithData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVMApiResponseSerialization malformDataMessage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVMApiResponseSerialization serverErrorMessage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVMApiResponseSerialization malformedCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMApiResponseSerialization handeledData]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMApiResponseSerialization statusCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVMApiResponseSerialization responseHeaders]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGetTaskM handleOtherMessage]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGetTaskM handleErrorMessage:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVGetTaskM disableStatistics]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGetTaskM shouldCompressPostBody]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVGetTaskM defaultCacheLocationScope]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVPostTaskM handleOtherMessage]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVPostTaskM handleErrorMessage:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVPostTaskM postForm]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVPostTaskM postStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVPostTaskM disableStatistics]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVPostTaskM shouldCompressPostBody]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVPostTaskM defaultCacheLocationScope]", 0)}, 0);
setTimeout(function(){hookObjC("-[RecentAverage add:]", 1)}, 0);
setTimeout(function(){hookObjC("-[RecentAverage recentCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnection checkConnect]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnection heartbeatTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnection send:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnection send:completion:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNConnection postNoSecure:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnection onReadPing]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnection uploadDeviceMessage]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnection OldPing]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnection newPing]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnection check_connect_timeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnection connctionCompletedWithsuccess:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnection reportError:secureData:payload:]", 3)}, 0);
setTimeout(function(){hookObjC("-[TNConnection reportSendingStatus:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnection reportDecodeDataError]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnection rateOfFlow:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnection startConnectS]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnection endConnectS]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnection networkState]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnection needPingTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnection secureProtocolHelper]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnection securesStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnection requestCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnection averageRtt]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnection averageRate]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnection racingDelagate]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnection secureHelper]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager addConnections:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager raceFinish:conn:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager startConnectionTask:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager connctionTaskFinish:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager connectionBegin:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager connctionBroken:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager onWriteStreamWritable:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager canWrite]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager forceAutoReconnect]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager connctionCompleted:success:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager finishPing:rtt:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager connectionScoreChanged:startSending:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager sendSession:conn:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager OldSendSession:conn:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager enterBackground:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager compl:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager onConnectResult:elapse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager prepareConnections:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager checkConnections:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager startRacingTask:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager connectFailInRacingTask:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager buildBestIPConn:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager clearTask]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager reUseRacingConn:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager softCloseConnection:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager clearConnections:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager closeConnections:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager closeConns:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager connectionScore:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager addressList]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager fibonacci:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager useMultiIP]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager connectionWeight]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager racingTask]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager connectionTask]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionManager needReplaceAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionRacingTask startConnectRacing:tunnel:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionRacingTask racingTaskFinishedWithConn:result:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionRacingTask log2Cat]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionRacingTask removeConn:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionRacingTask useMultiIP]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionRacingTask connResultBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionRacingTask finishBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionTask startConnectRacing:tunnel:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionTask connctionBroken:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionTask connctionCompleted:success:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionTask finishPing:rtt:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionTask onWriteStreamWritable:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionTask connResultBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionTask finishBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNConnectionTask racingArr]", 0)}, 0);
setTimeout(function(){hookObjC("+[TNRacingManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNRacingManager enterBackground:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNRacingManager stopRacing]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNRacingManager startRacing:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNRacingManager resumeTask]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNRacingManager finishTask:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNRacingManager finishRacing]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNRacingManager saveIpList:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNRacingManager raceIpList]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNRacingManager shouldRacing:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNRacingManager addressList:equalToAddressList:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNRacingManager GetWifiName]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNRacingManager lastRacingAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNRacingManager finishBadIp]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNRacingManager racingTask]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNRacingManager waitRacingAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNRacingManager resultConnect]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNRacingManager smartUserDefault]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNRacingPingTask startConnectRacing:tunnel:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNRacingPingTask connctionBroken:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNRacingPingTask connctionCompleted:success:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNRacingPingTask finishPing:rtt:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNRacingPingTask onWriteStreamWritable:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNRacingPingTask failAndRemoveConn:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNRacingPingTask pingRaceingFinishBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNRacingPingTask pingTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNRacingPingTask pingTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("+[TNRequest createWithHttpRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNRequest defaultHeader]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNRequest headerString]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNRequest generateProtocolData]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNRequest compressionType]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNRequest requestType]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNRequest secureProtocolData]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNRequest connPoolIPWeight]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNResponse statusCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNResponse subError]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNResponse requestType]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSecureHelper sendSecureRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureHelper postNoSecure:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureHelper HandlerErrorStatus:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureHelper onReadKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureHelper onReadResponse:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSecureHelper processKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSendQueueMgr startSend]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSendQueueMgr sendSharkPush]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSession waitTunnel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSession sendingDeliver:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSession waitTunnelTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSession postResponse:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSession completionBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSession statusBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSession ackStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSession useNoBlockWriting]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager checkConnections]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager checkConnections:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager startRacingTask:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager reUseRacingConn:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager connctionCompleted:success:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager compl:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager clearTask]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager raceFinish:conn:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager startConnectionTask:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager connctionTaskFinish:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager connectionBegin:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager connctionBroken:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager onWriteStreamWritable:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager canWrite]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager forceAutoReconnect]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager finishPing:rtt:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager connectionScoreChanged:startSending:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager closeConnections:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager closeConns:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager enterBackground:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager addressList]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager fibonacci:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager racingTask]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushConnectionManager connectionTask]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushTunnel startSharkPushService]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushTunnel launchSendQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushTunnel send:timeout:info:]", 3)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushTunnel sessionBegan:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushTunnel sessionFinished:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushTunnel sessionAborted:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushTunnel sessionStatusChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushTunnel onConnectionStarted]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushTunnel onConnectionBegin]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushTunnel onConnectionAddedConnect:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushTunnel onConnectionBroken]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushTunnel checkConnectionStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushTunnel applicationEnterBackground:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushTunnel spConnectionManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushTunnel sendQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushTunnel spConnectionStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNSharkPushTunnel connectionBegin]", 0)}, 0);
setTimeout(function(){hookObjC("+[TNSocketAddress addressWithHost:andPort:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel useMultiIP]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel connectionWeight]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel defaultClientTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel defaultServerTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel pingInterval]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel closeTcpTunnel]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel closeSharkPushTunnel]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel turnOffTcpTunnel]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel rttThreshold]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel rttSPThreshold]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel racingPingTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel waitTunnel]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel waitEncryptTunnel]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel wifiRttResultNum]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel startTunnelService]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel startSecureService]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel send:timeout:info:]", 3)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel sendHttpRequest:timeout:info:]", 3)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel sendHttpRequest:timeout:compression:info:]", 4)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel reqeustAttachHeader:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel cancelRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel postResponse:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel postNoSecure:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel postIsTunnelReady]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel postSharkPushTunnelReady]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel emptyQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel need2ChangeMultiConnection]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel beginAddSecureCallBack]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel onConnectionBegin]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel onConnectionStarted]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel onConnectionAddedConnect:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel onConnectionAdded]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel onConnectionBroken]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel checkConnectionStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel onConnectResult:elapse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel connectionsDidFail:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel sessionBegan:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel launchSendQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel sessionFinished:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel sessionAborted:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel sessionStatusChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel logForSecureTunnel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel reportSecureError:secureData:payload:]", 3)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel reportServerUnsent:requestId:extend:]", 3)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel reportServerUnsent:extend:]", 2)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel applicationEnterBackground:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel md5:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel spTunnel]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel runningSessions]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel sendQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel connectionManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel blackWhiteList]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel connectionStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel sharkPushTunnelReady]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel completionQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel sendQueueMgr]", 0)}, 0);
setTimeout(function(){hookObjC("-[TNTunnel addressBlock]", 0)}, 0);
setTimeout(function(){hookObjC("+[TNUtils generateHttpRequestId]", 0)}, 0);
setTimeout(function(){hookObjC("-[OHHTTPStubsDescriptor responseBlock]", 0)}, 0);
setTimeout(function(){hookObjC("+[OHHTTPStubsProtocol canInitWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[OHHTTPStubsProtocol canonicalRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[OHHTTPStubsProtocol cachedResponse]", 0)}, 0);
setTimeout(function(){hookObjC("-[OHHTTPStubsProtocol startLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[OHHTTPStubsProtocol stopLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[OHHTTPStubsProtocol streamDataForClient:withStubResponse:completion:]", 3)}, 0);
setTimeout(function(){hookObjC("-[OHHTTPStubsProtocol streamDataForClient:fromStream:timingInfo:completion:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CLLocationManager SAKRiskFingerprint_proxy]", 0)}, 0);
setTimeout(function(){hookObjC("+[OWLCommonInstance sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[OWLCommonInstance telephonyNetworkInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKWindFingerprintGenerator sharedGenerator]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKWindFingerprintGenerator requestSyncCorpse]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKWindFingerprintGenerator tranformToFingerprint:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKWindFingerprintGenerator requestCorpse:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKWindFingerprintGenerator requestSyncFingerprint]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKWindFingerprintGenerator mapFingerprintDitionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKWindFingerprintGenerator lastLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKWindFingerprintGenerator lastCorpse]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKWindFingerprintGenerator fingerVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKWindFingerprintGenerator pushToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKWindFingerprintGenerator magicNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKWindFingerprintGenerator dpID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKWindFingerprintGenerator motionQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKWindFingerprintGenerator motionArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKWindFingerprintGenerator motionManager]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKWifiMacWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKMnoWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKDmWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKBatteryStateWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKBatteryLevelWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKOSWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKCellWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKSCWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKSystemVolumeWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKBootTimeWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKIdfaWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKIdfvWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKLocstatusWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKSimstateWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKStorageWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKPhonenameWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKFirstlaunchtimeWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKUUIDWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKWifiIPWFInfo formatIPV4Address:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKWifiIPWFInfo formatIPV6Address:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKWifiIPWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKBlueStatuWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKSourceWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKNetWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKCoreFileCreateTimeWFInfo dateFormatter]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKCoreFileCreateTimeWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKCoreFileModifyTimeWFInfo dateFormatter]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKCoreFileModifyTimeWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKPhonenameInFileWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKInstallTimeWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKLocal_TimeWFInfo owl_accessInfomation]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKWindFingerprintMetaDataManager OWLGetMetaDataClasses]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKWindFingerprintMetaDataManager OWLRegisterMetaData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ONIDataBase dataBase]", 0)}, 0);
setTimeout(function(){hookObjC("-[ONIDataBase oniUserDefaults]", 0)}, 0);
setTimeout(function(){hookObjC("+[ONIDeviceInfo deviceInfoQueryWithAppName:secondaryDevicExtraInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("+[ONIDeviceInfo appInfoDictionaryWithAppName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ONIDeviceInfo environmentInfoDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[ONIDeviceInfo communicationInfoDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[ONIDeviceInfo deviceInfoDictionaryWithExtraInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ONIDPIDKeychainHelper DPIDFromKeychain]", 0)}, 0);
setTimeout(function(){hookObjC("+[ONIDPIDKeychainHelper updateDPIDInKeychain:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ONIDPIDKeychainHelper keychainQuery]", 0)}, 0);
setTimeout(function(){hookObjC("+[Onimaru syncUnionID]", 0)}, 0);
setTimeout(function(){hookObjC("+[Onimaru asyncUnionID:]", 1)}, 0);
setTimeout(function(){hookObjC("+[Onimaru configDPIDServerStrategy:]", 1)}, 0);
setTimeout(function(){hookObjC("+[Onimaru DPIDFromOnimaru]", 0)}, 0);
setTimeout(function(){hookObjC("+[Onimaru localID]", 0)}, 0);
setTimeout(function(){hookObjC("+[ONIOneIDMaker sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[ONIOneIDMaker asyncUnionID:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ONIOneIDMaker syncUnionID]", 0)}, 0);
setTimeout(function(){hookObjC("-[ONIOneIDMaker sendAsyncUnionIDRequestWithCompletionHandler:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ONIOneIDMaker DPIDFromOneIDServer]", 0)}, 0);
setTimeout(function(){hookObjC("-[ONIOneIDMaker sendAsyncRequestForDPIDIfSwitcherOn]", 0)}, 0);
setTimeout(function(){hookObjC("-[ONIOneIDMaker oneIDRequestQueryDictionaryForID:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ONIOneIDMaker dpidServerSwicher]", 0)}, 0);
setTimeout(function(){hookObjC("-[ONIOneIDMaker secondaryDeviceExtraInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[ONIOneIDMaker appName]", 0)}, 0);
setTimeout(function(){hookObjC("-[ONIOneIDMaker localID]", 0)}, 0);
setTimeout(function(){hookObjC("-[ONIOneIDMaker unionIDPackage]", 0)}, 0);
setTimeout(function(){hookObjC("-[ONIOneIDMaker dpidPackage]", 0)}, 0);
setTimeout(function(){hookObjC("-[ONIOneIDMaker callbackArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[ONIOneIDNetTask registerIDWithParameters:callBack:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ONIOneIDNetTask updateIDWithParameters:callBack:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ONIOneIDNetTask sendIDRequestToURL:method:parameters:callBack:]", 4)}, 0);
setTimeout(function(){hookObjC("+[ONISimulateIDFA createSimulateIDFA]", 0)}, 0);
setTimeout(function(){hookObjC("+[ONIUnionIDKeychainHelper unionIDFromKeychain]", 0)}, 0);
setTimeout(function(){hookObjC("+[ONIUnionIDKeychainHelper updateUnionIDInKeychain:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ONIUnionIDKeychainHelper localID]", 0)}, 0);
setTimeout(function(){hookObjC("+[ONIUnionIDKeychainHelper localIDFromKeychain]", 0)}, 0);
setTimeout(function(){hookObjC("+[ONIUnionIDKeychainHelper storeLocalIDToKeychain:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ONIUnionIDKeychainHelper localIDCreatedNow]", 0)}, 0);
setTimeout(function(){hookObjC("+[ONIUtils networkInfoSharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[ONIUtils hasKeychainAccessAuthority]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnection stream:handleEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PSConnection onStreamHasBytesAvailable:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSConnection onStreamHasSpaceAvailable:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSConnection onStreamErrorOccurred:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSConnection onStreamEndEncountered:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSConnection onStreamOpenCompleted:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSConnection send:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSConnection onReceivePing]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnection loadBalance]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnection heartBeat]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnection loginPushService]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnection responsePushService:state:groupId:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PSConnection onReadPushMessage:handlerType:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PSConnection checkConnectionBuild]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnection readStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnection writeStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnection connectionState]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnection finishLoadBalance]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnection pushProtocol]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnection dataProcess]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager startConnections]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager prepareConnections]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager addConnections:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager startHeartBeat]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager stopHeartBeatTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager fireCheckTunnelConnection]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager startCheckTunnelConnection]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager heartBeatConnectiones]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager registerWithPushToken:encrypt:response:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager connctionCompleted:success:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager finishPing:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager loadBalance:ipList:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager networkReachabilityChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager enterBackground:shouldClose:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager closeConnections]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager closeConns:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager connctionBroken:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager hasNewIps]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager httpProtocol]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager logManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager heartbeatTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager handlePushMessage]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSConnectionManager connectCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSDataProcess handlerType:PushMessage:block:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PSDataProcess onReceivePing]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSDataProcess onReadLoadBalance:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSDataProcess psNullToEmpty:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSDataProcess businessMessage:params:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PSDataProcess hasShowedPushmsgid:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSDataProcess registeRespond:params:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PSDataProcess heartBeatResond:params:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PSDataProcess loginSuccess:params:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PSDataProcess psBlock]", 0)}, 0);
setTimeout(function(){hookObjC("+[PSEnvironment sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment bundleId]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment sdkVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment appVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment appName]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment deviceModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment uniqueMACUDIDIdentifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment uniqueDeviceID]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment apnsToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment uploadedApnsToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment clearUploadedApnsToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment clearPushToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment defaultPSTunnelSocketAddrs]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment loadBalanceList]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment connectedIpList:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment defaultLoadBalanceOuttime]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment pushDefaultOuttime]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment defaultConnectOuttime]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment heartBeatInterval]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment ipList:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment readByteWithData:index:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment pushSDKApi]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment pushSDKLog]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment pushSDKRegist]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment pushSDKBind]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSEnvironment deviceName]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSHttpProtocol registerWithPushToken:encrypt:response:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PSHttpProtocol registContentWithEncrypt]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSHttpProtocol logForPushReceivedWithParam:response:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PSHttpProtocol reportWithUrl:param:response:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PSHttpProtocol httpRegistWithResponse:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSHttpProtocol bindApnsTokenWithPushtoken]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSLogManager httpProtocol]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSLogManager failArr]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSLogManager shouldRetry]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSPushManager handleBussniessResponeWithDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSPushManager httpRegist]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSPushManager bindApnsTokenWithPushtoken]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSPushManager launchOptions]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSPushMessage pushMsgId]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSPushMessage groupId]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSPushMessage msgBody]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSPushProtocol registeWithStream:encrypt:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PSPushProtocol registContentWithEncrypt:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSPushProtocol buildConnectionWithStream:encrypt:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PSPushProtocol connectionContentWithEncrypt:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSPushProtocol responseWithStream:encrypt:pushMsgId:state:groupId:]", 5)}, 0);
setTimeout(function(){hookObjC("-[PSPushProtocol responseParamContentWithEncrypt:pushMsgId:state:groupId:]", 4)}, 0);
setTimeout(function(){hookObjC("-[PSPushProtocol responseWithClicked:encrypt:pushMsgId:groupId:]", 4)}, 0);
setTimeout(function(){hookObjC("-[PSPushProtocol responseClickedParamContentWithEncrypt:pushMsgId:groupId:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PSPushProtocol heartBeatWithStream:encrypt:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PSPushProtocol pingWithStream:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSPushProtocol loadBalanceWithStream:shouldEncrypt:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PSPushProtocol readDataWithStream:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSPushService pushToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSPushService pushSDKHandleRemoteNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSPushService pushSDKHandleReveiveRemoteNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSPushService addListener:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSPushService removeListener:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSPushService psManagerGetMessage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSPushService pushMessage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSPushService psManagerGetPushToken:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSPushService psManagerLoginSuccess]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSPushService pushRegistRes:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSPushService pushLoginRes]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSPushService onPushShowedWithPushMsgID:groupID:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PSPushService onPushClickedWithPushMsgID:groupID:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PSPushService onPushShowedWithPayload:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSPushService onPushClickedWithPayload:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSPushService connectiongStatus:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSPushService tunnelConnecting]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSPushService tunnelConnected]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSPushService tunnelDisconnected]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSPushService pushManager]", 0)}, 0);
setTimeout(function(){hookObjC("+[PSReachability reachabilityWithAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("+[PSReachability reachabilityForInternetConnection]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSReachability startNotifer]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSReachability stopNotifer]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSRequest pushMsgId]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSRequest groupId]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSResponse psDict]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSResponse stateCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSSendQueueMgr startSend]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSSession postResponse:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSSocketAddress encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("+[PSSocketAddress addressWithHost:andPort:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel loadConnections]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel postResponse:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel loadConnectionWithType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel loadBusinessWithType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel startPushService:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel heartBeatWhenNotConnected:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel pushResponseWith:state:groupId:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel send:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel sessionBegan:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel sessionFinished:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel launchSendQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel loginSuccess:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel logApnsWithDiction:status:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel connctionBroken:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel addApplicationNotification]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel applicationEnterBackground:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel runInBack]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel inValidBackgroundTaskIdentifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel applicationWillEnterForeground:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel applicationDidBecomeActive:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel launchTunnel]", 0)}, 0);
setTimeout(function(){hookObjC("+[PSTunnel threadForPushService]", 0)}, 0);
setTimeout(function(){hookObjC("+[PSTunnel releaseCurrentThread]", 0)}, 0);
setTimeout(function(){hookObjC("+[PSTunnel runRequests]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel onConnectionBegin]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel onConnectionAdded]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel onConnectionBroken]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel checkConnectionStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel fibonacci:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel connectionManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel sendQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel pushManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel runningSessions]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel sendQueueMgr]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel tunnelState]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel connectionStatusBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel registeWhenLoginFail]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel reConnTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSTunnel backgroundTask]", 0)}, 0);
setTimeout(function(){hookObjC("-[PSTunnelProtocol write:contentLength:keyLength:encrypt:content:keyContent:stream:]", 7)}, 0);
setTimeout(function(){hookObjC("-[PSTunnelProtocol writeBytes:offset:length:stream:]", 4)}, 0);
setTimeout(function(){hookObjC("-[PSTunnelProtocol realPingWithStream:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PSTunnelProtocol buildHeaderWithBuffer:contentLength:keyLength:encrypt:command:]", 5)}, 0);
setTimeout(function(){hookObjC("-[PSTunnelProtocol readWithStream:body:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PSTunnelProtocol readByteWithStream:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PCSPlayground handleWithSchemeModel:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PCSPlayground canHandleWithSchemeModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[PCSPlayground picassofileChange:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PCSPlayground switchDebugMode]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoBridgeContext sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoBridgeContext _loadFramework]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoBridgeContext _registerGlobalFunctions]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoBridgeContext _injectModules:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoBridgeContext _invokeNativeHost:module:method:arguments:callback:]", 5)}, 0);
setTimeout(function(){hookObjC("-[PicassoBridgeContext _executeCallbackWithHost:callbackId:status:response:]", 4)}, 0);
setTimeout(function(){hookObjC("-[PicassoBridgeContext stringFromDic:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoBridgeContext destroyPCWithHostId:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoBridgeContext updatePCWithHostId:method:argument:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PicassoBridgeContext syncCallPCWithHostId:method:argument:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PicassoBridgeContext callbackSuccessWithHost:callbackId:responseData:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PicassoBridgeContext callbackFailWithHost:callbackId:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PicassoBridgeContext callbackHandleWithHost:callbackId:responseData:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PicassoBridgeMethodConfig loadMethods]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoBridgeMethodConfig selectorWithMethodName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoBridgeMethodConfig moduleMethods]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoBridgeMethodConfig methodsMap]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoBroadcastModule pcs_export_method_21]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoBroadcastModule pcs_export_method_22]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoBroadcastModule pcs_export_method_23]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoBroadcastModule subscribe:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PicassoBroadcastModule unSubscribe:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoBroadcastModule publish:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PicassoBroadcastModule onBroadcast:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoBroadcastModule eventCallBacks]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoError errorWithCode:msg:customInfo:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PicassoError errorMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoError errorCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoError customInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoCallBack callbackWithHost:callbackId:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PicassoCallBack sendSuccess:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoCallBack sendError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoCallBack sendNext:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoCallBack callbackId]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoCoreResourceManager updatePicassoWithUrlStr:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoCoreResourceManager saveData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[PicassoCoreResourceManager pathForCoreJS]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoCoreResourceManager directoryForCoreJS]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoCoreResourceManager curCoreJSmd5]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoCoreResourceManager md5ForData:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoDebugHost shouldReloadOnJSChanged:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoDebugMode fetchFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoDebugMode startMonitorWithIp:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoDebugMode startMonitorWithToken:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoDebugMode loadFileAfter:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoDebugMode loadFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoDebugMode closeFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoDebugMode logToPicassoServerWithType:content:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PicassoDebugMode debugModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoDebugMode mockServerEnable]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoDebugMode serverIP]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoDefaultNavigatorImp callback:status:data:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PicassoHost callbackSuccessWithCallbackId:responseData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PicassoHost callbackFailWithCallbackId:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PicassoHost callbackHandleWithCallbackId:responseData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PicassoHost moduleInstanceForClass:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoHost callControllerMethod:argument:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PicassoHost syncCallControllerMethod:argument:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PicassoHost destroyHost]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoHost pageController]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoHost moduleInstanceMapper]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoHost hostId]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoHostManager _instance]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoHostManager saveHost:forHostId:]", 2)}, 0);
setTimeout(function(){hookObjC("+[PicassoHostManager hostForId:]", 1)}, 0);
setTimeout(function(){hookObjC("+[PicassoHostManager removeHostFotId:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoHostManager hostMapper]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoImplementsFactory _sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoImplementsFactory innerImplDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoImplementsFactory _loadMapper]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoImplementsFactory implementForProtocol:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoImplementsFactory implDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoInput preCompute]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoInput computeSignal]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoInput jsName]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoInput jsContent]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoInput jsContextInject]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoJSContext defaultJSContext]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoJSContext loadCustomJS:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoJSContext evaluatedJsDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoJSContext loadedJS]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoJSCoreBridge executeJS:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoJSCoreBridge executeJS:withSourceUrl:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PicassoJSCoreBridge registerNativeBridge:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoJSCoreBridge registerNativeRequire:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoJSCoreBridge callJSMethod:arguments:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PicassoJSCoreBridge injectObject:name:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PicassoJSCoreBridge triggerTimeout:]", 1)}, 0);
setTimeout(function(){hookObjC("+[PicassoJSModuleManager _instance]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoJSModuleManager jsModuleDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoJSObject fontDescender]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoLabelWrapper labelModel]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoLoadingViewWrapper pcs_export_method_15]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoLoadingViewWrapper loadingStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoLoadingViewWrapper retryBlock]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoLog sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoModalModule pcs_export_method_25]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoModalModule pcs_export_method_26]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoModalModule pcs_export_method_27]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoModalModule pcs_export_method_28]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoModalModule toast:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoModalModule toast:duration:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PicassoModalModule alert:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PicassoModalModule confirm:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PicassoModalModule prompt:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PicassoModalModule objectKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoModalModule textfieldDic]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoModuleFactory _sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoModuleFactory innerModuleMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoModuleFactory _loadMapper]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoModuleFactory loadedModules]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoModuleFactory selectorWithModule:method:]", 2)}, 0);
setTimeout(function(){hookObjC("+[PicassoModuleFactory classForModuleName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoModuleFactory moduleMapper]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoModuleMethod hostId]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoModuleMethod moduleName]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoModuleMethod methodName]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoModuleMethod callbackId]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoNavigatorModule pcs_export_method_24]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoNavigatorModule pcs_export_method_25]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoNavigatorModule pcs_export_method_26]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoNavigatorModule pcs_export_method_27]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoNavigatorModule pcs_export_method_28]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoNavigatorModule pcs_export_method_29]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoNavigatorModule openScheme:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PicassoNavigatorModule pop:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PicassoNavigatorModule callback:status:data:]", 3)}, 0);
setTimeout(function(){hookObjC("+[PicassoNetworkModule pcs_export_method_15]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoNetworkModule fetch:callback:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PicassoNotificationUserInfo userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoNotificationCenter postNotificationName:userInfo:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PicassoNotificationCenter addObserverForName:usingBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("+[PicassoNotificationCenter registerSchemeCallback:]", 1)}, 0);
setTimeout(function(){hookObjC("+[PicassoNotificationCenter registerGAUpdateCallback:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoNotificationCenter customObservers]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoReadWriteLock lockRead]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoReadWriteLock unLockRead]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoReadWriteLock lockWrite]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoReadWriteLock unLockWrite]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoReadWriteLock readLock]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoReadWriteLock writeLock]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoReadWriteLock readCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoRefreshControl criticalOffset]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoRefreshControl shouldPullJump]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoRefreshControl beginRefresh]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoRefreshControl headerRefreshFinished]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoRefreshControl simulateDragRefresh]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoRefreshControl enablePullJump]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoRefreshControl pullJumpThreshold]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoRefreshControl originContentInset]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoRenderUtils layoutLabelsForModel:inHost:]", 2)}, 0);
setTimeout(function(){hookObjC("+[PicassoSDK registerSchemeCallback:]", 1)}, 0);
setTimeout(function(){hookObjC("+[PicassoSDK registerGAUpdateCallback:]", 1)}, 0);
setTimeout(function(){hookObjC("+[PicassoStatusBarModule pcs_export_method_13]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoStatusBarModule pcs_export_method_14]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoStorageModule pcs_export_method_19]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoStorageModule pcs_export_method_20]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoStorageModule pcs_export_method_21]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoStorageModule pcs_export_method_22]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoStorageModule store:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoStorageModule retrieve:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoStorageModule remove:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoStorageModule clear:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoStorageModule cacheDic]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoBridgeThread bridgeRunLoop]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoBridgeThread stopRunning]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoViewComputeThread computeRunLoop]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoViewComputeThread stopRunning]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoThreadManager _bridgeThread]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoThreadManager _runOnBridgeThread:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoThreadSafeMutableDictionary objectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoThreadSafeMutableDictionary allKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoThreadSafeMutableDictionary keyEnumerator]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoThreadSafeMutableDictionary removeObjectForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoThreadSafeMutableDictionary removeAllObjects]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoTimerModule pcs_export_method_50]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoTimerModule pcs_export_method_51]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoTimerModule pcs_export_method_52]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoTimerModule clearTimer:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoTimerModule createTimerWithInterval:repeat:callback:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PicassoTimerModule createTimerWithTarget:selector:interval:repeat:callback:]", 5)}, 0);
setTimeout(function(){hookObjC("-[PicassoTimerModule timerDic]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoUtility appId]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoUtility deviceName]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoVCHost msgBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoVCHost updateVCState:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoVCHost needRelayout]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoVCHost modelForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoVCHost keyModelMap]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoVCModule pcs_export_method_20]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoVCModule pcs_export_method_21]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoVCModule pcs_export_method_22]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoVCModule needLayout]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoVCModule commandNative:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoVCModule sendMsg:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoViewInput preCompute]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoViewInput callLayout]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoViewInput computeSignal]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoViewInput jsName]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoViewInput jsContent]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoViewInput onReceiveMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoViewMethod hostId]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoViewMethod methodName]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoViewWrapperFactory _sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoViewWrapperFactory _loadMapper]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoCacheParamters paramtersWithDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoCacheParamters jsArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoCache headersForParam:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoCache jsGroupParams:groupName:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PicassoCache jsParams:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoCache cachedConentWithContent:]", 1)}, 0);
setTimeout(function(){hookObjC("+[PicassoCache sharedCache]", 0)}, 0);
setTimeout(function(){hookObjC("+[PicassoJSManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoJSManager syncLocalJS]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoJSManager cacheContentKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[PicassoJSManager jsContentWithName:forHash:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PicassoJSManager jsHashsWithName:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PicassoJSManager updateJSContent:withName:forHash:]", 3)}, 0);
setTimeout(function(){hookObjC("-[PicassoJSManager updateGroupCacheJSByGroupName:forData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient cacheBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient pc_fuck64kString:withArray:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient pc_basePicassoJSFrom:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient pc_picassoJSFrom:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NVNetworkClient pc_picassoCacheParamtersFrom:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKABTest predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKABTest currentRule]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKABTest currentFlow]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKABTestCenter openWithIMeituanConfig]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKABTestCenter defaultCenter]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKABTestCenter allocWithZone:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKABTestCenter fetchAllABTests]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKABTestCenter __addDefaultValues:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKABTestCenter addDefaultValues:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKABTestCenter defaultTests]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKABTestInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKABTestService addDefaultValues:]", 1)}, 0);
setTimeout(function(){hookObjC("-[SAKABTestService fetchAllABTests]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKABTestService defaultItems]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKABTestService activeLocalItems]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKABTestService remoteItems]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKABTestService defaultTests]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKABTestService remoteTests]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKABTestService compaignString]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKABTestService outgoingDisposable]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKABTestService debugItemsChangedDisposable]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCBindSocialAccountManager fetchBindStatusCommand]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCBindSocialAccountManager cancelBindWechatCommand]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCBindSocialAccountManager cancelBindQQCommand]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCBindSocialAccountManager cancelBindWeiboCommand]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCBindSocialAccountManager bindThirdPartAccount:accessToken:openID:confirm:]", 4)}, 0);
setTimeout(function(){hookObjC("-[ACCBindSocialAccountManager wechatBindStatusSignal]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCBindSocialAccountManager QQBindStatusSignal]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCBindSocialAccountManager weiboBindStatusSignal]", 0)}, 0);
setTimeout(function(){hookObjC("+[ACCCountriesDomainObject predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[ACCCountryDomainObject predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[ACCGradientLayer GradientLayerWithProperty:frame:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ACCGradientProperty startPoint]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCGradientProperty endPoint]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCInputTextField textFieldShouldReturn:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ACCInputTextField textField:shouldChangeCharactersInRange:replacementString:]", 3)}, 0);
setTimeout(function(){hookObjC("-[ACCInputTextField canBecomeFirstResponder]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCInputTextField becomeFirstResponder]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCInputTextField placeholderText]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCInputTextField keyboardType]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCInputTextField autoShowClear]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCInputTextField secureTextEntry]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCInputTextField countryCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCInputTextField inputLength]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCInputTextField textDidChangedBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCInputTextField textDidEnterBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCInputTextField textField]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCInputTextField separatorLine]", 0)}, 0);
setTimeout(function(){hookObjC("+[ACCLogInManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCLogInManager dealLogIn:error:account:password:]", 4)}, 0);
setTimeout(function(){hookObjC("-[ACCLogInManager dealDoubleVerificationWithError:account:password:]", 3)}, 0);
setTimeout(function(){hookObjC("-[ACCLogInManager dealBindPhoneWithError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ACCLogInManager dealVerifyError:account:password:]", 3)}, 0);
setTimeout(function(){hookObjC("-[ACCLogInManager dealFailedTooManyTimesError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ACCLogInManager dealNeedRegistError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ACCLogInManager dealNeedSetPasswordError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ACCLogInManager redirectToLogInModel:mobile:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ACCLogInManager dealRegisterAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCLogInManager didBindCallBack]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCLogInManager needNeedDoubleVerification]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCLogInManager logInFailedCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCLogInManager countryCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCLogInManager countryName]", 0)}, 0);
setTimeout(function(){hookObjC("+[ACCLogInTypeResponse predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCLogInTypeResponse requestCode]", 0)}, 0);
setTimeout(function(){hookObjC("+[ACCPassportErrorData predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCPassportErrorData requestCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCPassportErrorData jumpUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCPassportErrorData userTicket]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCPassportErrorData succCallbackUrl]", 0)}, 0);
setTimeout(function(){hookObjC("+[ACCPassportErrorResponse predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCPassportErrorResponse commonErrorModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCPassportErrorResponse errorCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCPassportErrorResponse errorMessage]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCPassportErrorResponse errorType]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCPrivacyPolicyConfigure privacyPolicyNameArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCPrivacyPolicyConfigure privacyPolicyURLArray]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCPrivacyPolicyConfigure privacyPolicyTitle]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCPrivacyPolicyConfigure privacyPolicyString]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCPrivacyPolicyConfigure stringCompareOptions]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCPrivateUserService sendVerificationCodeToMobile:ticket:finished:]", 3)}, 0);
setTimeout(function(){hookObjC("-[ACCPrivateUserService sendVerificationCodeToMobile:captcha:ticket:finished:]", 4)}, 0);
setTimeout(function(){hookObjC("-[ACCPrivateUserService bindPhoneWithPhoneNumber:verificationCode:ticket:confirm:finished:]", 5)}, 0);
setTimeout(function(){hookObjC("-[ACCPrivateUserService mergeAccountWithUserToken:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ACCPrivateUserService cacheDAO]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCResetPasswordTextField textFieldShouldReturn:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ACCResetPasswordTextField textField:shouldChangeCharactersInRange:replacementString:]", 3)}, 0);
setTimeout(function(){hookObjC("-[ACCResetPasswordTextField canBecomeFirstResponder]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCResetPasswordTextField becomeFirstResponder]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCResetPasswordTextField updateConstraints]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCResetPasswordTextField er_text]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCResetPasswordTextField placeholderText]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCResetPasswordTextField keyboardType]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCResetPasswordTextField autoShowClear]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCResetPasswordTextField secureTextEntry]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCResetPasswordTextField countryCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCResetPasswordTextField inputLength]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCResetPasswordTextField textDidEnterEvent]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCResetPasswordTextField textField]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCResetPasswordTextField separatorLine]", 0)}, 0);
setTimeout(function(){hookObjC("+[ACCServiceCommonUtils errorMessage:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ACCSharedAccountVerifyResponse predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCSharedAccountVerifyResponse userName]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCSharedAccountVerifyResponse nickName]", 0)}, 0);
setTimeout(function(){hookObjC("+[ACCShipmentInfo predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCShipmentInfo provinceCityString]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCShipmentInfo infoID]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCShipmentInfo userID]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCShipmentInfo cityDetail]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCShipmentInfoService addShipmentInfo:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ACCShipmentInfoService updateShipmentInfo:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ACCShipmentInfoService deleteShipmentInfo:finished:]", 2)}, 0);
setTimeout(function(){hookObjC("-[ACCShipmentInfoService loadShipmentInfoList:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ACCVerifyDataResponse responseCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCVerifyErrorResponse commonErrorModel]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCVerifyErrorResponse errorCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCVerifyErrorResponse errorMessage]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCVerifyErrorResponse requestCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCVerifyResponse verifySucceed]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCVerifyResponse dataResponse]", 0)}, 0);
setTimeout(function(){hookObjC("-[ACCVerifyResponse errorResponse]", 0)}, 0);
setTimeout(function(){hookObjC("+[ACCWeakProxy proxyWithTarget:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ACCWeakProxy respondsToSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ACCWeakProxy methodSignatureForSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ACCWeakProxy forwardInvocation:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SAKAccountDoubleVerificationRequestDataObject predicateDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAccountDoubleVerificationRequestDataObject jumpUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAccountDoubleVerificationRequestDataObject successCallbackUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAccountDoubleVerificationRequestDataObject userTicket]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKAccountServiceConfigure shareConfigure]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAccountServiceConfigure usingFourVoiceVerificationCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAccountServiceConfigure defaultSigninMode]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAccountServiceConfigure SSOLoginService]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAccountServiceConfigure checkSharedAccounts]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAccountServiceConfigure customLogInParams]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAccountServiceConfigure riskApp]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAccountServiceConfigure riskPartner]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAccountServiceConfigure riskPlatform]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAccountServiceConfigure strongPasswordPolicy]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAccountSharedAccountSingleControl pickAppIcon]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAccountSharedAccountSingleControl sharedAccount]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAccountSharedAccountSingleControl appIcon]", 0)}, 0);
setTimeout(function(){hookObjC("+[SAKAccountSSOConfigure shareConfigure]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAccountSSOConfigure weixinAPPID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAccountSSOConfigure weixinAPPSecret]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAccountSSOConfigure weiboAPPKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAccountSSOConfigure weiboRedirectURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAccountSSOConfigure qqAPPID]", 0)}, 0);
setTimeout(function(){hookObjC("-[SAKAccountSSOConfigure supportQQSSOLogin]", 0)}, 0);
