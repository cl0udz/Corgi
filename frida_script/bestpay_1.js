
var resolver = new ApiResolver('objc');

function onEnterFunc(args, argNum, infoArray){
    // infoArray = [ argNum, args[1], args[2], ... , args[argNum + 1], args[0], retval, funcname ]
    infoArray[0] = argNum;

    /*try {
        tmp = new ObjC.Object(args[0]);
        infoArray[argNum + 2] = tmp.toString();
    } catch(error){
        try { 
            infoArray[argNum + 2] = strFilter(Memory.readCString(args[0], 128).toString());
        } catch(err) {
            infoArray[argNum + 2] = args[0].toString();
        }
    }*/

    for(var i=1; i<argNum+2; ++i) {
        infoArray[i] = 'arg';
        /*try {
            tmp = new ObjC.Object(args[i]);
            infoArray[i] = tmp.toString();
        } catch(error){
            try { 
                infoArray[i] = strFilter(Memory.readCString(args[i], 128).toString());
            } catch(err) {
                infoArray[i] = args[i].toString();
            }
        }*/
    }

    return;
}

function onLeaveFunc(retval, argNum, infoArray){

    infoArray[argNum + 3] = 'retval';
    /*try {
        tmp = new ObjC.Object(retval);
        infoArray[argNum + 3] = tmp.toString();
    } catch(error){
        try { 
            infoArray[argNum + 3] = strFilter(Memory.readCString(retval, 128).toString());
        } catch(err) {
            infoArray[argNum + 3] = retval.toString();
        }
    }*/

    return;
}

function strFilter(str) {
    for(var i=0; i<str.length; ++i){
        if(str.charCodeAt(i) >= 32 && str.charCodeAt(i) <= 127)
            { }
        else
            return str.substring(0, i);
    }
    return str;
}

function hookObjC(FuncName, ArgNum){
    resolver.enumerateMatches(FuncName, {
        onMatch: function (match) {
                    // infoArray = [ argNum, args[1], args[2], ... , args[argNum + 1], args[0], retval, funcname ]
                    var infoArray = new Array(ArgNum + 4);
                    infoArray[ArgNum + 4] = match.name;
                    //send(match.name);

                    Interceptor.attach(match.address, {
                    onEnter: function(args){
                        //send(match.name);
                        onEnterFunc(args, ArgNum, infoArray);
                    },
                    onLeave: function(retval){
                        onLeaveFunc(retval, ArgNum, infoArray);
                        send(infoArray);
                    }
                    })
                },
        onComplete: function () {
                }
    }); 
}

setTimeout(function(){hookObjC("-[MAQuadTree removeAnnotation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAQuadTree removeAllObjects]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAQuadTree updateAnnotation:fromOldPosition:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MAQuadTree containsAnnotation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAQuadTree annotationsInBoundingBox:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MATraceComponent sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATraceComponent userAgent]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMapRender mapEngine]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMapRender startRender]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMapRender stopRender]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMapRender decreaseFrequency]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMapRender resumeFrequency]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMapRender snapshotImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[MAMapRender layerClass]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMapRender fireListenFrequencyTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMapRender resizeEAGLLayer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMapRender layoutSubviews]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMapRender takeSnapshot]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMapRender reloadMap]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMapRender renderFrameInterval]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMapRender snapshotPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMapRender snapshotEnabled]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMemoryCache removeTile:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAMemoryCache cachedImage:withCacheKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MAMemoryCache makeSpaceInCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMemoryCache addImage:forTile:withCacheKey:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMemoryCache removeAllCachedImages]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMemoryCache removeAllCachedImagesForCacheKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAMemoryCache didReceiveMemoryWarning]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMemoryCache shouldRefreshCachedObject]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATraceResponse responseData]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAAnimationParameter mapPointCenter]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAAnimationParameter zoomLevel]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAAnimationParameter cameraDegree]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAAnimationParameter roateDegree]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAAnimationParameter rotateUserData]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAAnimationParameter cameraUserData]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAAnimationTaskManager animationCount]", 0)}, 0);
setTimeout(function(){hookObjC("+[MAOfflineMap offlineRequestQueue]", 0)}, 0);
setTimeout(function(){hookObjC("+[MAOfflineMap sharedOfflineMap]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap nationWide]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap downloadItem:shouldContinueWhenAppEntersBackground:downloadBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap pauseItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap deleteItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap deleteFilesForItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap deleteFileAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap cancelAll]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap clearDisk]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap checkNewestVersion:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap executeCompleteWithItem:downloadBlock:status:info:]", 4)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap checkLocalVersion:completionBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap updateOfflinePackageWithCompletionBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap checkoutNewestPackageWithCompletionBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap cachedFilePathForItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap vmapFilePathForItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap clearCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap deleteCachedFileForItems:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap mergeFrom:to:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap updateItemStatusToNoneIncludingCached:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap resetItemStatusForItem:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap unzipDownloadedFile:adcode:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap clearAndReconstructDirectoryAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap forbidBackup]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap basePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap CachedFilePath]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap runningOperations]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap checkNewestVersionIsRunning]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap vmapPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap offlineCities]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap downloadCity:downloadBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap downloadCity:shouldContinueWhenAppEntersBackground:downloadBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineMap pause:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MATraceUtils filterOutInvalidPoints:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MATraceUtils normalizeTracePoints:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MATraceUtils calculateDistance:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAAngleIndicator updateAngle]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAAngleIndicator overlapImage]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAAngleIndicator gradientLayer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAAngleIndicator shapeLayer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAAngleIndicator maskLayer]", 0)}, 0);
setTimeout(function(){hookObjC("+[MATouchPoi poiWithName:coordinate:uid:]", 3)}, 0);
setTimeout(function(){hookObjC("+[MAGLESUnity sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAGLESUnity createContext]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAGLESUnity createFramebufferFromLayer:context:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MAGLESUnity maGlFlush]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAGLESUnity maGLFinish]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAGLESUnity readPixelDataWith:dataRef:andRect:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAGLESUnity loadTextureImage:textureID:textureTRepeat:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAGLESUnity LineBuilder]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAGLESUnity ColoredLineBuilder]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAGLESUnity PolygonClipper]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAGLESUnity PolygonTriangulator]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAGLESUnity lineTextureForThin:lineDashed:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MAGLESUnity thinLineTexture]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAGLESUnity thinLineDashTexture]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAGLESUnity lineTexture]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAGLESUnity lineDashTexture]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAGLESUnity clearTexture:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MAOfflineRequestReformer reformerWithURLString:existedDataLength:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineRequestReformer cachePolicy]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineRequestReformer generateRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineRequestReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAOfflineRequestReformer urlString]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAGroundOverlayRenderer groundOverlay]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAGroundOverlayRenderer referenceDidChange]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAGroundOverlayRenderer glRender]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAGroundOverlayRenderer textureID]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMultiTexturePolylineRenderer multiPolyline]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMultiTexturePolylineRenderer strokeTextureIDs]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMultiTexturePolylineRenderer glRender]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMultiTexturePolylineRenderer textureIDs]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAMultiTexturePolylineRenderer loadStrokeTextureImages:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAMultiTexturePolylineRenderer textureImages]", 0)}, 0);
setTimeout(function(){hookObjC("+[MAGeodesicPolyline longitudeSpanWithCoord1:coord2:]", 2)}, 0);
setTimeout(function(){hookObjC("+[MAGeodesicPolyline geodesicLinesForMapPoints:count:outCount:]", 3)}, 0);
setTimeout(function(){hookObjC("+[MAGeodesicPolyline polylineWithPoints:count:]", 2)}, 0);
setTimeout(function(){hookObjC("+[MAGeodesicPolyline polylineWithCoordinates:count:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MAMultiPolyline checkDrawIndexes:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAKeyFrameAnimationTask keyTimes]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAKeyFrameAnimationTask mediaTimingFunctions]", 0)}, 0);
setTimeout(function(){hookObjC("-[MACircleRenderer updateGLPoints]", 0)}, 0);
setTimeout(function(){hookObjC("-[MACircleRenderer referenceDidChange]", 0)}, 0);
setTimeout(function(){hookObjC("-[MACircleRenderer glRender]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATapPanToZoomGestureRecognizer resetProperties]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATapPanToZoomGestureRecognizer invalidateInternalTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATapPanToZoomGestureRecognizer timeoutAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATapPanToZoomGestureRecognizer touchesBegan:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MATapPanToZoomGestureRecognizer touchesMoved:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MATapPanToZoomGestureRecognizer touchesEnded:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MATapPanToZoomGestureRecognizer touchesCancelled:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MATapPanToZoomGestureRecognizer shouldBeRequiredToFailByGestureRecognizer:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MATapPanToZoomGestureRecognizer originalScale]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATapPanToZoomGestureRecognizer deltaScale]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATapPanToZoomGestureRecognizer internalTimer]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATapPanToZoomGestureRecognizer singleTapCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATapPanToZoomGestureRecognizer currentTouchCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATapPanToZoomGestureRecognizer hasDoubleTapped]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATapPanToZoomGestureRecognizer originalPoint]", 0)}, 0);
setTimeout(function(){hookObjC("+[MAOfflinePackage packageWithDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAOfflinePackage encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAOfflinePackage provincesAndMunicipalitiesForDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAOfflinePackage nationWideForDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAOfflinePackage executeInitializationWithDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAOfflinePackage descriptionDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAOfflinePackage reduceMemoryUsage]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAOfflinePackage nationWide]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAOfflinePackage dictionaryItems]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAOfflinePackage dictionaryForItemArray:key:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MAOfflinePackage constructDictionaryItems]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAOfflinePackage cityCodeItems]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAOfflinePackage invalidateItems]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAOfflinePackage scanItemsWithBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MAOfflinePackage packageWithContentsOfFile:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAOfflinePackage writeToFile:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MAMapStyleSetter featureTypeFromFeatureTypeSting:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAPolylineRenderer referenceDidChange]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAPolylineRenderer glRender]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAPointAnnotation updateCoordinateWithMapview:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAPointAnnotation lockedScreenPoint]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATileOverlay cache:willEvictObject:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MATileOverlay URLForTilePath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MATileOverlay loadTileAtPath:result:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MATileOverlay minimumZ]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATileOverlay maximumZ]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATileOverlay URLTemplate]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATileOverlay boundingMapRect]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATileOverlay canReplaceMapContent]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATileOverlay imagesAndTexturesCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATileOverlay networkManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATileOverlay cancelDownload]", 0)}, 0);
setTimeout(function(){hookObjC("+[MAMediaTimingFunction functionWithType:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction normalizeValue:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction linearInterpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction easeInQuadraticInterpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction easeOutQuadraticInterpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction easeInEaseOutQuadraticInterpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction easeInCubicInterpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction easeOutCubicInterpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction easeInEaseOutCubicInterpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction easeInQuarticInterpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction easeOutQuarticInterpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction easeInEaseOutQuarticInterpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction easeInQuinticInterpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction easeOutQuinticInterpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction easeInEaseOutQuinticInterpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction easeInSinInterpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction easeOutSinInterpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction easeInEaseOutSinInterpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction easeInExpInterpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction easeOutExpInterpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction easeInEaseOutExpInterpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction easeInCircularInterpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction easeOutCircularInterpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction easeInEaseOutCircularInterpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MAMediaTimingFunction interpolateBySlice:start:end:]", 3)}, 0);
setTimeout(function(){hookObjC("-[MATraceRequest apiKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATraceRequest HTTPHeaders]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATraceRequest postData]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATraceRequest interalPostData]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATraceRequest coordType]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATraceRequest locationArr]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATraceRequest tryCount]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATraceRequest processingCallback]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATraceRequest finishCallback]", 0)}, 0);
setTimeout(function(){hookObjC("-[MATraceRequest failedCallback]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAAnimationTask fromValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAAnimationTask toValue]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAAnimationTask keyPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAAnimationTask animationOver]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAAnimationTask userData]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAWorldMapTileOverlay clearCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[MAWorldMapTileOverlay URLForTilePath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MAWorldMapTileOverlay loadTileAtPath:result:]", 2)}, 0);
setTimeout(function(){hookObjC("-[MAWorldMapTileOverlay diskCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[MABaseMapRequestReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[output GetPubKeyRef]", 0)}, 0);
setTimeout(function(){hookObjC("-[output RSANativeInvoke:PadMsg:]", 2)}, 0);
setTimeout(function(){hookObjC("-[output RSANativeInvokeA:PadMsg:]", 2)}, 0);
setTimeout(function(){hookObjC("-[output GetPubKeyRefA]", 0)}, 0);
setTimeout(function(){hookObjC("-[output md5Digest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField insertWebviewtxt]", 0)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField DoneExecute:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField editingdidend:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField fixbuttonstate:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField didRotate:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField timerFired:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField reorderabc:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField reordernumber:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField touchNotify:Type:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField unsetbuttontap4ios6:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField stopkeypressanimation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField startkeypressanimation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField dealwithdelbutton:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField buttonallevent:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField buttontouchupinside:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField multipleTap:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField pressrv:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField becomeFirstResponder]", 0)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField resignFirstResponder]", 0)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField passLicenseVerify]", 0)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField canPerformAction:withSender:]", 2)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField paste:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField handletimer:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField insertText:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField Clean]", 0)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField m_bsupportrotate]", 0)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField m_mode]", 0)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField m_hasstatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField m_uiapp]", 0)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField m_license]", 0)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField m_strInput1]", 0)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField m_strInput2]", 0)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField m_strInput3]", 0)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField m_iSimple]", 0)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField m_iStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField _onchardelegate]", 0)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField m_ikeyordertype]", 0)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField m_ikeypresstype]", 0)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField m_isEnablePaste]", 0)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField m_isDotDelay]", 0)}, 0);
setTimeout(function(){hookObjC("-[PassGuardTextField m_isResignFirstRes]", 0)}, 0);
setTimeout(function(){hookObjC("-[KeyBoardViewPassGuard distanceBetweenPoints:To:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KeyBoardViewPassGuard avaragelocation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[KeyBoardViewPassGuard ValidScope]", 0)}, 0);
setTimeout(function(){hookObjC("-[KeyBoardViewPassGuard touchesBegan:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KeyBoardViewPassGuard touchesMoved:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KeyBoardViewPassGuard touchesEnded:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KeyBoardViewPassGuard touchesCancelled:withEvent:]", 2)}, 0);
setTimeout(function(){hookObjC("-[KeyBoardViewPassGuard m_viewframes]", 0)}, 0);
setTimeout(function(){hookObjC("-[KeyBoardViewPassGuard m_views]", 0)}, 0);
setTimeout(function(){hookObjC("-[KeyBoardViewPassGuard m_senders]", 0)}, 0);
setTimeout(function(){hookObjC("+[RegExpExtensions doesMatchRegStringExp:regexString:]", 2)}, 0);
setTimeout(function(){hookObjC("-[LicenseVerifier GetPubKeyRef]", 0)}, 0);
setTimeout(function(){hookObjC("-[LicenseVerifier verifyLicenseWrapped:isShowTip:projId:]", 3)}, 0);
setTimeout(function(){hookObjC("-[LicenseVerifier verifyLicense:isShowTip:projId:]", 3)}, 0);
setTimeout(function(){hookObjC("-[LicenseVerifier m_dateNotAfter]", 0)}, 0);
setTimeout(function(){hookObjC("-[LicenseVerifier m_dateNotBefore]", 0)}, 0);
setTimeout(function(){hookObjC("+[MMApiRegister shareInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[MMApiRegister startMTA:]", 1)}, 0);
setTimeout(function(){hookObjC("-[MMApiRegister DidEnterBackground:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MMApiRegister buildAppDictionary:oldAppDictionary:]", 2)}, 0);
setTimeout(function(){hookObjC("+[MMApiRegister registerApp:andAppSupportContentFlag:]", 2)}, 0);
setTimeout(function(){hookObjC("+[MMApiRegister registerApp:withDescription:andAppSupportContentFlag:]", 3)}, 0);
setTimeout(function(){hookObjC("+[MTAWX startWithAppkey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[MTAWX onBackground]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaseReq openID]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaseResp errCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[BaseResp errStr]", 0)}, 0);
setTimeout(function(){hookObjC("-[SendMessageToWXReq bText]", 0)}, 0);
setTimeout(function(){hookObjC("-[PayReq nonceStr]", 0)}, 0);
setTimeout(function(){hookObjC("-[PayReq partnerId]", 0)}, 0);
setTimeout(function(){hookObjC("-[PayReq prepayId]", 0)}, 0);
setTimeout(function(){hookObjC("-[PayResp returnKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[HBReq nonceStr]", 0)}, 0);
setTimeout(function(){hookObjC("-[GetMessageFromWXResp bText]", 0)}, 0);
setTimeout(function(){hookObjC("-[JumpToBizProfileReq extMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[JumpToBizProfileReq profileType]", 0)}, 0);
setTimeout(function(){hookObjC("-[JumpToBizWebviewReq webType]", 0)}, 0);
setTimeout(function(){hookObjC("-[JumpToBizWebviewReq extMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[CreateChatRoomReq groupId]", 0)}, 0);
setTimeout(function(){hookObjC("-[CreateChatRoomReq chatRoomName]", 0)}, 0);
setTimeout(function(){hookObjC("-[CreateChatRoomReq extMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[CreateChatRoomReq chatRoomNickName]", 0)}, 0);
setTimeout(function(){hookObjC("-[CreateChatRoomResp extMsg]", 0)}, 0);
setTimeout(function(){hookObjC("+[PGTextFieldManager defaultManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[PGTextFieldManager configurePassGuardLicense:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PGTextFieldManager passGuardLicense]", 0)}, 0);
setTimeout(function(){hookObjC("-[PGTextField defaultSetup]", 0)}, 0);
setTimeout(function(){hookObjC("-[PGTextField safeOutput]", 0)}, 0);
setTimeout(function(){hookObjC("-[PGTextField DoneFun:]", 1)}, 0);
setTimeout(function(){hookObjC("-[PGTextField cipherKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[PGTextField cipherKeyID]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITResultVO resultCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITResultVO signCert]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITResultVO encryptCert]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITResultVO signResult]", 0)}, 0);
setTimeout(function(){hookObjC("+[SercurityPlatFrom dealInitResult:andRes:appID:userID:]", 4)}, 0);
setTimeout(function(){hookObjC("+[SercurityPlatFrom synchPinWithUserID:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SercurityPlatFrom generateKeyPair:algorithm:pin:userID:]", 4)}, 0);
setTimeout(function(){hookObjC("+[SercurityPlatFrom applyCert:appID:pin:isBindSimCard:algorithm:phoneModels:manufacturer:iOSVersion:caflag:userID:traceLogId:]", 11)}, 0);
setTimeout(function(){hookObjC("+[SercurityPlatFrom importCertInfoWithAppid:algorithm:containerId:pin:signatureCert:encryptCert:p7:p7Algorithm:]", 8)}, 0);
setTimeout(function(){hookObjC("+[SercurityPlatFrom genPartPubkey:containerID:pin:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SercurityPlatFrom analysisCert:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SercurityPlatFrom destroyAllCerts:containerId:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SercurityPlatFrom delCertByCId:appId:containerId:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SercurityPlatFrom symEncrypt:symkey:input:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SercurityPlatFrom symDecrypt:symkey:input:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SercurityPlatFrom asyEncrypt:cert:input:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SercurityPlatFrom asyEncrypt:publicKey:input:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SercurityPlatFrom asyDecrypt:encryptData:pin:containerId:]", 4)}, 0);
setTimeout(function(){hookObjC("+[SercurityPlatFrom signature:input:pin:appID:containerId:]", 5)}, 0);
setTimeout(function(){hookObjC("+[SercurityPlatFrom verifySignature:cert:src:sign:]", 4)}, 0);
setTimeout(function(){hookObjC("+[SercurityPlatFrom modPin:newPin:containerID:]", 3)}, 0);
setTimeout(function(){hookObjC("+[SercurityPlatFrom checkPin:containerID:]", 2)}, 0);
setTimeout(function(){hookObjC("+[SercurityPlatFrom unLockPinWithContainerID:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SercurityPlatFrom checkPinErrorCount:ciperEquipmentID:deviceID:]", 3)}, 0);
setTimeout(function(){hookObjC("-[Head_schema ActionCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[Head_schema TransactionID]", 0)}, 0);
setTimeout(function(){hookObjC("-[Head_schema Version]", 0)}, 0);
setTimeout(function(){hookObjC("-[Head_schema MessageName]", 0)}, 0);
setTimeout(function(){hookObjC("-[Head_schema Result]", 0)}, 0);
setTimeout(function(){hookObjC("+[SafeTools safeWithParameters:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITApplyCer errorCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITApplyCer errorMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITApplyCer signCert]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITApplyCer EncryptCert]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITApplyCer EncryptedPrivateKey]", 0)}, 0);
setTimeout(function(){hookObjC("+[LXF_OpenUDID _setDict:forPasteboard:]", 2)}, 0);
setTimeout(function(){hookObjC("+[LXF_OpenUDID _getDictFromPasteboard:]", 1)}, 0);
setTimeout(function(){hookObjC("+[LXF_OpenUDID _generateFreshOpenUDID]", 0)}, 0);
setTimeout(function(){hookObjC("+[LXF_OpenUDID valueWithError:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CCITMJPropertyType cachedTypeWithCode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITMJPropertyType typeClass]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCITMJDictionaryCache objectForKey:forDictId:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CCITMJDictionaryCache dictWithDictId:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CCITAFURLConnectionOperation networkRequestThreadEntryPoint:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CCITAFURLConnectionOperation networkRequestThread]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation responseString]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation responseStringEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation inputStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation outputStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation operationDidPause]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation operationDidStart]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation cancelConnection]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCITAFURLConnectionOperation batchOfRequestOperations:progressBlock:completionBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation connection:willSendRequestForAuthenticationChallenge:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation connectionShouldUseCredentialStorage:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation connection:willSendRequest:redirectResponse:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation connection:didReceiveResponse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation connection:didReceiveData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation connectionDidFinishLoading:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation connection:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation connection:willCacheResponse:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CCITAFURLConnectionOperation supportsSecureCoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation runLoopModes]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation responseData]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation shouldUseCredentialStorage]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation securityPolicy]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation completionQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation completionGroup]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation userInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation totalBytesRead]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation backgroundTaskIdentifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation uploadProgress]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation downloadProgress]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation authenticationChallenge]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation cacheResponse]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLConnectionOperation redirectResponse]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCITAFSecurityPolicy defaultPinnedCertificates]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCITAFSecurityPolicy defaultPolicy]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCITAFSecurityPolicy policyWithPinningMode:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFSecurityPolicy evaluateServerTrust:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFSecurityPolicy evaluateServerTrust:forDomain:]", 2)}, 0);
setTimeout(function(){hookObjC("+[CCITAFSecurityPolicy keyPathsForValuesAffectingPinnedPublicKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFSecurityPolicy SSLPinningMode]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFSecurityPolicy validatesCertificateChain]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFSecurityPolicy pinnedCertificates]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFSecurityPolicy allowInvalidCertificates]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFSecurityPolicy validatesDomainName]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFSecurityPolicy pinnedPublicKeys]", 0)}, 0);
setTimeout(function(){hookObjC("+[PhoneModels deviceVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITUserInfo userName]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITUserInfo mobilePhone]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITUserInfo cardType]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITUserInfo cardNum]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITUserInfo postalCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITUserInfo unitName]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITUserInfo userOrg]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPResponseSerializer validateResponse:data:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPResponseSerializer responseObjectForResponse:data:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[CCITAFHTTPResponseSerializer supportsSecureCoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPResponseSerializer encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPResponseSerializer stringEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPResponseSerializer acceptableStatusCodes]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPResponseSerializer acceptableContentTypes]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCITAFJSONResponseSerializer serializerWithReadingOptions:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFJSONResponseSerializer responseObjectForResponse:data:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CCITAFJSONResponseSerializer encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFJSONResponseSerializer readingOptions]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFJSONResponseSerializer removesKeysWithNullValues]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFPropertyListResponseSerializer responseObjectForResponse:data:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CCITAFPropertyListResponseSerializer encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFPropertyListResponseSerializer readOptions]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFImageResponseSerializer responseObjectForResponse:data:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CCITAFImageResponseSerializer encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFImageResponseSerializer imageScale]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFImageResponseSerializer automaticallyInflatesResponseImage]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCITAFCompoundResponseSerializer compoundSerializerWithResponseSerializers:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFCompoundResponseSerializer responseObjectForResponse:data:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CCITAFCompoundResponseSerializer encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFCompoundResponseSerializer responseSerializers]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCITMJFoundation foundationClasses]", 0)}, 0);
setTimeout(function(){hookObjC("-[Resultvo resultCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[Resultvo cipherDeviceId]", 0)}, 0);
setTimeout(function(){hookObjC("-[Resultvo DevID]", 0)}, 0);
setTimeout(function(){hookObjC("-[Resultvo containerId]", 0)}, 0);
setTimeout(function(){hookObjC("-[Resultvo EncryptCert]", 0)}, 0);
setTimeout(function(){hookObjC("-[Resultvo SignatureCert]", 0)}, 0);
setTimeout(function(){hookObjC("-[Resultvo publicKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[Resultvo containerIdList]", 0)}, 0);
setTimeout(function(){hookObjC("+[HDHttpTool allocWithZone:]", 1)}, 0);
setTimeout(function(){hookObjC("+[HDHttpTool sharedHDHttpTool]", 0)}, 0);
setTimeout(function(){hookObjC("-[HDHttpTool POST:messageName:parameters:success:failure:]", 5)}, 0);
setTimeout(function(){hookObjC("-[HDHttpTool syncPOST:messageName:parameters:success:failure:]", 5)}, 0);
setTimeout(function(){hookObjC("-[HDHttpTool decipheringWithResponseObject:encryptkey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[HDHttpTool encryptionWithParameters:messageName:encryptkey:]", 3)}, 0);
setTimeout(function(){hookObjC("-[HDHttpTool traceLogId]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestOperation responseObject]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCITAFHTTPRequestOperation supportsSecureCoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestOperation encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestOperation responseSerializer]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestOperation responseSerializationError]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFQueryStringPair URLEncodedStringValueWithEncoding:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestSerializer HTTPRequestHeaders]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestSerializer clearAuthorizationHeader]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestSerializer requestWithMethod:URLString:parameters:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestSerializer requestWithMethod:URLString:parameters:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestSerializer multipartFormRequestWithMethod:URLString:parameters:constructingBodyWithBlock:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestSerializer multipartFormRequestWithMethod:URLString:parameters:constructingBodyWithBlock:error:]", 5)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestSerializer requestWithMultipartFormRequest:writingStreamContentsToFile:completionHandler:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestSerializer requestBySerializingRequest:withParameters:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[CCITAFHTTPRequestSerializer supportsSecureCoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestSerializer encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestSerializer stringEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestSerializer allowsCellularAccess]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestSerializer cachePolicy]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestSerializer HTTPShouldHandleCookies]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestSerializer HTTPShouldUsePipelining]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestSerializer networkServiceType]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestSerializer timeoutInterval]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestSerializer HTTPMethodsEncodingParametersInURI]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestSerializer mutableHTTPRequestHeaders]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestSerializer queryStringSerializationStyle]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestSerializer queryStringSerialization]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFStreamingMultipartFormData appendPartWithFileURL:name:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CCITAFStreamingMultipartFormData appendPartWithFileURL:name:fileName:mimeType:error:]", 5)}, 0);
setTimeout(function(){hookObjC("-[CCITAFStreamingMultipartFormData appendPartWithFileData:name:fileName:mimeType:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CCITAFStreamingMultipartFormData appendPartWithFormData:name:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CCITAFStreamingMultipartFormData appendPartWithHeaders:body:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CCITAFStreamingMultipartFormData requestByFinalizingMultipartFormData]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFStreamingMultipartFormData stringEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFStreamingMultipartFormData bodyStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFMultipartBodyStream appendHTTPBodyPart:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFMultipartBodyStream hasBytesAvailable]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFMultipartBodyStream propertyForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFMultipartBodyStream scheduleInRunLoop:forMode:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CCITAFMultipartBodyStream removeFromRunLoop:forMode:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CCITAFMultipartBodyStream contentLength]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFMultipartBodyStream _scheduleInCFRunLoop:forMode:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CCITAFMultipartBodyStream _unscheduleFromCFRunLoop:forMode:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CCITAFMultipartBodyStream _setCFClientFlags:callback:context:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CCITAFMultipartBodyStream numberOfBytesInPacket]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFMultipartBodyStream inputStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFMultipartBodyStream stringEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFMultipartBodyStream HTTPBodyParts]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFMultipartBodyStream HTTPBodyPartEnumerator]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFMultipartBodyStream currentHTTPBodyPart]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFMultipartBodyStream outputStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPBodyPart inputStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPBodyPart stringForHeaders]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPBodyPart contentLength]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPBodyPart hasBytesAvailable]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPBodyPart transitionToNextPhase]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPBodyPart stringEncoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPBodyPart bodyContentLength]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPBodyPart hasInitialBoundary]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPBodyPart hasFinalBoundary]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCITAFJSONRequestSerializer serializerWithWritingOptions:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFJSONRequestSerializer requestBySerializingRequest:withParameters:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CCITAFJSONRequestSerializer encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFJSONRequestSerializer writingOptions]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFPropertyListRequestSerializer requestBySerializingRequest:withParameters:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CCITAFPropertyListRequestSerializer encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFPropertyListRequestSerializer writeOptions]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager removeAllDelegates]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager tasksForKeyPath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager dataTasks]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager uploadTasks]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager downloadTasks]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager invalidateSessionCancelingTasks:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager dataTaskWithRequest:completionHandler:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager uploadTaskWithRequest:fromFile:progress:completionHandler:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager uploadTaskWithRequest:fromData:progress:completionHandler:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager uploadTaskWithStreamedRequest:progress:completionHandler:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager downloadTaskWithRequest:progress:destination:completionHandler:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager downloadTaskWithResumeData:progress:destination:completionHandler:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager uploadProgressForTask:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager downloadProgressForTask:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager respondsToSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager observeValueForKeyPath:ofObject:change:context:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager URLSession:didBecomeInvalidWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager URLSession:didReceiveChallenge:completionHandler:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:]", 5)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager URLSession:task:didReceiveChallenge:completionHandler:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager URLSession:task:needNewBodyStream:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:]", 5)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager URLSession:task:didCompleteWithError:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager URLSession:dataTask:didReceiveResponse:completionHandler:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager URLSession:dataTask:didBecomeDownloadTask:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager URLSession:dataTask:didReceiveData:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager URLSession:dataTask:willCacheResponse:completionHandler:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager URLSessionDidFinishEventsForBackgroundURLSession:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager URLSession:downloadTask:didFinishDownloadingToURL:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:]", 5)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:]", 4)}, 0);
setTimeout(function(){hookObjC("+[CCITAFURLSessionManager supportsSecureCoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager operationQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager responseSerializer]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager securityPolicy]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager reachabilityManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager completionQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager completionGroup]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager sessionConfiguration]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager mutableTaskDelegatesKeyedByTaskIdentifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager sessionDidBecomeInvalid]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager sessionDidReceiveAuthenticationChallenge]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager taskWillPerformHTTPRedirection]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager taskDidReceiveAuthenticationChallenge]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager taskNeedNewBodyStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager taskDidSendBodyData]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager taskDidComplete]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager dataTaskDidReceiveResponse]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager dataTaskDidBecomeDownloadTask]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager dataTaskDidReceiveData]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager dataTaskWillCacheResponse]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager didFinishEventsForBackgroundURLSession]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager downloadTaskDidFinishDownloading]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager downloadTaskDidWriteData]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFURLSessionManager downloadTaskDidResume]", 0)}, 0);
setTimeout(function(){hookObjC("+[CoreCompinetResultCheck ResultCheck:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITMJProperty propertyKeysDict]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITMJProperty objectClassInArrayDict]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCITMJProperty cachedPropertyWithProperty:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITMJProperty valueForObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITMJProperty propertyKeysWithStringKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITMJProperty propertyKeysForClass:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITMJProperty objectClassInArrayForClass:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITMJProperty srcClass]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCITSafeService applyCertWithUserInfo:userID:pin:traceLogId:]", 4)}, 0);
setTimeout(function(){hookObjC("+[CCITSafeService signatureWithUserID:pin:src:]", 3)}, 0);
setTimeout(function(){hookObjC("+[CCITAFNetworkReachabilityManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCITAFNetworkReachabilityManager managerForDomain:]", 1)}, 0);
setTimeout(function(){hookObjC("+[CCITAFNetworkReachabilityManager managerForAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFNetworkReachabilityManager startMonitoring]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFNetworkReachabilityManager stopMonitoring]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFNetworkReachabilityManager localizedNetworkReachabilityStatusString]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCITAFNetworkReachabilityManager keyPathsForValuesAffectingValueForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFNetworkReachabilityManager networkReachabilityStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFNetworkReachabilityManager networkReachability]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFNetworkReachabilityManager networkReachabilityAssociation]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFNetworkReachabilityManager networkReachabilityStatusBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITMJPropertyKey valueInObject:]", 1)}, 0);
setTimeout(function(){hookObjC("-[HDPicModle picName]", 0)}, 0);
setTimeout(function(){hookObjC("-[HDPicModle picData]", 0)}, 0);
setTimeout(function(){hookObjC("+[CCITCode mj_replacedKeyFromPropertyName]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITCode errorCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITCode errorMsg]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITCode containIdStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITCode cipherEquipmentID]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITCode certStatus]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITCode oldPin]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITCode transactionID]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITCode messageName]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITCode signS2]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITCode signS3]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITCode signR]", 0)}, 0);
setTimeout(function(){hookObjC("-[CertInfo CertSN]", 0)}, 0);
setTimeout(function(){hookObjC("-[CertInfo NotAfter]", 0)}, 0);
setTimeout(function(){hookObjC("-[CertInfo NotBofore]", 0)}, 0);
setTimeout(function(){hookObjC("-[CertInfo SignatureAlg]", 0)}, 0);
setTimeout(function(){hookObjC("-[CertInfo SubjectDN]", 0)}, 0);
setTimeout(function(){hookObjC("-[CertInfo IssuerDN]", 0)}, 0);
setTimeout(function(){hookObjC("-[CertInfo PubKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[CertInfo Version]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestOperationManager HTTPRequestOperationWithRequest:success:failure:]", 3)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestOperationManager GET:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestOperationManager HEAD:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestOperationManager POST:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestOperationManager POST:parameters:constructingBodyWithBlock:success:failure:]", 5)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestOperationManager PUT:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestOperationManager PATCH:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestOperationManager DELETE:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("+[CCITAFHTTPRequestOperationManager supportsSecureCoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestOperationManager encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestOperationManager baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestOperationManager requestSerializer]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestOperationManager responseSerializer]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestOperationManager operationQueue]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestOperationManager shouldUseCredentialStorage]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestOperationManager securityPolicy]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPRequestOperationManager reachabilityManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPSessionManager GET:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPSessionManager HEAD:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPSessionManager POST:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPSessionManager POST:parameters:constructingBodyWithBlock:success:failure:]", 5)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPSessionManager PUT:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPSessionManager PATCH:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPSessionManager DELETE:parameters:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("+[CCITAFHTTPSessionManager supportsSecureCoding]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPSessionManager encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPSessionManager baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[CCITAFHTTPSessionManager requestSerializer]", 0)}, 0);
setTimeout(function(){hookObjC("-[nbsCache cachedResponseForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[nbsCache storeCachedResponse:forRequest:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NBSAssociatedObject busy_count]", 0)}, 0);
setTimeout(function(){hookObjC("-[NBSLensAllMethodsDlgt_urlSess URLSession:didBecomeInvalidWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NBSLensAllMethodsDlgt_urlSess URLSession:didReceiveChallenge:completionHandler:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NBSLensAllMethodsDlgt_urlSess URLSessionDidFinishEventsForBackgroundURLSession:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NBSLensAllMethodsDlgt_urlSess URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:]", 5)}, 0);
setTimeout(function(){hookObjC("-[NBSLensAllMethodsDlgt_urlSess URLSession:task:didReceiveChallenge:completionHandler:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NBSLensAllMethodsDlgt_urlSess URLSession:task:needNewBodyStream:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NBSLensAllMethodsDlgt_urlSess URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:]", 5)}, 0);
setTimeout(function(){hookObjC("-[NBSLensAllMethodsDlgt_urlSess URLSession:task:didCompleteWithError:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NBSLensAllMethodsDlgt_urlSess URLSession:dataTask:didReceiveResponse:completionHandler:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NBSLensAllMethodsDlgt_urlSess URLSession:dataTask:didBecomeDownloadTask:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NBSLensAllMethodsDlgt_urlSess URLSession:dataTask:didReceiveData:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NBSLensAllMethodsDlgt_urlSess URLSession:dataTask:willCacheResponse:completionHandler:]", 4)}, 0);
setTimeout(function(){hookObjC("-[NBSLensAllMethodsDlgt_urlSess URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:]", 5)}, 0);
setTimeout(function(){hookObjC("-[NBSLensAllMethodsDlgt_urlSess URLSession:downloadTask:didFinishDownloadingToURL:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NBSLensAllMethodsDlgt_urlSess URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:]", 4)}, 0);
setTimeout(function(){hookObjC("+[NBSForwardMessage install:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NBSForwardMessage nbs_methodSignatureForSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NBSForwardMessage nbs_forwardInvocation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NBSForwardMessage methodSignatureForSelector:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NBSForwardMessage forwardInvocation:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NBSURLProtocol canInitWithRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NBSURLProtocol canonicalRequestForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NBSURLProtocol requestIsCacheEquivalent:toRequest:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NBSURLProtocol dumpAllCaches]", 0)}, 0);
setTimeout(function(){hookObjC("-[NBSURLProtocol startLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[NBSURLProtocol stopLoading]", 0)}, 0);
setTimeout(function(){hookObjC("-[NBSURLProtocol connection:willSendRequest:redirectResponse:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NBSURLProtocol connection:didReceiveData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NBSURLProtocol connection:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NBSURLProtocol connection:didReceiveResponse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NBSURLProtocol connectionDidFinishLoading:]", 1)}, 0);
setTimeout(function(){hookObjC("-[NBSURLProtocol connection:willSendRequestForAuthenticationChallenge:]", 2)}, 0);
setTimeout(function(){hookObjC("-[NBSURLProtocol connection:willCacheResponse:]", 2)}, 0);
setTimeout(function(){hookObjC("+[NBSMultPartsFormDataReader readerWithData:range:HTTPRequestHeaders:]", 3)}, 0);
setTimeout(function(){hookObjC("+[NBSMultPartsFormDataReader decodeBytesFromBody:]", 1)}, 0);
setTimeout(function(){hookObjC("+[NBSMultPartsFormDataReader readerWithData:range:boundry:]", 3)}, 0);
setTimeout(function(){hookObjC("-[NBSMultPartsFormDataReader valuesForFields:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPSecurityConnect filePath]", 0)}, 0);
setTimeout(function(){hookObjC("+[BPSecurityConnect crypto:nonce:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BPSecurityConnect deNonceData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPSecurityConnect crypto:random:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BPSecurityConnect sign:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPSecurityConnect lowercaseMD5:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPSecurityConnect decryptString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPSecurityConnect bp_AES128DecryptData:key:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BPSecurityConnect cryptoBarcode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPSecurityConnect md5_16Lowercase:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPSecurityConnect generateString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[BPSecurityConnect bp_AES128EncryptData:key:]", 2)}, 0);
setTimeout(function(){hookObjC("+[BPSecurityConnect bp_base64EncodedDataFromString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountResultOrParamProcess encrptUserToken:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountResultOrParamProcess descrptUserToken:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountResultOrParamProcess makeAuthParam:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountResultOrParamProcess makeCallBackInfo:key:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountAESCrypt encrypt:password:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountAESCrypt hex:useLower:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountAESCrypt AES128EncryptWithKey:gIv:messageData:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccountAESCrypt decrypt:password:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountAESCrypt AES128DecryptWithKey:gIv:decrypData:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccountUtil saveOpenId:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountUtil paramDic:params:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountUtil addParam:paramName:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountUtil stringToNumber:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountUtil hmacSha1WithKey:text:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountUtil createErrorWithCode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountUtil createErrorWithDic:code:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountUtil URLEncode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountUtil URLDecode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountUtil addingPercentEncoding:withChartSet:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountUtil removingPercentEncoding:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountUtil networkReachable]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountUtil reachableViaWWAN]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountUtil deviceType]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountUtil makeUserCookies:key:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountUtil storeCookies:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountUtil clearCookies]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountUtil newGetOperatorType]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountUtil exchangeTSMethodIMP:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountSecurityUtil deleteUUID]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountSecurityUtil randomUUIDString]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountSecurityUtil wapLoginResult:withAppSecret:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountSecurityUtil generateEncryptKeyWithAppId]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountSecurityUtil XXTEAEncryptStr:key:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountSecurityUtil save:andUuid:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountSecurityUtil loadToDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountGlobalDataManager sharedAppKey]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountGlobalDataManager allocWithZone:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGlobalDataManager socketRequest1]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGlobalDataManager socketRequest2]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGlobalDataManager socketRequest3]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGlobalDataManager accessCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGlobalDataManager randomUUID]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGlobalDataManager appKey]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGlobalDataManager appSecret]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGlobalDataManager appName]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGlobalDataManager cityName]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGlobalDataManager checkinLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGlobalDataManager serverVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGlobalDataManager sdkVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGlobalDataManager userAgent]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGlobalDataManager gatewayDic]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountModuleLogin login:loginway:accounttype:list:mail:hidetop:baseApp:basiclogintxt:controller:needComfirmCode:success:failure:]", 12)}, 0);
setTimeout(function(){hookObjC("+[EAccountModuleLogin newGatewayAuth:success:failure:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccountModuleLogin preGetMobileAccessCode:success:failure:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccountModuleLogin preGetMobileRedirect:success:failure:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccountModuleLogin gatewayAuth:success:failure:cutDesenPhone:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountModuleLogin eSurfingDynamicPasswordLogin:dynamicPassword:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountModuleLogin eSurfingPasswordLogin:password:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountModuleLogin processExceptionUpload]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountModuleLogin uploadErrorInfoLog:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountModuleLogin bindUserDevice:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestParamProcess requestNetData:Param:paramEncrypto:httpMethod:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestParamProcess requestNetDataWithPostButNoBody:Param:paramEncrypto:httpMethod:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestParamProcess requestNetDataWithPostButNoBodyAuth2:Param:paramEncrypto:httpMethod:accessToken:]", 5)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestParamProcess gatewayRequestNetData:Param:paramEncrypto:httpMethod:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestParamProcess handleRequestParamsAuth2:withAppKey:withSecret:accessToken:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestParamProcess handleRequestParams:withAppKey:withSecret:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestParamProcess gatewayHandleRequestParams:withAppKey:withSecret:paramEncrypto:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestParamProcess arraySort:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestParamProcess serializeURL:params:httpMethod:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestParamProcess appendTextData:toBody:withPrefix:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestParamProcess appendPicData:toBody:withPrefix:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestParamProcess appendUTF8Body:dataString:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountUploadLoginLog login:loginway:accounttype:list:mail:hidetop:baseApp:basiclogintxt:controller:needComfirmCode:success:failure:]", 12)}, 0);
setTimeout(function(){hookObjC("+[EAccountUploadLoginLog preGetMobileAccessCode:success:failure:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccountUploadLoginLog gatewayAuth:success:failure:cutDesenPhone:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountUploadLoginLog eSurfingDynamicPasswordLogin:dynamicPassword:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountUploadLoginLog eSurfingPasswordLogin:password:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("-[EAGCDAsyncSocketPreBuffer ensureCapacityForWrite:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAGCDAsyncSocketPreBuffer availableBytes]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAGCDAsyncSocketPreBuffer readBuffer]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAGCDAsyncSocketPreBuffer didRead:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAGCDAsyncSocketPreBuffer availableSpace]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAGCDAsyncSocketPreBuffer writeBuffer]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAGCDAsyncSocketPreBuffer didWrite:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAGCDAsyncReadPacket ensureCapacityForAdditionalDataOfLength:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAGCDAsyncReadPacket optimalReadLengthWithDefault:shouldPreBuffer:]", 2)}, 0);
setTimeout(function(){hookObjC("-[EAGCDAsyncReadPacket readLengthForNonTermWithHint:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAGCDAsyncReadPacket readLengthForTermWithHint:shouldPreBuffer:]", 2)}, 0);
setTimeout(function(){hookObjC("-[EAGCDAsyncReadPacket readLengthForTermWithPreBuffer:found:]", 2)}, 0);
setTimeout(function(){hookObjC("-[EAGCDAsyncReadPacket searchForTermAfterPreBuffering:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket alternateAddressDelay]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket userData]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket acceptOnPort:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket acceptOnInterface:port:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket acceptOnUrl:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket doAccept:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket preConnectWithInterface:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket preConnectWithUrl:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectToHost:onPort:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectToHost:onPort:withTimeout:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectToHost:onPort:viaInterface:withTimeout:error:]", 5)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectToAddress:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectToAddress:withTimeout:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectToAddress:viaInterface:withTimeout:error:]", 4)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectToUrl:withTimeout:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket lookup:didSucceedWithAddress4:address6:]", 3)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket lookup:didFail:]", 2)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket bindSocket:toInterface:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket createSocket:connectInterface:errPtr:]", 3)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectSocket:address:stateIndex:]", 3)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket closeSocket:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket closeUnusedSocket:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectWithAddress4:address6:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectWithAddressUN:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket didConnect:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket didNotConnect:error:]", 2)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket startConnectTimeout:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket endConnectTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket doConnectTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket closeWithError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket disconnectAfterReading]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket disconnectAfterWriting]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket disconnectAfterReadingAndWriting]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket maybeClose]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket badConfigError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket badParamError:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountGCDAsyncSocket gaiError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket errnoErrorWithReason:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket errnoError]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket sslError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectTimeoutError]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket readMaxedOutError]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket readTimeoutError]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket writeTimeoutError]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectionClosedError]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket otherError:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectedHost]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectedPort]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectedUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket localHost]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket localPort]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectedHost4]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectedHost6]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectedPort4]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectedPort6]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket localHost4]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket localHost6]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket localPort4]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket localPort6]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectedHostFromSocket4:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectedHostFromSocket6:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectedPortFromSocket4:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectedPortFromSocket6:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectedUrlFromSocketUN:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket localHostFromSocket4:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket localHostFromSocket6:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket localPortFromSocket4:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket localPortFromSocket6:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket connectedAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket localAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket usingCFStreamForTLS]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket usingSecureTransportForTLS]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket suspendReadSource]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket resumeReadSource]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket suspendWriteSource]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket resumeWriteSource]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket readDataWithTimeout:tag:]", 2)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket readDataWithTimeout:buffer:bufferOffset:tag:]", 4)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket readDataToLength:withTimeout:tag:]", 3)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket readDataToLength:withTimeout:buffer:bufferOffset:tag:]", 5)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket readDataToData:withTimeout:tag:]", 3)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket readDataToData:withTimeout:buffer:bufferOffset:tag:]", 5)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket maybeDequeueRead]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket flushSSLBuffers]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket doReadData]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket doReadEOF]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket completeCurrentRead]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket endCurrentRead]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket doReadTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket doReadTimeoutWithExtension:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket writeData:withTimeout:tag:]", 3)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket maybeDequeueWrite]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket doWriteData]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket completeCurrentWrite]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket endCurrentWrite]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket doWriteTimeout]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket doWriteTimeoutWithExtension:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket startTLS:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket maybeStartTLS]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket sslReadWithBuffer:length:]", 2)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket sslWriteWithBuffer:length:]", 2)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket ssl_startTLS]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket ssl_continueSSLHandshake]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket ssl_shouldTrustPeer:stateIndex:]", 2)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket cf_finishSSLHandshake]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket cf_abortSSLHandshake:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket cf_startTLS]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountGCDAsyncSocket ignore:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountGCDAsyncSocket startCFStreamThreadIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountGCDAsyncSocket stopCFStreamThreadIfNeeded]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountGCDAsyncSocket cfstreamThread]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountGCDAsyncSocket scheduleCFStreams:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountGCDAsyncSocket unscheduleCFStreams:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket createReadAndWriteStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket registerForStreamCallbacksIncludingReadWrite:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket addStreamsToRunLoop]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket removeStreamsFromRunLoop]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket openStreams]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket autoDisconnectOnClosedReadStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket markSocketQueueTargetQueue:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket unmarkSocketQueueTargetQueue:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket performBlock:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket socketFD]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket socket4FD]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket socket6FD]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket readStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket writeStream]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket enableBackgroundingOnSocketWithCaveat:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket enableBackgroundingOnSocket]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket enableBackgroundingOnSocketWithCaveat]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountGCDAsyncSocket sslContext]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountGCDAsyncSocket lookupHost:port:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccountGCDAsyncSocket hostFromSockaddr4:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountGCDAsyncSocket hostFromSockaddr6:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountGCDAsyncSocket portFromSockaddr4:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountGCDAsyncSocket portFromSockaddr6:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountGCDAsyncSocket urlFromSockaddrUN:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountGCDAsyncSocket hostFromAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountGCDAsyncSocket portFromAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountGCDAsyncSocket CRLFData]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountGCDAsyncSocket CRData]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountGCDAsyncSocket LFData]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountGCDAsyncSocket ZeroData]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountMD5Manager md5Encode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountMD5Manager md5String:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountMD5Manager newGetFileMD5AtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountKeyChainStoreManager saveUUID:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountKeyChainStoreManager loadUUID]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountKeyChainStoreManager deleteUUID]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountKeyChainStoreManager uuidFormater:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountMD5Check baseHtmlFileMd5Check]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountMD5Check newHtmlFileMd5Check:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountMD5Check md5Save:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountMD5Check containsStringMethod:bString:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountMD5Check md5Delete:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountReachability reachabilityWithHostName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountReachability reachabilityWithAddress:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountReachability reachabilityForInternetConnection]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountReachability startNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountReachability stopNotifier]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountReachability localWiFiStatusForFlags:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountReachability networkStatusForFlags:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountReachability connectionRequired]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountReachability currentReachabilityStatus]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountReachability currentWWANtype]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountReachability WWANType]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountReachability accessTypeForString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccount gatewayAuth:success:failure:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccount eSurfingDynamicPasswordLogin:dynamicPassword:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccount eSurfingPasswordLogin:password:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccount loadUuid:withToken:controller:success:failure:]", 5)}, 0);
setTimeout(function(){hookObjC("+[EAccount removeDeviceInfo:token:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccount removeDevicesInfo:success:failure:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccount requestWithBaseURL:params:httpMethod:success:failure:]", 5)}, 0);
setTimeout(function(){hookObjC("+[EAccount openMyPage:controller:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccount weChatTokenVerify:withOpenId:withAppId:completion:fail:]", 5)}, 0);
setTimeout(function(){hookObjC("+[EAccount weChatCodeVerify:withAppId:completion:fail:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccount weChatBindAcc:withOpenId:withAppId:withMobile:withDynamicCheck:completion:fail:]", 7)}, 0);
setTimeout(function(){hookObjC("+[EAccount qqTokenVerify:completion:fail:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccount qqBindAcc:withMobile:withDynamicCheck:completion:fail:]", 5)}, 0);
setTimeout(function(){hookObjC("+[EAccount weiboTokenVerify:completion:fail:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccount weiboBindAcc:withMobile:withDynamicCheck:completion:fail:]", 5)}, 0);
setTimeout(function(){hookObjC("+[EAccountFileManager removeCurrentVersion]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountFileManager deleteCurrentVersionCode]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountFileManager saveCurrentVersionStr:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountFileManager removeOldVersionDirectory]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountFileManager deleteOldVersionCode]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountFileManager saveOldVersionStr:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountFileManager errorFilePath]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountFileManager errorFileExist]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountFileManager deleteErrorFile]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountFileManager appendContentsToErrorFile:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountFileManager readContentsFromErrorFile]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountFileManager fileExist:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountFileManager writeTofile:path:content:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccountFileManager moveFile:pathFrom:fileTo:pathTo:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountFileManager contentsOfDirectory:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountFileManager deleteFile:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountFileManager createDirectoryAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountJsBridge excuteJSWithObjWK:function:data:]", 3)}, 0);
setTimeout(function(){hookObjC("-[EAccountJsBridge excuteJSWithObj:function:data:]", 3)}, 0);
setTimeout(function(){hookObjC("-[EAccountJsBridge runJsFunction:withArgument:]", 2)}, 0);
setTimeout(function(){hookObjC("-[EAccountJsBridge defaultJsFunction:withArgument:]", 2)}, 0);
setTimeout(function(){hookObjC("-[EAccountJsBridge resourceBundle]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountJsBridge interfaceName]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountJsBridge customScheme]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountJsBridge methodNameLists]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountJsBridge bind:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountJsBridge bind:withMethodList:]", 2)}, 0);
setTimeout(function(){hookObjC("-[EAccountWebNativeObject redirectJs:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountWebNativeObject gatewayLogin]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountWebNativeObject autoLoginSuccess]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountWebNativeObject loginSuccess:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountWebNativeObject basicLoginCallBack]", 0)}, 0);
setTimeout(function(){hookObjC("-[EAccountWebNativeObject loginWay:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EAccountWebNativeObject verifyMobile:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountCookiesOption makeUserCookies:key:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountCookiesOption storeCookies:sdkVersionStr:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountCookiesOption clearCookies]", 0)}, 0);
setTimeout(function(){hookObjC("-[EASocketRequest startSocket]", 0)}, 0);
setTimeout(function(){hookObjC("-[EASocketRequest socket:didConnectToHost:port:]", 3)}, 0);
setTimeout(function(){hookObjC("-[EASocketRequest socket:didReceiveTrust:completionHandler:]", 3)}, 0);
setTimeout(function(){hookObjC("-[EASocketRequest socketDidSecure:]", 1)}, 0);
setTimeout(function(){hookObjC("-[EASocketRequest containsStringMethod:bString:]", 2)}, 0);
setTimeout(function(){hookObjC("-[EASocketRequest socketDidDisconnect:withError:]", 2)}, 0);
setTimeout(function(){hookObjC("-[EASocketRequest paramStr]", 0)}, 0);
setTimeout(function(){hookObjC("-[EASocketRequest SECURE_CONNECTION]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountModuleUpgradeHTMLSource executeUpdate]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountModuleUpgradeHTMLSource updateHtmlCssFile:success:failure:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccountModuleUpgradeHTMLSource processDownloadZipFile:documentsPath:newMd5:newVersionCode:logoUrlStr:]", 5)}, 0);
setTimeout(function(){hookObjC("+[EAccountModuleUpgradeHTMLSource addOptionException:optionName:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountModuleUpgradeHTMLSource releaseZipFilesWithUnzipFileAtPath:Destination:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountModuleUpgradeHTMLSource deleteOldVersion]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountModuleGetJsonDate requestWithBaseURL:params:httpMethod:success:failure:]", 5)}, 0);
setTimeout(function(){hookObjC("+[EAccountNewRequest startRequest:tag:responsBlack:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccountNewRequest requestNetDataWithWWAN:Param:https:httpMethod:responsBlack:]", 5)}, 0);
setTimeout(function(){hookObjC("+[EAccountModuleQRLogin loadUrlStr:withToken:controller:success:failure:]", 5)}, 0);
setTimeout(function(){hookObjC("+[EAccountModuleSecondVerify removeDeviceInfo:token:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountModuleSecondVerify removeDevicesInfo:success:failure:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccountWebViewRequestManager loadUrlStr:withToken:controller:responseBlock:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountWebViewRequestManager requestWithBaseURL:params:httpMethod:bParamsEncrypto:tag:responsBlack:]", 6)}, 0);
setTimeout(function(){hookObjC("+[EAccountSSZipArchive eaccountisFilePasswordProtectedAtPath:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountSSZipArchive eaccountunzipFileAtPath:toDestination:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountSSZipArchive eaccountunzipFileAtPath:toDestination:overwrite:password:error:]", 5)}, 0);
setTimeout(function(){hookObjC("+[EAccountSSZipArchive eaccountunzipFileAtPath:toDestination:delegate:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccountSSZipArchive eaccountunzipFileAtPath:toDestination:overwrite:password:error:delegate:]", 6)}, 0);
setTimeout(function(){hookObjC("+[EAccountSSZipArchive eaccountunzipFileAtPath:toDestination:overwrite:password:progressHandler:completionHandler:]", 6)}, 0);
setTimeout(function(){hookObjC("+[EAccountSSZipArchive eaccountunzipFileAtPath:toDestination:progressHandler:completionHandler:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountSSZipArchive eaccountunzipFileAtPath:toDestination:preserveAttributes:overwrite:password:error:delegate:]", 7)}, 0);
setTimeout(function(){hookObjC("+[EAccountSSZipArchive eaccountunzipFileAtPath:toDestination:preserveAttributes:overwrite:password:error:delegate:progressHandler:completionHandler:]", 9)}, 0);
setTimeout(function(){hookObjC("+[EAccountSSZipArchive _eaccounttemporaryPathForDiscardableFile]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountModuleMyPage openMyPage:controller:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountModuleMyPage openPage:controller:myPageType:success:failure:]", 5)}, 0);
setTimeout(function(){hookObjC("+[EAccountCYJKeychain save:data:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountCYJKeychain load:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountCYJKeychain deleteWithKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountLoginResultFilter login:loginway:accounttype:list:mail:hidetop:baseApp:basiclogintxt:controller:needComfirmCode:success:failure:]", 12)}, 0);
setTimeout(function(){hookObjC("+[EAccountLoginResultFilter preGetMobileAccessCode:success:failure:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccountLoginResultFilter gatewayAuth:success:failure:cutDesenPhone:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountLoginResultFilter eSurfingDynamicPasswordLogin:dynamicPassword:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountLoginResultFilter eSurfingPasswordLogin:password:success:failure:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountLoginResultFilter makeCallBackInfo:key:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestManager preGetMobileAccessCode:block:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestManager preGetMobileRedirect:block:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestManager gatewayAuth:needComfirmCode:block:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestManager requestWithWWAN:params:httpMethod:bParamsEncrypto:tag:responsBlack:]", 6)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestManager bindUserDevice:responsBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestManager authorizeLogin:loginway:thirdLogin:accounttype:list:mail:hidetop:baseApp:basiclogintxt:controller:responseBlock:]", 11)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestManager eSurfingDynamicPasswordLogin:dynamicPassword:responseBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestManager eSurfingPasswordLogin:password:responseBlock:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestManager sendAccountOpenMyPage:controller:myPageType:responsBlack:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestManager requestMyPageCookie:responsBlack:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestManager requestWithBaseURL:params:httpMethod:bParamsEncrypto:tag:responsBlack:]", 6)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestManager updateHtmlCssFilek:responsBlock:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestManager uploadResponseLogWithOptionAction:withResponseDesc:withResponseCode:responsBlack:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestManager addOptionException:optionName:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestManager weChatTokenVerify:withOpenId:withAppId:responsBlack:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestManager weChatCodeVerify:withAppId:responsBlack:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestManager weChatBindAcc:withOpenId:withAppId:withMobile:withDynamicCheck:responsBlack:]", 6)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestManager qqTokenVerify:responsBlack:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestManager qqBindAcc:withMobile:withDynamicCheck:responsBlack:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestManager weiboTokenVerify:responsBlack:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountRequestManager weiboBindAcc:withMobile:withDynamicCheck:responsBlack:]", 4)}, 0);
setTimeout(function(){hookObjC("+[EAccountEncryptorXXTEA hexStringForData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountEncryptorXXTEA dataForHexString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountEncryptorXXTEA XXTEADEncryptData:key:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountEncryptorXXTEA XXTEADEncryptStr:key:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountEncryptorXXTEA XXTEAEncryptStr:key:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountEncryptorRSA encryptString:publicKeyWithContentsOfFile:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountEncryptorRSA encryptString:publicKeyRef:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountEncryptorRSA decryptString:privateKeyWithContentsOfFile:password:]", 3)}, 0);
setTimeout(function(){hookObjC("+[EAccountEncryptorRSA decryptString:privateKeyRef:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountEncryptorRSA encryptString:publicKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountEncryptorRSA hexStringForData:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountEncryptorRSA encryptData:publicKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountEncryptorRSA addPublicKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountEncryptorRSA stripPublicKeyHeader:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountEncryptorRSA encryptData:withKeyRef:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountEncryptorRSA decryptString:privateKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountEncryptorRSA decryptData:privateKey:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountEncryptorRSA dataForHexString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountEncryptorRSA addPrivateKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountEncryptorRSA stripPrivateKeyHeader:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountEncryptorRSA decryptData:withKeyRef:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountBriefUserInfo save:andUuid:]", 2)}, 0);
setTimeout(function(){hookObjC("+[EAccountBriefUserInfo loadToDictionary]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountBriefUserInfo loadForOutputContent]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountBriefUserInfo fullFileName:]", 1)}, 0);
setTimeout(function(){hookObjC("+[EAccountBriefUserInfo authorizeFile]", 0)}, 0);
setTimeout(function(){hookObjC("+[EAccountBriefUserInfo briefFile]", 0)}, 0);
setTimeout(function(){hookObjC("-[AuthUserBridge myPageColse:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AuthUserBridge loginOut:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapGeoPoint coordinateString]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapGeoPolygon coordinateString]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapCloudSearchBaseRequest filterString]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapCloudSearchBaseRequest sortString]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapBusLineBaseSearchRequest busLineBaseParam]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapSearchAPI responseClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapSearchAPI registerResponseClass:forRequestClass:]", 2)}, 0);
setTimeout(function(){hookObjC("+[AMapSearchAPI responseClassForRequestClass:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapSearchAPI registerResponseClasses]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapBusStopSearchRequestReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapBusStopSearchRequestReformer URLPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapReGeocodeRequestReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapReGeocodeRequestReformer URLPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapCloudPOIAroundSearchReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapCloudPOIAroundSearchReformer URLPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapNearbySearchRequestReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapNearbySearchRequestReformer URLPath]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapSearchServiceProvider sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchServiceProvider restServerAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchServiceProvider cloudServerAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchServiceProvider AOSServerAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI cancelAllRequests]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI performPOISearchWithBaseRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapPOIIDSearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapPOIKeywordsSearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapPOIAroundSearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapPOIPolygonSearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapRoutePOISearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapGeocodeSearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapReGoecodeSearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapBusStopSearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapBusLineIDSearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapBusLineNameSearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapDistrictSearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapDrivingRouteSearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapWalkingRouteSearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapTransitRouteSearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapRidingRouteSearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapWeatherSearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapNearbySearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapCloudPOIAroundSearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapCloudPOIPolygonSearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapCloudPOIIDSearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapCloudPOILocalSearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapLocationShareSearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapPOIShareSearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI AMapRouteShareSearch:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI additionalParameters]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI performRequestWithReformer:request:]", 2)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI performAOSRequestWithReformer:request:]", 2)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI operationForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI containsRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI addOperation:forRequest:]", 2)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI removeOperationForRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI clearAllOperations]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI networkManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchAPI requestOperationMapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapSearchCategoryLoader loadCategories]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapResponseBuilder errorCodeWithAOSInfoCode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapResponseBuilder errorCodeWithServerInfoCode:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapResponseBuilder buildResponseWithData:responseClass:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[AMapResponseBuilder buildNearbyResponseWithData:error:]", 2)}, 0);
setTimeout(function(){hookObjC("+[AMapResponseBuilder buildAOSResponseWithData:responseClass:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[AMapResponseBuilder errorWithURLError:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapResponseBuilder errorWithErrorCode:info:]", 2)}, 0);
setTimeout(function(){hookObjC("-[AMapShareRequestReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapShareRequestReformer URLPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapNearbyClearReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapNearbyClearReformer serverVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapNearbyClearReformer URLPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapDistrictRequestReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapDistrictRequestReformer URLPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapBusLineBaseRequestReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapBusLineNameRequestReformer URLPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapBusLineIDRequestReformer URLPath]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapRequestReformer reformerWithPOISearchRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapRequestReformer reformerWithRoutePOISearchRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapRequestReformer reformerWithReGeocodeSearchRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapRequestReformer reformerWithGeocodeSearchRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapRequestReformer reformerWithBusStopSearchRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapRequestReformer reformerWithBusLineIDSearchRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapRequestReformer reformerWithBusLineNameSearchRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapRequestReformer reformerWithDistrictSearchRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapRequestReformer reformerWithWeatherSearchRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapRequestReformer reformerWithDrivingRouteSearchRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapRequestReformer reformerWithWalkingRouteSearchRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapRequestReformer reformerWithTransitRouteSearchRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapRequestReformer reformerWithRidingRouteSearchRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapRequestReformer reformerWithUploadInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapRequestReformer reformerWithUserID:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapRequestReformer reformerWithNearbySearchRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapRequestReformer reformerWithCloudPOIAroundSearchRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapRequestReformer reformerWithCloudPOIPolygonSearchRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapRequestReformer reformerWithCloudPOIIDSearchRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapRequestReformer reformerWithCloudPOILocalSearchRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapRequestReformer reformerWithShareSearchRequest:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapPOISearchBaseRequest requireExtension]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapPOISearchBaseRequest requireSubPOIs]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapPOIKeywordsSearchRequest cityLimit]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapPOISearchResponse ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapPOISearchResponse ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapRoutePOISearchRequest searchType]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapRoutePOISearchResponse ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapRoutePOISearchResponse ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapInputTipsSearchRequest cityLimit]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapInputTipsSearchResponse ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapInputTipsSearchResponse ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapGeocodeSearchResponse ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapGeocodeSearchResponse ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapReGeocodeSearchRequest requireExtension]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapReGeocodeSearchResponse ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapBusStopSearchResponse ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapBusStopSearchResponse ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapBusLineBaseSearchRequest requireExtension]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapBusLineSearchResponse ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapBusLineSearchResponse ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapDistrictSearchRequest requireExtension]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapDrivingRouteSearchRequest stringFromWayPoints]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapDrivingRouteSearchRequest stringFromAvoidPolygons]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapDrivingRouteSearchRequest originId]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapDrivingRouteSearchRequest destinationId]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapDrivingRouteSearchRequest requireExtension]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapDistrictSearchResponse ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapDistrictSearchResponse ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapTransitRouteSearchRequest destinationCity]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapTransitRouteSearchRequest requireExtension]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapRouteSearchResponse ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapWeatherSearchResponse ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapWeatherSearchResponse ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapNearbySearchRequest searchType]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapNearbySearchResponse ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapNearbySearchResponse ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapCloudSearchBaseRequest sortFields]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapCloudSearchBaseRequest sortType]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapCloudPOISearchResponse ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapCloudPOISearchResponse ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapCloudPOISearchResponse POIs]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapShareSearchBaseRequest transferBaseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapShareSearchBaseRequest transferAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapShareSearchBaseRequest viaCoordinates]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapShareSearchBaseRequest viaNames]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapLocationShareSearchRequest transferAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapPOIShareSearchRequest transferAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapRouteShareSearchRequest transferAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapRouteShareSearchRequest startCoordinate]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapRouteShareSearchRequest destinationCoordinate]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapRouteShareSearchRequest startName]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapRouteShareSearchRequest destinationName]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapNavigationShareSearchRequest transferAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapNavigationShareSearchRequest startCoordinate]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapNavigationShareSearchRequest destinationCoordinate]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapShareSearchResponse ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapShareSearchResponse shareURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapWeatherRequestReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapWeatherRequestReformer URLPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapCloudPOILocalSearchReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapCloudPOILocalSearchReformer URLPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapNearbyUploadReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapNearbyUploadReformer serverVersion]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapNearbyUploadReformer URLPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapCloudPOIIDSearchReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapCloudPOIIDSearchReformer URLPath]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapCloudComponent sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapCloudComponent userAgent]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapCloudPOIPolygonSearchReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapCloudPOIPolygonSearchReformer URLPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchObject encodeWithCoder:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapSearchObject ajo_propertyNames]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapSearchObject ajo_propertyKeys]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchObject formattedDescription]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapGeoPoint ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapGeoPoint locationWithLatitude:longitude:]", 2)}, 0);
setTimeout(function(){hookObjC("+[AMapGeoPoint locationWithString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapGeoPolygon ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapGeoPolygon ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapGeoPolygon polygonWithPoints:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapGeoPolygon polygonWithString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapCity ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapCity ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapSuggestion ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapSuggestion ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapTip ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapTip ajo_validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[AMapImage ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapPOIExtension ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapIndoorData ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapIndoorData floorName]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapSubPOI ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapSubPOI ajo_validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[AMapRoutePOI ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapRoutePOI ajo_validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[AMapPOI ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapPOI ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapPOI ajo_ignoredSetValue:forUndefinedMappingKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[AMapPOI ajo_validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[AMapPOI ajo_willCreateObjectOfClass:withDictionary:forKey:abort:]", 4)}, 0);
setTimeout(function(){hookObjC("-[AMapPOI parkingType]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapPOI shopID]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapPOI enterLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapPOI exitLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapPOI hasIndoorMap]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapPOI businessArea]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapPOI indoorData]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapPOI subPOIs]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapPOI extensionInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapAOI ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapAOI ajo_validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[AMapRoad ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapRoad ajo_validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[AMapRoadInter ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapRoadInter ajo_validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[AMapRoadInter firstId]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapRoadInter firstName]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapRoadInter secondId]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapRoadInter secondName]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapStreetNumber ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapStreetNumber ajo_validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[AMapAddressComponent ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapAddressComponent ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapAddressComponent ajo_validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[AMapAddressComponent streetNumber]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapAddressComponent businessAreas]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapBusinessArea ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapBusinessArea ajo_validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[AMapReGeocode ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapReGeocode ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapReGeocode formattedAddress]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapReGeocode addressComponent]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapGeocode ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapGeocode ajo_validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[AMapGeocode formattedAddress]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapBusLine ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapBusLine ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapBusLine ajo_validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[AMapBusLine startStop]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapBusLine endStop]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapBusLine basicPrice]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapBusLine totalPrice]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapBusLine busStops]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapBusLine departureStop]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapBusLine arrivalStop]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapBusLine viaBusStops]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapBusStop ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapBusStop ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapBusStop ajo_validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[AMapDistrict ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapDistrict ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapDistrict ajo_validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[AMapDistrict polygonArrayWithString:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapRoute ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapRoute ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapRoute ajo_validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[AMapRoute taxiCost]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapPath ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapPath ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapPath tollDistance]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapPath totalTrafficLights]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapStep ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapStep ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapStep assistantAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapStep tollDistance]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapStep tollRoad]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapTMC ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapWalking ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapWalking ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapWalking ajo_validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[AMapTaxi ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapTaxi ajo_validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[AMapRailwayStation ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapRailwayStation ajo_validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[AMapRailwaySpace ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapRailway ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapRailway ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapRailway departureStation]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapRailway arrivalStation]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapRailway viaStops]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapSegment ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapSegment ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapSegment ajo_validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[AMapSegment enterName]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapSegment enterLocation]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapSegment exitName]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapSegment exitLocation]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapTransit ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapTransit ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapTransit walkingDistance]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapLocalWeatherLive ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapLocalWeatherLive windDirection]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapLocalWeatherLive windPower]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapLocalWeatherForecast ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapLocalWeatherForecast ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapLocalDayWeatherForecast ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapLocalDayWeatherForecast dayWeather]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapLocalDayWeatherForecast nightWeather]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapLocalDayWeatherForecast dayTemp]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapLocalDayWeatherForecast nightTemp]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapLocalDayWeatherForecast dayWind]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapLocalDayWeatherForecast nightWind]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapLocalDayWeatherForecast dayPower]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapLocalDayWeatherForecast nightPower]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapNearbyUserInfo ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapNearbyUserInfo ajo_validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[AMapNearbyUserInfo userID]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapCloudImage ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapCloudPOI ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapCloudPOI ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapCloudPOI ajo_ignoredSetValue:forUndefinedMappingKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[AMapCloudPOI ajo_validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[AMapCloudPOI customFields]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapSearchComponent sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchComponent userAgent]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchComponent crashfilterArray]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapNearbySearchManager sharedInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapNearbySearchManager startAutoUploadNearbyInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapNearbySearchManager stopAutoUploadNearbyInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapNearbySearchManager uploadNearbyInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapNearbySearchManager clearUserInfoWithID:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapNearbySearchManager onUploadAction]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapNearbySearchManager additionalParameters]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapNearbySearchManager performUploadingWithUserInfo:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapNearbySearchManager performClearingWithUserID:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapRoutePOIRequestReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapRoutePOIRequestReformer URLPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapDrivingRouteRequestReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapDrivingRouteRequestReformer URLPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapWalkingRouteRequestReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapWalkingRouteRequestReformer URLPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapTransitRouteRequestReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapTransitRouteRequestReformer URLPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapRidingRouteRequestReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapRidingRouteRequestReformer URLPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchObject ajo_setValue:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchObject ajo_setValuesForKeysWithDictionary:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchObject ajo_description]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchObject ajo_descriptionWithIndentation:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchObject ajo_mapValue:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchObject ajo_mapKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapSearchObject ajo_mapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapSearchObject ajo_valueMappingForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapSearchObject ajo_arrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchObject ajo_willCreateObjectOfClass:withDictionary:forKey:abort:]", 4)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchObject ajo_didCreateObject:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchObject ajo_validateValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchObject ajo_validateArrayObject:forArrayKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchObject ajo_ignoredSetValue:forUndefinedMappingKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchObject ajo_invalidValue:forKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchObject ajo_invalidValue:forArrayKey:error:]", 3)}, 0);
setTimeout(function(){hookObjC("+[AMapSearchObject ajo_cachedMapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapSearchObject ajo_cachedValueMappingForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("+[AMapSearchObject ajo_cachedArrayClassMapping]", 0)}, 0);
setTimeout(function(){hookObjC("+[AMapSearchObject ajo_keyPaths]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchObject ajo_typeAttributeForKey:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchObject ajo_isClassTypeTypeAttribute:]", 1)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchObject ajo_getClassName:protocols:fromTypeAttribute:]", 3)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchObject ajo_validateAutomaticallyValue:forKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchObject ajo_validateAutomaticallyValue:toClass:forKey:]", 3)}, 0);
setTimeout(function(){hookObjC("-[AMapSearchObject ajo_validateArrayContent:forArrayKey:]", 2)}, 0);
setTimeout(function(){hookObjC("-[AMapInputTipRequestReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapInputTipRequestReformer URLPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapNearbyUploadInfo userID]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapNearbyUploadInfo coordinateType]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapGeocodeRequestReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapGeocodeRequestReformer URLPath]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapPOIRequestReformer baseURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[AMapPOIRequestReformer URLPath]", 0)}, 0);
setTimeout(function(){hookObjC("+[YXApi registerApp:]", 1)}, 0);
setTimeout(function(){hookObjC("+[YXApi registerAppID:appSecret:]", 2)}, 0);
setTimeout(function(){hookObjC("+[YXApi openYXApp]", 0)}, 0);
setTimeout(function(){hookObjC("+[YXApi handleOpenURL:delegate:]", 2)}, 0);
setTimeout(function(){hookObjC("+[YXApi sendReq:]", 1)}, 0);
setTimeout(function(){hookObjC("+[YXApi sendResp:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YXBaseReq fromAppID]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXBaseReq toAppID]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXBaseResp errDescription]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXBaseResp fromAppID]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXBaseResp toAppID]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXPAAudioObject iconURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXPAAudioObject paID]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXPAAudioObject audioURL]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXPAAudioObject audioDuration]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXPACardObject paID]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXImageObject imageData]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXImageObject imageUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXMusicObject musicUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXMusicObject musicLowBandUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXMusicObject musicDataUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXMusicObject musicLowBandDataUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXWebpageObject webpageUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXSDKHttpPostExecutor cancelRequest]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXSDKHttpPostExecutor addToQueen]", 0)}, 0);
setTimeout(function(){hookObjC("+[YXSDKHttpPostExecutor abort:]", 1)}, 0);
setTimeout(function(){hookObjC("+[YXSDKHttpPostExecutor postExecuteWithUrlStr:formData:filedata:fileName:fileContentType:headers:finishCallbackBlock:errorCallBack:]", 8)}, 0);
setTimeout(function(){hookObjC("+[YXSDKHttpPostExecutor postExecuteWithUrlStr:method:params:headers:finishCallbackBlock:errorCallBack:]", 6)}, 0);
setTimeout(function(){hookObjC("-[YXSDKHttpPostExecutor connection:canAuthenticateAgainstProtectionSpace:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YXSDKHttpPostExecutor connection:didReceiveAuthenticationChallenge:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YXSDKHttpPostExecutor connection:didReceiveResponse:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YXSDKHttpPostExecutor connection:didReceiveData:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YXSDKHttpPostExecutor connectionDidFinishLoading:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YXSDKHttpPostExecutor connection:didFailWithError:]", 2)}, 0);
setTimeout(function(){hookObjC("+[YXSDKHttpPostExecutor clearAllConnections]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXSDKHttpPostExecutor resultData]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXSDKHttpPostExecutor finishCallbackBlock]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXSDKHttpPostExecutor responseCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXSDKHttpPostExecutor errorCallBack]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXSDKHttpPostExecutor useImageDataCache]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXMediaMessage msgDescription]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXMediaMessage thumbData]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXMediaMessage mediaObject]", 0)}, 0);
setTimeout(function(){hookObjC("+[YXAPIManager sharedManager]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager registerAppID:appSecret:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager saveAppInfoToPasteBoard]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager openYXApp]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager handleOpenURL:delegate:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager sendReq:sendToYX:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager sendResp:sendToYX:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager infoFromAppID:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager saveAppInfos]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager sharedBoardName]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager sharedBoard]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager sharedAppIdsBoard]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager refreshToken:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager sendOauthSuccessNotification:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager destroyToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager urlForOpenYixin]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager urlForYixinShare]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager urlForYixinOAuth]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager urlForYixinFav]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager urlForThirdpart:]", 1)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager clearPasteMsgData]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager log:relatedObject:fromWap:]", 3)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager log:relatedObject:]", 2)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager appID]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager oauthState]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager refresh_token]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager appSecret]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager osVer]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager deviceInfo]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager expires_in]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager commonReqHeaders]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager lastOauthReq]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXAPIManager lastOauthRedirectUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[SendMessageToYXReq bText]", 0)}, 0);
setTimeout(function(){hookObjC("-[SendMessageToYXReq internalData]", 0)}, 0);
setTimeout(function(){hookObjC("-[SendOAuthToYXResp authCode]", 0)}, 0);
setTimeout(function(){hookObjC("-[SendOAuthToYXResp authToken]", 0)}, 0);
setTimeout(function(){hookObjC("-[SendOAuthToYXResp exprieSeonds]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXVideoObject videoUrl]", 0)}, 0);
setTimeout(function(){hookObjC("-[YXVideoObject videoLowBandUrl]", 0)}, 0);
setTimeout(function(){hookObjC("+[TcApiTool calcFrameByOrientation:id:]", 2)}, 0);
setTimeout(function(){hookObjC("+[TcApiTool MoveAllWindowOutOfScreen:animation:]", 2)}, 0);
setTimeout(function(){hookObjC("+[TcApiTool MoveAllWindowIntoScreen:animation:]", 2)}, 0);
setTimeout(function(){hookObjC("+[TcApiTool GetURLWithParam:withParam:]", 2)}, 0);
setTimeout(function(){hookObjC("+[TcApiTool SDKInfo]", 0)}, 0);
setTimeout(function(){hookObjC("+[TcApiTool TCOSDKdeviceMachine:]", 1)}, 0);
setTimeout(function(){hookObjC("+[TcApiTool decodeAccessToken:key:]", 2)}, 0);
setTimeout(function(){hookObjC("+[TcApiTool random16Str]", 0)}, 0);
setTimeout(function(){hookObjC("+[TcApiTool systemVersion]", 0)}, 0);
setTimeout(function(){hookObjC("+[TcApiTool systemVersionString]", 0)}, 0);
setTimeout(function(){hookObjC("+[TcApiTool md5:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ConfigManager GetInstance]", 0)}, 0);
setTimeout(function(){hookObjC("-[ConfigManager loadLocalConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[ConfigManager saveLocalConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[ConfigManager updateConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[ConfigManager requestConfig]", 0)}, 0);
setTimeout(function(){hookObjC("-[ConfigManager deleteAPIRequestBySeq:]", 1)}, 0);
setTimeout(function(){hookObjC("-[ConfigManager requestConfigResponse:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TXAppidConvert InitWithAppId:]", 1)}, 0);
setTimeout(function(){hookObjC("-[TXAppidConvert GetConnectionAppId]", 0)}, 0);
setTimeout(function(){hookObjC("-[TXAppidConvert GetMQQAppId]", 0)}, 0);
setTimeout(function(){hookObjC("+[GetMessageFromQQResp respWithContent:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SendMessageToQQReq reqWithContent:]", 1)}, 0);
setTimeout(function(){hookObjC("+[SendMessageToQQResp respWithResult:errorDescription:extendInfo:]", 3)}, 0);
setTimeout(function(){hookObjC("+[ShowMessageFromQQReq reqWithContent:]", 1)}, 0);
setTimeout(function(){hookObjC("+[ShowMessageFromQQResp respWithResult:errorDescription:]", 2)}, 0);
