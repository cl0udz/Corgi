id __cdecl +[MobClickUtility AES128EncryptData:withKey:](MobClickUtility_meta *self, SEL a2, id a3, const void *a4)
{
  const void *v4; // ST20_4
  id v5; // r8
  int v6; // ST1C_4
  char *v7; // r5
  void *v8; // r11
  int v9; // r10
  void *v10; // r0
  void *v11; // r4
  void *v12; // r0
  int v14; // [sp+24h] [bp-1Ch]

  v4 = a4;
  v5 = a3;
  v6 = objc_retain(a3, a2);
  v7 = (char *)objc_msgSend(v5, "length");
  v8 = malloc((size_t)(v7 + 16));
  v9 = 0;
  memset(v8, 0, (size_t)(v7 + 16));
  v14 = 0;
  v10 = (void *)objc_retainAutorelease(v5);
  v11 = objc_msgSend(v10, "bytes");
  objc_release(v6);
  if ( !CCCrypt(0, 0, 1, v4, 16, &unk_10738C, v11, v7, v8, v7 + 16, &v14) )
  {
    v12 = objc_msgSend(&OBJC_CLASS___NSData, "dataWithBytes:length:", v8, v14);
    v9 = objc_retainAutoreleasedReturnValue(v12);
  }
  free(v8);
  return (id)objc_autoreleaseReturnValue(v9);
}

id __cdecl +[MobClickUtility AES128DecryptData:withKey:](MobClickUtility_meta *self, SEL a2, id a3, const void *a4)
{
  const void *v4; // ST20_4
  id v5; // r8
  int v6; // ST1C_4
  char *v7; // r5
  void *v8; // r11
  int v9; // r10
  void *v10; // r0
  void *v11; // r4
  void *v12; // r0
  int v14; // [sp+24h] [bp-1Ch]

  v4 = a4;
  v5 = a3;
  v6 = objc_retain(a3, a2);
  v7 = (char *)objc_msgSend(v5, "length");
  v8 = malloc((size_t)(v7 + 16));
  v9 = 0;
  memset(v8, 0, (size_t)(v7 + 16));
  v14 = 0;
  v10 = (void *)objc_retainAutorelease(v5);
  v11 = objc_msgSend(v10, "bytes");
  objc_release(v6);
  if ( !CCCrypt(1, 0, 1, v4, 16, &unk_10738C, v11, v7, v8, v7 + 16, &v14) )
  {
    v12 = objc_msgSend(&OBJC_CLASS___NSData, "dataWithBytes:length:", v8, v14);
    v9 = objc_retainAutoreleasedReturnValue(v12);
  }
  free(v8);
  return (id)objc_autoreleaseReturnValue(v9);
}

